{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"@babel/runtime/helpers/defineProperty\");var _reactJsxRuntime=require(\"react/jsx-runtime\");var _objectWithoutProperties=require(\"@babel/runtime/helpers/objectWithoutProperties\");const _excluded=[\"children\"];function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.withLayoutContext=exports.useFilterScreenChildren=void 0;const react_1=__importDefault(require(\"react\"));const Route_1=require(\"../Route\");const useScreens_1=require(\"../useScreens\");const Screen_1=require(\"../views/Screen\");function useFilterScreenChildren(children,{isCustomNavigator,contextKey}={}){return react_1.default.useMemo(()=>{const customChildren=[];const screens=react_1.default.Children.map(children,child=>{if(react_1.default.isValidElement(child)&&child&&child.type===Screen_1.Screen){if(!child.props.name){throw new Error(`<Screen /> component in \\`default export\\` at \\`app${contextKey}/_layout\\` must have a \\`name\\` prop when used as a child of a Layout Route.`);}if(false){if(['children','component','getComponent'].some(key=>key in child.props)){throw new Error(`<Screen /> component in \\`default export\\` at \\`app${contextKey}/_layout\\` must not have a \\`children\\`, \\`component\\`, or \\`getComponent\\` prop when used as a child of a Layout Route`);}}return child.props;}else{if(isCustomNavigator){customChildren.push(child);}else{console.warn(`Layout children must be of type Screen, all other children are ignored. To use custom children, create a custom <Layout />. Update Layout Route at: \"app${contextKey}/_layout\"`);}}});if(false){const names=screens?.map(screen=>screen.name);if(names&&new Set(names).size!==names.length){throw new Error('Screen names must be unique: '+names);}}return{screens,children:customChildren};},[children]);}exports.useFilterScreenChildren=useFilterScreenChildren;function withLayoutContext(Nav,processor){const Navigator=react_1.default.forwardRef((_ref,ref)=>{let{children:userDefinedChildren}=_ref,props=_objectWithoutProperties(_ref,_excluded);const contextKey=(0,Route_1.useContextKey)();const{screens}=useFilterScreenChildren(userDefinedChildren,{contextKey});const processed=processor?processor(screens??[]):screens;const sorted=(0,useScreens_1.useSortedScreens)(processed??[]);if(!sorted.length){return null;}return _reactJsxRuntime.jsx(Nav,_objectSpread(_objectSpread({},props),{},{id:contextKey,ref:ref,children:sorted}));});Navigator.Screen=Screen_1.Screen;return Navigator;}exports.withLayoutContext=withLayoutContext;","map":{"version":3,"names":["react_1","__importDefault","require","Route_1","useScreens_1","Screen_1","useFilterScreenChildren","children","isCustomNavigator","contextKey","default","useMemo","customChildren","screens","Children","map","child","isValidElement","type","Screen","props","name","Error","some","key","push","console","warn","names","screen","Set","size","length","exports","withLayoutContext","Nav","processor","Navigator","forwardRef","_ref","ref","userDefinedChildren","_objectWithoutProperties","_excluded","useContextKey","processed","sorted","useSortedScreens","_reactJsxRuntime","jsx","_objectSpread","id"],"sources":["/Users/apple/FounderFinder/node_modules/expo-router/src/layouts/withLayoutContext.tsx"],"sourcesContent":["import { EventMapBase, NavigationState } from '@react-navigation/native';\nimport React from 'react';\n\nimport { useContextKey } from '../Route';\nimport { PickPartial } from '../types';\nimport { useSortedScreens, ScreenProps } from '../useScreens';\nimport { Screen } from '../views/Screen';\n\nexport function useFilterScreenChildren(\n  children: React.ReactNode,\n  {\n    isCustomNavigator,\n    contextKey,\n  }: {\n    isCustomNavigator?: boolean;\n    /** Used for sending developer hints */\n    contextKey?: string;\n  } = {}\n) {\n  return React.useMemo(() => {\n    const customChildren: any[] = [];\n    const screens = React.Children.map(children, (child) => {\n      if (React.isValidElement(child) && child && child.type === Screen) {\n        if (!child.props.name) {\n          throw new Error(\n            `<Screen /> component in \\`default export\\` at \\`app${contextKey}/_layout\\` must have a \\`name\\` prop when used as a child of a Layout Route.`\n          );\n        }\n        if (process.env.NODE_ENV !== 'production') {\n          if (['children', 'component', 'getComponent'].some((key) => key in child.props)) {\n            throw new Error(\n              `<Screen /> component in \\`default export\\` at \\`app${contextKey}/_layout\\` must not have a \\`children\\`, \\`component\\`, or \\`getComponent\\` prop when used as a child of a Layout Route`\n            );\n          }\n        }\n        return child.props;\n      } else {\n        if (isCustomNavigator) {\n          customChildren.push(child);\n        } else {\n          console.warn(\n            `Layout children must be of type Screen, all other children are ignored. To use custom children, create a custom <Layout />. Update Layout Route at: \"app${contextKey}/_layout\"`\n          );\n        }\n      }\n    });\n\n    // Add an assertion for development\n    if (process.env.NODE_ENV !== 'production') {\n      // Assert if names are not unique\n      const names = screens?.map((screen) => screen.name);\n      if (names && new Set(names).size !== names.length) {\n        throw new Error('Screen names must be unique: ' + names);\n      }\n    }\n\n    return {\n      screens,\n      children: customChildren,\n    };\n  }, [children]);\n}\n\n/** Return a navigator that automatically injects matched routes and renders nothing when there are no children. Return type with children prop optional */\nexport function withLayoutContext<\n  TOptions extends object,\n  T extends React.ComponentType<any>,\n  State extends NavigationState,\n  EventMap extends EventMapBase,\n>(\n  Nav: T,\n  processor?: (\n    options: ScreenProps<TOptions, State, EventMap>[]\n  ) => ScreenProps<TOptions, State, EventMap>[]\n): React.ForwardRefExoticComponent<\n  React.PropsWithoutRef<PickPartial<React.ComponentProps<T>, 'children'>> &\n    React.RefAttributes<unknown>\n> & {\n  Screen: (props: ScreenProps<TOptions, State, EventMap>) => null;\n} {\n  const Navigator = React.forwardRef(\n    (\n      { children: userDefinedChildren, ...props }: PickPartial<React.ComponentProps<T>, 'children'>,\n      ref\n    ) => {\n      const contextKey = useContextKey();\n\n      const { screens } = useFilterScreenChildren(userDefinedChildren, {\n        contextKey,\n      });\n\n      const processed = processor ? processor(screens ?? []) : screens;\n\n      const sorted = useSortedScreens(processed ?? []);\n\n      // Prevent throwing an error when there are no screens.\n      if (!sorted.length) {\n        return null;\n      }\n\n      return (\n        // @ts-expect-error\n        <Nav {...props} id={contextKey} ref={ref} children={sorted} />\n      );\n    }\n  );\n\n  // @ts-expect-error\n  Navigator.Screen = Screen;\n  // @ts-expect-error\n  return Navigator;\n}\n"],"mappings":"6kCACA,MAAAA,OAAA,CAAAC,eAAA,CAAAC,OAAA,WAEA,MAAAC,OAAA,CAAAD,OAAA,aAEA,MAAAE,YAAA,CAAAF,OAAA,kBACA,MAAAG,QAAA,CAAAH,OAAA,oBAEA,QAAgB,CAAAI,uBAAuBA,CACrCC,QAAyB,CACzB,CACEC,iBAAiB,CACjBC,UAAU,EAKR,EAAE,EAEN,MAAO,CAAAT,OAAA,CAAAU,OAAK,CAACC,OAAO,CAAC,IAAK,CACxB,KAAM,CAAAC,cAAc,CAAU,EAAE,CAChC,KAAM,CAAAC,OAAO,CAAGb,OAAA,CAAAU,OAAK,CAACI,QAAQ,CAACC,GAAG,CAACR,QAAQ,CAAGS,KAAK,EAAI,CACrD,GAAIhB,OAAA,CAAAU,OAAK,CAACO,cAAc,CAACD,KAAK,CAAC,EAAIA,KAAK,EAAIA,KAAK,CAACE,IAAI,GAAKb,QAAA,CAAAc,MAAM,CAAE,CACjE,GAAI,CAACH,KAAK,CAACI,KAAK,CAACC,IAAI,CAAE,CACrB,KAAM,IAAI,CAAAC,KAAK,CACb,sDAAsDb,UAAU,8EAA8E,CAC/I,C,CAEH,SAA2C,CACzC,GAAI,CAAC,UAAU,CAAE,WAAW,CAAE,cAAc,CAAC,CAACc,IAAI,CAAEC,GAAG,EAAKA,GAAG,GAAI,CAAAR,KAAK,CAACI,KAAK,CAAC,CAAE,CAC/E,KAAM,IAAI,CAAAE,KAAK,CACb,sDAAsDb,UAAU,yHAAyH,CAC1L,C,EAGL,MAAO,CAAAO,KAAK,CAACI,KAAK,C,CACnB,IAAM,CACL,GAAIZ,iBAAiB,CAAE,CACrBI,cAAc,CAACa,IAAI,CAACT,KAAK,CAAC,C,CAC3B,IAAM,CACLU,OAAO,CAACC,IAAI,CACV,2JAA2JlB,UAAU,WAAW,CACjL,C,EAGP,CAAC,CAAC,CAGF,SAA2C,CAEzC,KAAM,CAAAmB,KAAK,CAAGf,OAAO,EAAEE,GAAG,CAAEc,MAAM,EAAKA,MAAM,CAACR,IAAI,CAAC,CACnD,GAAIO,KAAK,EAAI,GAAI,CAAAE,GAAG,CAACF,KAAK,CAAC,CAACG,IAAI,GAAKH,KAAK,CAACI,MAAM,CAAE,CACjD,KAAM,IAAI,CAAAV,KAAK,CAAC,+BAA+B,CAAGM,KAAK,CAAC,C,EAI5D,MAAO,CACLf,OAAO,CACPN,QAAQ,CAAEK,c,CACX,CACH,CAAC,CAAE,CAACL,QAAQ,CAAC,CAAC,CAChB,CArDA0B,OAAA,CAAA3B,uBAAA,CAAAA,uBAAA,CAwDA,QAAgB,CAAA4B,iBAAiBA,CAM/BC,GAAM,CACNC,SAE6C,EAO7C,KAAM,CAAAC,SAAS,CAAGrC,OAAA,CAAAU,OAAK,CAAC4B,UAAU,CAChC,CAAAC,IAAA,CAEEC,GAAG,GACD,IAFF,CAAEjC,QAAQ,CAAEkC,mBAA6B,CAAoD,CAAAF,IAAA,CAAzDnB,KAAK,CAAAsB,wBAAA,CAAAH,IAAA,CAAAI,SAAA,EAGzC,KAAM,CAAAlC,UAAU,CAAG,GAAAN,OAAA,CAAAyC,aAAa,GAAE,CAElC,KAAM,CAAE/B,OAAO,CAAE,CAAGP,uBAAuB,CAACmC,mBAAmB,CAAE,CAC/DhC,U,CACD,CAAC,CAEF,KAAM,CAAAoC,SAAS,CAAGT,SAAS,CAAGA,SAAS,CAACvB,OAAO,EAAI,EAAE,CAAC,CAAGA,OAAO,CAEhE,KAAM,CAAAiC,MAAM,CAAG,GAAA1C,YAAA,CAAA2C,gBAAgB,EAACF,SAAS,EAAI,EAAE,CAAC,CAGhD,GAAI,CAACC,MAAM,CAACd,MAAM,CAAE,CAClB,MAAO,KAAI,C,CAGb,MAEE,CAAAgB,gBAAA,CAAAC,GAAA,CAACd,GAAG,CAAAe,aAAA,CAAAA,aAAA,IAAK9B,KAAK,MAAE+B,EAAE,CAAE1C,UAAW,CAAC+B,GAAG,CAAEA,GAAI,CAACjC,QAAQ,CAAEuC,MAAO,GAAG,CAElE,CAAC,CACF,CAGDT,SAAS,CAAClB,MAAM,CAAGd,QAAA,CAAAc,MAAM,CAEzB,MAAO,CAAAkB,SAAS,CAClB,CA/CAJ,OAAA,CAAAC,iBAAA,CAAAA,iBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}