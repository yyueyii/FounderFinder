{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.loadBundleAsync=void 0;const buildUrlForBundle_1=require(\"./buildUrlForBundle\");const fetchThenEval_1=require(\"./fetchThenEval\");let pendingRequests=0;async function loadBundleAsync(bundlePath){const requestUrl=(0,buildUrlForBundle_1.buildUrlForBundle)(bundlePath);if(true){return(0,fetchThenEval_1.fetchThenEvalAsync)(requestUrl);}else{const LoadingView=require('../LoadingView').default;if(false){LoadingView.showMessage('Downloading...','load');}pendingRequests++;return(0,fetchThenEval_1.fetchThenEvalAsync)(requestUrl).then(()=>{const HMRClient=require('../HMRClient').default;HMRClient.registerBundle(requestUrl);}).finally(()=>{if(! --pendingRequests&&false){LoadingView.hide();}});}}exports.loadBundleAsync=loadBundleAsync;","map":{"version":3,"names":["buildUrlForBundle_1","require","fetchThenEval_1","pendingRequests","loadBundleAsync","bundlePath","requestUrl","buildUrlForBundle","fetchThenEvalAsync","LoadingView","default","showMessage","then","HMRClient","registerBundle","finally","hide","exports"],"sources":["/Users/apple/FounderFinder/node_modules/@expo/metro-runtime/src/async-require/loadBundle.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { buildUrlForBundle } from './buildUrlForBundle';\nimport { fetchThenEvalAsync } from './fetchThenEval';\n\nlet pendingRequests = 0;\n\n/**\n * Load a bundle for a URL using fetch + eval on native and script tag injection on web.\n *\n * @param bundlePath Given a statement like `import('./Bacon')` `bundlePath` would be `Bacon.bundle?params=from-metro`.\n */\nexport async function loadBundleAsync(bundlePath: string): Promise<void> {\n  const requestUrl = buildUrlForBundle(bundlePath);\n\n  if (process.env.NODE_ENV === 'production') {\n    return fetchThenEvalAsync(requestUrl);\n  } else {\n    const LoadingView = require('../LoadingView')\n      .default as typeof import('../LoadingView').default;\n    if (process.env.EXPO_OS !== 'web') {\n      // Send a signal to the `expo` package to show the loading indicator.\n      LoadingView.showMessage('Downloading...', 'load');\n    }\n    pendingRequests++;\n\n    return fetchThenEvalAsync(requestUrl)\n      .then(() => {\n        const HMRClient = require('../HMRClient').default as typeof import('../HMRClient').default;\n        HMRClient.registerBundle(requestUrl);\n      })\n      .finally(() => {\n        if (!--pendingRequests && process.env.EXPO_OS !== 'web') {\n          LoadingView.hide();\n        }\n      });\n  }\n}\n"],"mappings":"qGAMA,MAAAA,mBAAA,CAAAC,OAAA,wBACA,MAAAC,eAAA,CAAAD,OAAA,oBAEA,GAAI,CAAAE,eAAe,CAAG,CAAC,CAOhB,cAAe,CAAAC,eAAeA,CAACC,UAAkB,EACtD,KAAM,CAAAC,UAAU,CAAG,GAAAN,mBAAA,CAAAO,iBAAiB,EAACF,UAAU,CAAC,CAEhD,QAA2C,CACzC,MAAO,GAAAH,eAAA,CAAAM,kBAAkB,EAACF,UAAU,CAAC,C,CACtC,IAAM,CACL,KAAM,CAAAG,WAAW,CAAGR,OAAO,CAAC,gBAAgB,CAAC,CAC1CS,OAAkD,CACrD,SAAmC,CAEjCD,WAAW,CAACE,WAAW,CAAC,gBAAgB,CAAE,MAAM,CAAC,C,CAEnDR,eAAe,EAAE,CAEjB,MAAO,GAAAD,eAAA,CAAAM,kBAAkB,EAACF,UAAU,CAAC,CAClCM,IAAI,CAAC,IAAK,CACT,KAAM,CAAAC,SAAS,CAAGZ,OAAO,CAAC,cAAc,CAAC,CAACS,OAAgD,CAC1FG,SAAS,CAACC,cAAc,CAACR,UAAU,CAAC,CACtC,CAAC,CAAC,CACDS,OAAO,CAAC,IAAK,CACZ,GAAI,CAAC,GAAEZ,eAAe,OAAiC,CAAE,CACvDM,WAAW,CAACO,IAAI,EAAE,C,CAEtB,CAAC,CAAC,C,CAER,CAzBAC,OAAA,CAAAb,eAAA,CAAAA,eAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}