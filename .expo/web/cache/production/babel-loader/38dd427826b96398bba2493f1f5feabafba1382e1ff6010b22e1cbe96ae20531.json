{"ast":null,"code":"\"use strict\";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.useLocalSearchParams=exports.useGlobalSearchParams=exports.usePathname=exports.useSegments=exports.useUnstableGlobalHref=exports.useRouter=exports.useNavigationContainerRef=exports.useRootNavigation=exports.useRouteInfo=exports.useRootNavigationState=void 0;const native_1=require(\"@react-navigation/native\");const react_1=__importDefault(require(\"react\"));const router_store_1=require(\"./global-state/router-store\");function useRootNavigationState(){return(0,router_store_1.useStoreRootState)();}exports.useRootNavigationState=useRootNavigationState;function useRouteInfo(){return(0,router_store_1.useStoreRouteInfo)();}exports.useRouteInfo=useRouteInfo;function useRootNavigation(){return router_store_1.store.navigationRef.current;}exports.useRootNavigation=useRootNavigation;function useNavigationContainerRef(){return router_store_1.store.navigationRef;}exports.useNavigationContainerRef=useNavigationContainerRef;function useRouter(){return react_1.default.useMemo(()=>({push:router_store_1.store.push,dismiss:router_store_1.store.dismiss,dismissAll:router_store_1.store.dismissAll,canDismiss:router_store_1.store.canDismiss,back:router_store_1.store.goBack,replace:router_store_1.store.replace,setParams:router_store_1.store.setParams,canGoBack:router_store_1.store.canGoBack,navigate:router_store_1.store.navigate}),[]);}exports.useRouter=useRouter;function useUnstableGlobalHref(){return(0,router_store_1.useStoreRouteInfo)().unstable_globalHref;}exports.useUnstableGlobalHref=useUnstableGlobalHref;function useSegments(){return(0,router_store_1.useStoreRouteInfo)().segments;}exports.useSegments=useSegments;function usePathname(){return(0,router_store_1.useStoreRouteInfo)().pathname;}exports.usePathname=usePathname;function useGlobalSearchParams(){return(0,router_store_1.useStoreRouteInfo)().params;}exports.useGlobalSearchParams=useGlobalSearchParams;function useLocalSearchParams(){const params=react_1.default.useContext(native_1.NavigationRouteContext)?.params??{};return Object.fromEntries(Object.entries(params).map(([key,value])=>{if(Array.isArray(value)){return[key,value.map(v=>{try{return decodeURIComponent(v);}catch{return v;}})];}else{try{return[key,decodeURIComponent(value)];}catch{return[key,value];}}}));}exports.useLocalSearchParams=useLocalSearchParams;","map":{"version":3,"names":["native_1","require","react_1","__importDefault","router_store_1","useRootNavigationState","useStoreRootState","exports","useRouteInfo","useStoreRouteInfo","useRootNavigation","store","navigationRef","current","useNavigationContainerRef","useRouter","default","useMemo","push","dismiss","dismissAll","canDismiss","back","goBack","replace","setParams","canGoBack","navigate","useUnstableGlobalHref","unstable_globalHref","useSegments","segments","usePathname","pathname","useGlobalSearchParams","params","useLocalSearchParams","useContext","NavigationRouteContext","Object","fromEntries","entries","map","key","value","Array","isArray","v","decodeURIComponent"],"sources":["/Users/apple/FounderFinder/node_modules/expo-router/src/hooks.ts"],"sourcesContent":["import { NavigationRouteContext } from '@react-navigation/native';\nimport React from 'react';\n\nimport { store, useStoreRootState, useStoreRouteInfo } from './global-state/router-store';\nimport { ExpoRouter } from '../types/expo-router';\n\ntype SearchParams = Record<string, string | string[]>;\n\nexport function useRootNavigationState() {\n  return useStoreRootState();\n}\n\nexport function useRouteInfo() {\n  return useStoreRouteInfo();\n}\n\n/** @deprecated use `useNavigationContainerRef()` instead, which returns a React ref. */\nexport function useRootNavigation() {\n  return store.navigationRef.current;\n}\n\n/** @return the root `<NavigationContainer />` ref for the app. The `ref.current` may be `null` if the `<NavigationContainer />` hasn't mounted yet. */\nexport function useNavigationContainerRef() {\n  return store.navigationRef;\n}\n\nexport function useRouter(): ExpoRouter.Router {\n  return React.useMemo(\n    () => ({\n      push: store.push,\n      dismiss: store.dismiss,\n      dismissAll: store.dismissAll,\n      canDismiss: store.canDismiss,\n      back: store.goBack,\n      replace: store.replace,\n      setParams: store.setParams,\n      canGoBack: store.canGoBack,\n      navigate: store.navigate,\n      // TODO(EvanBacon): add `reload`\n    }),\n    []\n  );\n}\n\n/**\n * @private\n * @returns the current global pathname with query params attached. This may change in the future to include the hostname from a predefined universal link, i.e. `/foobar?hey=world` becomes `https://acme.dev/foobar?hey=world`\n */\nexport function useUnstableGlobalHref(): string {\n  return useStoreRouteInfo().unstable_globalHref;\n}\n\n/**\n * Get a list of selected file segments for the currently selected route. Segments are not normalized, so they will be the same as the file path. e.g. /[id]?id=normal -> [\"[id]\"]\n *\n * `useSegments` can be typed using an abstract.\n * Consider the following file structure, and strictly typed `useSegments` function:\n *\n * ```md\n * - app\n *   - [user]\n *     - index.js\n *     - followers.js\n *   - settings.js\n * ```\n * This can be strictly typed using the following abstract:\n *\n * ```ts\n * const [first, second] = useSegments<['settings'] | ['[user]'] | ['[user]', 'followers']>()\n * ```\n */\nexport function useSegments<TSegments extends string[] = string[]>(): TSegments {\n  return useStoreRouteInfo().segments as TSegments;\n}\n\n/** @returns global selected pathname without query parameters. */\nexport function usePathname(): string {\n  return useStoreRouteInfo().pathname;\n}\n\n/**\n * Get the globally selected query parameters, including dynamic path segments. This function will update even when the route is not focused.\n * Useful for analytics or other background operations that don't draw to the screen.\n *\n * When querying search params in a stack, opt-towards using `useLocalSearchParams` as these will only\n * update when the route is focused.\n *\n * @see `useLocalSearchParams`\n */\nexport function useGlobalSearchParams<\n  TParams extends SearchParams = SearchParams,\n>(): Partial<TParams> {\n  return useStoreRouteInfo().params as Partial<TParams>;\n}\n\n/**\n * Returns the URL search parameters for the contextually focused route. e.g. `/acme?foo=bar` -> `{ foo: \"bar\" }`.\n * This is useful for stacks where you may push a new screen that changes the query parameters.\n *\n * To observe updates even when the invoking route is not focused, use `useGlobalSearchParams()`.\n */\nexport function useLocalSearchParams<\n  TParams extends SearchParams = SearchParams,\n>(): Partial<TParams> {\n  const params = React.useContext(NavigationRouteContext)?.params ?? {};\n  return Object.fromEntries(\n    Object.entries(params).map(([key, value]) => {\n      if (Array.isArray(value)) {\n        return [\n          key,\n          value.map((v) => {\n            try {\n              return decodeURIComponent(v);\n            } catch {\n              return v;\n            }\n          }),\n        ];\n      } else {\n        try {\n          return [key, decodeURIComponent(value as string)];\n        } catch {\n          return [key, value];\n        }\n      }\n    })\n  ) as Partial<TParams>;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}