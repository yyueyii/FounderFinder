{"ast":null,"code":"import*as React from'react';import NavigationBuilderContext from'./NavigationBuilderContext';import useOnPreventRemove,{shouldPreventRemove}from'./useOnPreventRemove';export default function useOnAction(_ref){let{router,getState,setState,key,actionListeners,beforeRemoveListeners,routerConfigOptions,emitter}=_ref;const{onAction:onActionParent,onRouteFocus:onRouteFocusParent,addListener:addListenerParent,onDispatchAction}=React.useContext(NavigationBuilderContext);const routerConfigOptionsRef=React.useRef(routerConfigOptions);React.useEffect(()=>{routerConfigOptionsRef.current=routerConfigOptions;});const onAction=React.useCallback(function(action){let visitedNavigators=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Set();const state=getState();if(visitedNavigators.has(state.key)){return false;}visitedNavigators.add(state.key);if(typeof action.target!=='string'||action.target===state.key){let result=router.getStateForAction(state,action,routerConfigOptionsRef.current);result=result===null&&action.target===state.key?state:result;if(result!==null){onDispatchAction(action,state===result);if(state!==result){const isPrevented=shouldPreventRemove(emitter,beforeRemoveListeners,state.routes,result.routes,action);if(isPrevented){return true;}setState(result);}if(onRouteFocusParent!==undefined){const shouldFocus=router.shouldActionChangeFocus(action);if(shouldFocus&&key!==undefined){onRouteFocusParent(key);}}return true;}}if(onActionParent!==undefined){if(onActionParent(action,visitedNavigators)){return true;}}for(let i=actionListeners.length-1;i>=0;i--){const listener=actionListeners[i];if(listener(action,visitedNavigators)){return true;}}return false;},[actionListeners,beforeRemoveListeners,emitter,getState,key,onActionParent,onDispatchAction,onRouteFocusParent,router,setState]);useOnPreventRemove({getState,emitter,beforeRemoveListeners});React.useEffect(()=>addListenerParent===null||addListenerParent===void 0?void 0:addListenerParent('action',onAction),[addListenerParent,onAction]);return onAction;}","map":{"version":3,"names":["React","NavigationBuilderContext","useOnPreventRemove","shouldPreventRemove","useOnAction","_ref","router","getState","setState","key","actionListeners","beforeRemoveListeners","routerConfigOptions","emitter","onAction","onActionParent","onRouteFocus","onRouteFocusParent","addListener","addListenerParent","onDispatchAction","useContext","routerConfigOptionsRef","useRef","useEffect","current","useCallback","action","visitedNavigators","arguments","length","undefined","Set","state","has","add","target","result","getStateForAction","isPrevented","routes","shouldFocus","shouldActionChangeFocus","i","listener"],"sources":["/Users/apple/FounderFinder/node_modules/@react-navigation/core/src/useOnAction.tsx"],"sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  PartialState,\n  Router,\n  RouterConfigOptions,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  ChildActionListener,\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useOnPreventRemove, { shouldPreventRemove } from './useOnPreventRemove';\n\ntype Options = {\n  router: Router<NavigationState, NavigationAction>;\n  key?: string;\n  getState: () => NavigationState;\n  setState: (state: NavigationState | PartialState<NavigationState>) => void;\n  actionListeners: ChildActionListener[];\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n  routerConfigOptions: RouterConfigOptions;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n};\n\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\nexport default function useOnAction({\n  router,\n  getState,\n  setState,\n  key,\n  actionListeners,\n  beforeRemoveListeners,\n  routerConfigOptions,\n  emitter,\n}: Options) {\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addListener: addListenerParent,\n    onDispatchAction,\n  } = React.useContext(NavigationBuilderContext);\n\n  const routerConfigOptionsRef =\n    React.useRef<RouterConfigOptions>(routerConfigOptions);\n\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n\n  const onAction = React.useCallback(\n    (\n      action: NavigationAction,\n      visitedNavigators: Set<string> = new Set<string>()\n    ) => {\n      const state = getState();\n\n      // Since actions can bubble both up and down, they could come to the same navigator again\n      // We keep track of navigators which have already tried to handle the action and return if it's already visited\n      if (visitedNavigators.has(state.key)) {\n        return false;\n      }\n\n      visitedNavigators.add(state.key);\n\n      if (typeof action.target !== 'string' || action.target === state.key) {\n        let result = router.getStateForAction(\n          state,\n          action,\n          routerConfigOptionsRef.current\n        );\n\n        // If a target is specified and set to current navigator, the action shouldn't bubble\n        // So instead of `null`, we use the state object for such cases to signal that action was handled\n        result =\n          result === null && action.target === state.key ? state : result;\n\n        if (result !== null) {\n          onDispatchAction(action, state === result);\n\n          if (state !== result) {\n            const isPrevented = shouldPreventRemove(\n              emitter,\n              beforeRemoveListeners,\n              state.routes,\n              result.routes,\n              action\n            );\n\n            if (isPrevented) {\n              return true;\n            }\n\n            setState(result);\n          }\n\n          if (onRouteFocusParent !== undefined) {\n            // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n            // This means we need to focus all of the parent navigators of this navigator as well\n            const shouldFocus = router.shouldActionChangeFocus(action);\n\n            if (shouldFocus && key !== undefined) {\n              onRouteFocusParent(key);\n            }\n          }\n\n          return true;\n        }\n      }\n\n      if (onActionParent !== undefined) {\n        // Bubble action to the parent if the current navigator didn't handle it\n        if (onActionParent(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n      for (let i = actionListeners.length - 1; i >= 0; i--) {\n        const listener = actionListeners[i];\n\n        if (listener(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    [\n      actionListeners,\n      beforeRemoveListeners,\n      emitter,\n      getState,\n      key,\n      onActionParent,\n      onDispatchAction,\n      onRouteFocusParent,\n      router,\n      setState,\n    ]\n  );\n\n  useOnPreventRemove({\n    getState,\n    emitter,\n    beforeRemoveListeners,\n  });\n\n  React.useEffect(\n    () => addListenerParent?.('action', onAction),\n    [addListenerParent, onAction]\n  );\n\n  return onAction;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}