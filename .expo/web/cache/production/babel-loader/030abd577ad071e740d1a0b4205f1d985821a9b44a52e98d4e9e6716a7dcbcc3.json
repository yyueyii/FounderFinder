{"ast":null,"code":"import bytesToUuid from'./bytesToUuid';function uuidToBytes(uuid){const bytes=[];uuid.replace(/[a-fA-F0-9]{2}/g,hex=>{bytes.push(parseInt(hex,16));return'';});return bytes;}function stringToBytes(str){str=unescape(encodeURIComponent(str));const bytes=new Array(str.length);for(let i=0;i<str.length;i++){bytes[i]=str.charCodeAt(i);}return bytes;}export default function(name,version,hashfunc){const generateUUID=function(value,namespace,buf,offset){const off=buf&&offset||0;if(typeof value=='string')value=stringToBytes(value);if(typeof namespace=='string')namespace=uuidToBytes(namespace);if(!Array.isArray(value))throw TypeError('value must be an array of bytes');if(!Array.isArray(namespace)||namespace.length!==16)throw TypeError('namespace must be uuid string or an Array of 16 byte values');const bytes=hashfunc(namespace.concat(value));bytes[6]=bytes[6]&0x0f|version;bytes[8]=bytes[8]&0x3f|0x80;if(buf){for(let idx=0;idx<16;++idx){buf[off+idx]=bytes[idx];}}return bytesToUuid(bytes);};try{generateUUID.name=name;}catch{}generateUUID.DNS='6ba7b810-9dad-11d1-80b4-00c04fd430c8';generateUUID.URL='6ba7b811-9dad-11d1-80b4-00c04fd430c8';return generateUUID;}","map":{"version":3,"names":["bytesToUuid","uuidToBytes","uuid","bytes","replace","hex","push","parseInt","stringToBytes","str","unescape","encodeURIComponent","Array","length","i","charCodeAt","name","version","hashfunc","generateUUID","value","namespace","buf","offset","off","isArray","TypeError","concat","idx","DNS","URL"],"sources":["/Users/apple/FounderFinder/node_modules/expo-modules-core/src/uuid/lib/v35.ts"],"sourcesContent":["import bytesToUuid from './bytesToUuid';\n\nfunction uuidToBytes(uuid: string) {\n  // Note: We assume we're being passed a valid uuid string\n  const bytes: number[] = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, (hex: string) => {\n    bytes.push(parseInt(hex, 16));\n    return '';\n  });\n\n  return bytes;\n}\n\nfunction stringToBytes(str: string) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n  const bytes: number[] = new Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    bytes[i] = str.charCodeAt(i);\n  }\n  return bytes;\n}\n\nexport default function (\n  name: string,\n  version: number,\n  hashfunc: (bytes: number[] | string) => number[]\n) {\n  const generateUUID = function (\n    value: number[] | string,\n    namespace: number[] | string,\n    buf?: number[],\n    offset?: number\n  ): string {\n    const off = (buf && offset) || 0;\n\n    if (typeof value == 'string') value = stringToBytes(value);\n    if (typeof namespace == 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) throw TypeError('value must be an array of bytes');\n    if (!Array.isArray(namespace) || namespace.length !== 16)\n      throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n\n    // Per 4.3\n    const bytes = hashfunc(namespace.concat(value));\n    bytes[6] = (bytes[6] & 0x0f) | version;\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n\n    if (buf) {\n      for (let idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return bytesToUuid(bytes);\n  };\n\n  // Function#name is not settable on some platforms (#270)\n  try {\n    generateUUID.name = name;\n  } catch {}\n\n  // Pre-defined namespaces, per Appendix C\n  generateUUID.DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\n  generateUUID.URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\n\n  return generateUUID;\n}\n"],"mappings":"AAAA,MAAO,CAAAA,WAAW,KAAM,eAAe,CAEvC,QAAS,CAAAC,WAAWA,CAACC,IAAY,EAE/B,KAAM,CAAAC,KAAK,CAAa,EAAE,CAC1BD,IAAI,CAACE,OAAO,CAAC,iBAAiB,CAAGC,GAAW,EAAI,CAC9CF,KAAK,CAACG,IAAI,CAACC,QAAQ,CAACF,GAAG,CAAE,EAAE,CAAC,CAAC,CAC7B,MAAO,EAAE,CACX,CAAC,CAAC,CAEF,MAAO,CAAAF,KAAK,CACd,CAEA,QAAS,CAAAK,aAAaA,CAACC,GAAW,EAChCA,GAAG,CAAGC,QAAQ,CAACC,kBAAkB,CAACF,GAAG,CAAC,CAAC,CACvC,KAAM,CAAAN,KAAK,CAAa,GAAI,CAAAS,KAAK,CAACH,GAAG,CAACI,MAAM,CAAC,CAC7C,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGL,GAAG,CAACI,MAAM,CAAEC,CAAC,EAAE,CAAE,CACnCX,KAAK,CAACW,CAAC,CAAC,CAAGL,GAAG,CAACM,UAAU,CAACD,CAAC,CAAC,C,CAE9B,MAAO,CAAAX,KAAK,CACd,CAEA,cAAc,UACZa,IAAY,CACZC,OAAe,CACfC,QAAgD,EAEhD,KAAM,CAAAC,YAAY,CAAG,QAAAA,CACnBC,KAAwB,CACxBC,SAA4B,CAC5BC,GAAc,CACdC,MAAe,EAEf,KAAM,CAAAC,GAAG,CAAIF,GAAG,EAAIC,MAAM,EAAK,CAAC,CAEhC,GAAI,MAAO,CAAAH,KAAK,EAAI,QAAQ,CAAEA,KAAK,CAAGZ,aAAa,CAACY,KAAK,CAAC,CAC1D,GAAI,MAAO,CAAAC,SAAS,EAAI,QAAQ,CAAEA,SAAS,CAAGpB,WAAW,CAACoB,SAAS,CAAC,CAEpE,GAAI,CAACT,KAAK,CAACa,OAAO,CAACL,KAAK,CAAC,CAAE,KAAM,CAAAM,SAAS,CAAC,iCAAiC,CAAC,CAC7E,GAAI,CAACd,KAAK,CAACa,OAAO,CAACJ,SAAS,CAAC,EAAIA,SAAS,CAACR,MAAM,GAAK,EAAE,CACtD,KAAM,CAAAa,SAAS,CAAC,6DAA6D,CAAC,CAGhF,KAAM,CAAAvB,KAAK,CAAGe,QAAQ,CAACG,SAAS,CAACM,MAAM,CAACP,KAAK,CAAC,CAAC,CAC/CjB,KAAK,CAAC,CAAC,CAAC,CAAIA,KAAK,CAAC,CAAC,CAAC,CAAG,IAAI,CAAIc,OAAO,CACtCd,KAAK,CAAC,CAAC,CAAC,CAAIA,KAAK,CAAC,CAAC,CAAC,CAAG,IAAI,CAAI,IAAI,CAEnC,GAAImB,GAAG,CAAE,CACP,IAAK,GAAI,CAAAM,GAAG,CAAG,CAAC,CAAEA,GAAG,CAAG,EAAE,CAAE,EAAEA,GAAG,CAAE,CACjCN,GAAG,CAACE,GAAG,CAAGI,GAAG,CAAC,CAAGzB,KAAK,CAACyB,GAAG,CAAC,C,EAI/B,MAAO,CAAA5B,WAAW,CAACG,KAAK,CAAC,CAC3B,CAAC,CAGD,GAAI,CACFgB,YAAY,CAACH,IAAI,CAAGA,IAAI,C,CACxB,KAAM,EAGRG,YAAY,CAACU,GAAG,CAAG,sCAAsC,CACzDV,YAAY,CAACW,GAAG,CAAG,sCAAsC,CAEzD,MAAO,CAAAX,YAAY,CACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}