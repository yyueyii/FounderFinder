{"ast":null,"code":"import*as React from'react';import{useState}from'react';import useNavigation from'./useNavigation';export default function useIsFocused(){const navigation=useNavigation();const[isFocused,setIsFocused]=useState(navigation.isFocused);const valueToReturn=navigation.isFocused();if(isFocused!==valueToReturn){setIsFocused(valueToReturn);}React.useEffect(()=>{const unsubscribeFocus=navigation.addListener('focus',()=>setIsFocused(true));const unsubscribeBlur=navigation.addListener('blur',()=>setIsFocused(false));return()=>{unsubscribeFocus();unsubscribeBlur();};},[navigation]);React.useDebugValue(valueToReturn);return valueToReturn;}","map":{"version":3,"names":["React","useState","useNavigation","useIsFocused","navigation","isFocused","setIsFocused","valueToReturn","useEffect","unsubscribeFocus","addListener","unsubscribeBlur","useDebugValue"],"sources":["/Users/apple/FounderFinder/node_modules/@react-navigation/core/src/useIsFocused.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\n\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\n\n  const valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    // If the value has changed since the last render, we need to update it.\n    // This could happen if we missed an update from the event listeners during re-render.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(() => {\n    const unsubscribeFocus = navigation.addListener('focus', () =>\n      setIsFocused(true)\n    );\n\n    const unsubscribeBlur = navigation.addListener('blur', () =>\n      setIsFocused(false)\n    );\n\n    return () => {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n\n  React.useDebugValue(valueToReturn);\n\n  return valueToReturn;\n}\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAC9B,OAASC,QAAQ,KAAQ,OAAO,CAEhC,MAAO,CAAAC,aAAa,KAAM,iBAAiB,CAM3C,cAAe,SAAS,CAAAC,YAAYA,CAAA,CAAY,CAC9C,KAAM,CAAAC,UAAU,CAAGF,aAAa,EAAE,CAClC,KAAM,CAACG,SAAS,CAAEC,YAAY,CAAC,CAAGL,QAAQ,CAACG,UAAU,CAACC,SAAS,CAAC,CAEhE,KAAM,CAAAE,aAAa,CAAGH,UAAU,CAACC,SAAS,EAAE,CAE5C,GAAIA,SAAS,GAAKE,aAAa,CAAE,CAM/BD,YAAY,CAACC,aAAa,CAAC,CAC7B,CAEAP,KAAK,CAACQ,SAAS,CAAC,IAAM,CACpB,KAAM,CAAAC,gBAAgB,CAAGL,UAAU,CAACM,WAAW,CAAC,OAAO,CAAE,IACvDJ,YAAY,CAAC,IAAI,CAAC,CACnB,CAED,KAAM,CAAAK,eAAe,CAAGP,UAAU,CAACM,WAAW,CAAC,MAAM,CAAE,IACrDJ,YAAY,CAAC,KAAK,CAAC,CACpB,CAED,MAAO,IAAM,CACXG,gBAAgB,EAAE,CAClBE,eAAe,EAAE,CACnB,CAAC,CACH,CAAC,CAAE,CAACP,UAAU,CAAC,CAAC,CAEhBJ,KAAK,CAACY,aAAa,CAACL,aAAa,CAAC,CAElC,MAAO,CAAAA,aAAa,CACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}