{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";const _excluded=[\"key\",\"routeNames\"];function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import{CommonActions}from'@react-navigation/routers';import*as React from'react';import checkDuplicateRouteNames from'./checkDuplicateRouteNames';import checkSerializable from'./checkSerializable';import{NOT_INITIALIZED_ERROR}from'./createNavigationContainerRef';import EnsureSingleNavigator from'./EnsureSingleNavigator';import findFocusedRoute from'./findFocusedRoute';import NavigationBuilderContext from'./NavigationBuilderContext';import NavigationContainerRefContext from'./NavigationContainerRefContext';import NavigationContext from'./NavigationContext';import NavigationRouteContext from'./NavigationRouteContext';import NavigationStateContext from'./NavigationStateContext';import UnhandledActionContext from'./UnhandledActionContext';import useChildListeners from'./useChildListeners';import useEventEmitter from'./useEventEmitter';import useKeyedChildListeners from'./useKeyedChildListeners';import useOptionsGetters from'./useOptionsGetters';import{ScheduleUpdateContext}from'./useScheduleUpdate';import useSyncState from'./useSyncState';const serializableWarnings=[];const duplicateNameWarnings=[];const getPartialState=state=>{if(state===undefined){return;}const{key,routeNames}=state,partialState=_objectWithoutProperties(state,_excluded);return _objectSpread(_objectSpread({},partialState),{},{stale:true,routes:state.routes.map(route=>{if(route.state===undefined){return route;}return _objectSpread(_objectSpread({},route),{},{state:getPartialState(route.state)});})});};const BaseNavigationContainer=React.forwardRef(function BaseNavigationContainer(_ref,ref){let{initialState,onStateChange,onUnhandledAction,independent,children}=_ref;const parent=React.useContext(NavigationStateContext);if(!parent.isDefault&&!independent){throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");}const[state,getState,setState,scheduleUpdate,flushUpdates]=useSyncState(()=>getPartialState(initialState==null?undefined:initialState));const isFirstMountRef=React.useRef(true);const navigatorKeyRef=React.useRef();const getKey=React.useCallback(()=>navigatorKeyRef.current,[]);const setKey=React.useCallback(key=>{navigatorKeyRef.current=key;},[]);const{listeners,addListener}=useChildListeners();const{keyedListeners,addKeyedListener}=useKeyedChildListeners();const dispatch=React.useCallback(action=>{if(listeners.focus[0]==null){console.error(NOT_INITIALIZED_ERROR);}else{listeners.focus[0](navigation=>navigation.dispatch(action));}},[listeners.focus]);const canGoBack=React.useCallback(()=>{if(listeners.focus[0]==null){return false;}const{result,handled}=listeners.focus[0](navigation=>navigation.canGoBack());if(handled){return result;}else{return false;}},[listeners.focus]);const resetRoot=React.useCallback(state=>{var _keyedListeners$getSt,_keyedListeners$getSt2;const target=(state===null||state===void 0?void 0:state.key)??((_keyedListeners$getSt=(_keyedListeners$getSt2=keyedListeners.getState).root)===null||_keyedListeners$getSt===void 0?void 0:_keyedListeners$getSt.call(_keyedListeners$getSt2).key);if(target==null){console.error(NOT_INITIALIZED_ERROR);}else{listeners.focus[0](navigation=>navigation.dispatch(_objectSpread(_objectSpread({},CommonActions.reset(state)),{},{target})));}},[keyedListeners.getState,listeners.focus]);const getRootState=React.useCallback(()=>{var _keyedListeners$getSt3,_keyedListeners$getSt4;return(_keyedListeners$getSt3=(_keyedListeners$getSt4=keyedListeners.getState).root)===null||_keyedListeners$getSt3===void 0?void 0:_keyedListeners$getSt3.call(_keyedListeners$getSt4);},[keyedListeners.getState]);const getCurrentRoute=React.useCallback(()=>{const state=getRootState();if(state==null){return undefined;}const route=findFocusedRoute(state);return route;},[getRootState]);const emitter=useEventEmitter();const{addOptionsGetter,getCurrentOptions}=useOptionsGetters({});const navigation=React.useMemo(()=>_objectSpread(_objectSpread(_objectSpread({},Object.keys(CommonActions).reduce((acc,name)=>{acc[name]=function(){return dispatch(CommonActions[name](...arguments));};return acc;},{})),emitter.create('root')),{},{dispatch,resetRoot,isFocused:()=>true,canGoBack,getParent:()=>undefined,getState:()=>stateRef.current,getRootState,getCurrentRoute,getCurrentOptions,isReady:()=>listeners.focus[0]!=null,setOptions:()=>{throw new Error('Cannot call setOptions outside a screen');}}),[canGoBack,dispatch,emitter,getCurrentOptions,getCurrentRoute,getRootState,listeners.focus,resetRoot]);React.useImperativeHandle(ref,()=>navigation,[navigation]);const onDispatchAction=React.useCallback((action,noop)=>{emitter.emit({type:'__unsafe_action__',data:{action,noop,stack:stackRef.current}});},[emitter]);const lastEmittedOptionsRef=React.useRef();const onOptionsChange=React.useCallback(options=>{if(lastEmittedOptionsRef.current===options){return;}lastEmittedOptionsRef.current=options;emitter.emit({type:'options',data:{options}});},[emitter]);const stackRef=React.useRef();const builderContext=React.useMemo(()=>({addListener,addKeyedListener,onDispatchAction,onOptionsChange,stackRef}),[addListener,addKeyedListener,onDispatchAction,onOptionsChange]);const scheduleContext=React.useMemo(()=>({scheduleUpdate,flushUpdates}),[scheduleUpdate,flushUpdates]);const isInitialRef=React.useRef(true);const getIsInitial=React.useCallback(()=>isInitialRef.current,[]);const context=React.useMemo(()=>({state,getState,setState,getKey,setKey,getIsInitial,addOptionsGetter}),[state,getState,setState,getKey,setKey,getIsInitial,addOptionsGetter]);const onStateChangeRef=React.useRef(onStateChange);const stateRef=React.useRef(state);React.useEffect(()=>{isInitialRef.current=false;onStateChangeRef.current=onStateChange;stateRef.current=state;});React.useEffect(()=>{const hydratedState=getRootState();if(false){if(hydratedState!==undefined){const serializableResult=checkSerializable(hydratedState);if(!serializableResult.serializable){const{location,reason}=serializableResult;let path='';let pointer=hydratedState;let params=false;for(let i=0;i<location.length;i++){const curr=location[i];const prev=location[i-1];pointer=pointer[curr];if(!params&&curr==='state'){continue;}else if(!params&&curr==='routes'){if(path){path+=' > ';}}else if(!params&&typeof curr==='number'&&prev==='routes'){var _pointer;path+=(_pointer=pointer)===null||_pointer===void 0?void 0:_pointer.name;}else if(!params){path+=` > ${curr}`;params=true;}else{if(typeof curr==='number'||/^[0-9]+$/.test(curr)){path+=`[${curr}]`;}else if(/^[a-z$_]+$/i.test(curr)){path+=`.${curr}`;}else{path+=`[${JSON.stringify(curr)}]`;}}}const message=`Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;if(!serializableWarnings.includes(message)){serializableWarnings.push(message);console.warn(message);}}const duplicateRouteNamesResult=checkDuplicateRouteNames(hydratedState);if(duplicateRouteNamesResult.length){const message=`Found screens with the same name nested inside one another. Check:\\n${duplicateRouteNamesResult.map(locations=>`\\n${locations.join(', ')}`)}\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;if(!duplicateNameWarnings.includes(message)){duplicateNameWarnings.push(message);console.warn(message);}}}}emitter.emit({type:'state',data:{state}});if(!isFirstMountRef.current&&onStateChangeRef.current){onStateChangeRef.current(hydratedState);}isFirstMountRef.current=false;},[getRootState,emitter,state]);const defaultOnUnhandledAction=React.useCallback(action=>{if(true){return;}const payload=action.payload;let message=`The action '${action.type}'${payload?` with payload ${JSON.stringify(action.payload)}`:''} was not handled by any navigator.`;switch(action.type){case'NAVIGATE':case'PUSH':case'REPLACE':case'JUMP_TO':if(payload!==null&&payload!==void 0&&payload.name){message+=`\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;}else{message+=`\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;}break;case'GO_BACK':case'POP':case'POP_TO_TOP':message+=`\\n\\nIs there any screen to go back to?`;break;case'OPEN_DRAWER':case'CLOSE_DRAWER':case'TOGGLE_DRAWER':message+=`\\n\\nIs your screen inside a Drawer navigator?`;break;}message+=`\\n\\nThis is a development-only warning and won't be shown in production.`;console.error(message);},[]);let element=React.createElement(NavigationContainerRefContext.Provider,{value:navigation},React.createElement(ScheduleUpdateContext.Provider,{value:scheduleContext},React.createElement(NavigationBuilderContext.Provider,{value:builderContext},React.createElement(NavigationStateContext.Provider,{value:context},React.createElement(UnhandledActionContext.Provider,{value:onUnhandledAction??defaultOnUnhandledAction},React.createElement(EnsureSingleNavigator,null,children))))));if(independent){element=React.createElement(NavigationRouteContext.Provider,{value:undefined},React.createElement(NavigationContext.Provider,{value:undefined},element));}return element;});export default BaseNavigationContainer;","map":{"version":3,"names":["CommonActions","React","checkDuplicateRouteNames","checkSerializable","NOT_INITIALIZED_ERROR","EnsureSingleNavigator","findFocusedRoute","NavigationBuilderContext","NavigationContainerRefContext","NavigationContext","NavigationRouteContext","NavigationStateContext","UnhandledActionContext","useChildListeners","useEventEmitter","useKeyedChildListeners","useOptionsGetters","ScheduleUpdateContext","useSyncState","serializableWarnings","duplicateNameWarnings","getPartialState","state","undefined","key","routeNames","partialState","_objectWithoutProperties","_excluded","_objectSpread","stale","routes","map","route","BaseNavigationContainer","forwardRef","_ref","ref","initialState","onStateChange","onUnhandledAction","independent","children","parent","useContext","isDefault","Error","getState","setState","scheduleUpdate","flushUpdates","isFirstMountRef","useRef","navigatorKeyRef","getKey","useCallback","current","setKey","listeners","addListener","keyedListeners","addKeyedListener","dispatch","action","focus","console","error","navigation","canGoBack","result","handled","resetRoot","_keyedListeners$getSt","_keyedListeners$getSt2","target","root","call","reset","getRootState","_keyedListeners$getSt3","_keyedListeners$getSt4","getCurrentRoute","emitter","addOptionsGetter","getCurrentOptions","useMemo","Object","keys","reduce","acc","name","arguments","create","isFocused","getParent","stateRef","isReady","setOptions","useImperativeHandle","onDispatchAction","noop","emit","type","data","stack","stackRef","lastEmittedOptionsRef","onOptionsChange","options","builderContext","scheduleContext","isInitialRef","getIsInitial","context","onStateChangeRef","useEffect","hydratedState","serializableResult","serializable","location","reason","path","pointer","params","i","length","curr","prev","_pointer","test","JSON","stringify","message","includes","push","warn","duplicateRouteNamesResult","locations","join","defaultOnUnhandledAction","payload","element","createElement","Provider","value"],"sources":["/Users/apple/FounderFinder/node_modules/@react-navigation/core/src/BaseNavigationContainer.tsx"],"sourcesContent":["import {\n  CommonActions,\n  InitialState,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport checkDuplicateRouteNames from './checkDuplicateRouteNames';\nimport checkSerializable from './checkSerializable';\nimport { NOT_INITIALIZED_ERROR } from './createNavigationContainerRef';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport findFocusedRoute from './findFocusedRoute';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from './types';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport useChildListeners from './useChildListeners';\nimport useEventEmitter from './useEventEmitter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useSyncState from './useSyncState';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst serializableWarnings: string[] = [];\nconst duplicateNameWarnings: string[] = [];\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map((route) => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      onUnhandledAction,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref?: React.Ref<NavigationContainerRef<ParamListBase>>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [state, getState, setState, scheduleUpdate, flushUpdates] =\n      useSyncState<State>(() =>\n        getPartialState(initialState == null ? undefined : initialState)\n      );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const { listeners, addListener } = useChildListeners();\n\n    const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n    const dispatch = React.useCallback(\n      (\n        action:\n          | NavigationAction\n          | ((state: NavigationState) => NavigationAction)\n      ) => {\n        if (listeners.focus[0] == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) => navigation.dispatch(action));\n        }\n      },\n      [listeners.focus]\n    );\n\n    const canGoBack = React.useCallback(() => {\n      if (listeners.focus[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners.focus[0]((navigation) =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    }, [listeners.focus]);\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        const target = state?.key ?? keyedListeners.getState.root?.().key;\n\n        if (target == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) =>\n            navigation.dispatch({\n              ...CommonActions.reset(state),\n              target,\n            })\n          );\n        }\n      },\n      [keyedListeners.getState, listeners.focus]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return keyedListeners.getState.root?.();\n    }, [keyedListeners.getState]);\n\n    const getCurrentRoute = React.useCallback(() => {\n      const state = getRootState();\n\n      if (state == null) {\n        return undefined;\n      }\n\n      const route = findFocusedRoute(state);\n\n      return route as Route<string> | undefined;\n    }, [getRootState]);\n\n    const emitter = useEventEmitter<NavigationContainerEventMap>();\n\n    const { addOptionsGetter, getCurrentOptions } = useOptionsGetters({});\n\n    const navigation: NavigationContainerRef<ParamListBase> = React.useMemo(\n      () => ({\n        ...Object.keys(CommonActions).reduce<any>((acc, name) => {\n          acc[name] = (...args: any[]) =>\n            // @ts-expect-error: this is ok\n            dispatch(CommonActions[name](...args));\n          return acc;\n        }, {}),\n        ...emitter.create('root'),\n        dispatch,\n        resetRoot,\n        isFocused: () => true,\n        canGoBack,\n        getParent: () => undefined,\n        getState: () => stateRef.current,\n        getRootState,\n        getCurrentRoute,\n        getCurrentOptions,\n        isReady: () => listeners.focus[0] != null,\n        setOptions: () => {\n          throw new Error('Cannot call setOptions outside a screen');\n        },\n      }),\n      [\n        canGoBack,\n        dispatch,\n        emitter,\n        getCurrentOptions,\n        getCurrentRoute,\n        getRootState,\n        listeners.focus,\n        resetRoot,\n      ]\n    );\n\n    React.useImperativeHandle(ref, () => navigation, [navigation]);\n\n    const onDispatchAction = React.useCallback(\n      (action: NavigationAction, noop: boolean) => {\n        emitter.emit({\n          type: '__unsafe_action__',\n          data: { action, noop, stack: stackRef.current },\n        });\n      },\n      [emitter]\n    );\n\n    const lastEmittedOptionsRef = React.useRef<object | undefined>();\n\n    const onOptionsChange = React.useCallback(\n      (options: object) => {\n        if (lastEmittedOptionsRef.current === options) {\n          return;\n        }\n\n        lastEmittedOptionsRef.current = options;\n\n        emitter.emit({\n          type: 'options',\n          data: { options },\n        });\n      },\n      [emitter]\n    );\n\n    const stackRef = React.useRef<string | undefined>();\n\n    const builderContext = React.useMemo(\n      () => ({\n        addListener,\n        addKeyedListener,\n        onDispatchAction,\n        onOptionsChange,\n        stackRef,\n      }),\n      [addListener, addKeyedListener, onDispatchAction, onOptionsChange]\n    );\n\n    const scheduleContext = React.useMemo(\n      () => ({ scheduleUpdate, flushUpdates }),\n      [scheduleUpdate, flushUpdates]\n    );\n\n    const isInitialRef = React.useRef(true);\n\n    const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      }),\n      [\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      ]\n    );\n\n    const onStateChangeRef = React.useRef(onStateChange);\n    const stateRef = React.useRef(state);\n\n    React.useEffect(() => {\n      isInitialRef.current = false;\n      onStateChangeRef.current = onStateChange;\n      stateRef.current = state;\n    });\n\n    React.useEffect(() => {\n      const hydratedState = getRootState();\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (hydratedState !== undefined) {\n          const serializableResult = checkSerializable(hydratedState);\n\n          if (!serializableResult.serializable) {\n            const { location, reason } = serializableResult;\n\n            let path = '';\n            let pointer: Record<any, any> = hydratedState;\n            let params = false;\n\n            for (let i = 0; i < location.length; i++) {\n              const curr = location[i];\n              const prev = location[i - 1];\n\n              pointer = pointer[curr];\n\n              if (!params && curr === 'state') {\n                continue;\n              } else if (!params && curr === 'routes') {\n                if (path) {\n                  path += ' > ';\n                }\n              } else if (\n                !params &&\n                typeof curr === 'number' &&\n                prev === 'routes'\n              ) {\n                path += pointer?.name;\n              } else if (!params) {\n                path += ` > ${curr}`;\n                params = true;\n              } else {\n                if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                  path += `[${curr}]`;\n                } else if (/^[a-z$_]+$/i.test(curr)) {\n                  path += `.${curr}`;\n                } else {\n                  path += `[${JSON.stringify(curr)}]`;\n                }\n              }\n            }\n\n            const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n\n            if (!serializableWarnings.includes(message)) {\n              serializableWarnings.push(message);\n              console.warn(message);\n            }\n          }\n\n          const duplicateRouteNamesResult =\n            checkDuplicateRouteNames(hydratedState);\n\n          if (duplicateRouteNamesResult.length) {\n            const message = `Found screens with the same name nested inside one another. Check:\\n${duplicateRouteNamesResult.map(\n              (locations) => `\\n${locations.join(', ')}`\n            )}\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;\n\n            if (!duplicateNameWarnings.includes(message)) {\n              duplicateNameWarnings.push(message);\n              console.warn(message);\n            }\n          }\n        }\n      }\n\n      emitter.emit({ type: 'state', data: { state } });\n\n      if (!isFirstMountRef.current && onStateChangeRef.current) {\n        onStateChangeRef.current(hydratedState);\n      }\n\n      isFirstMountRef.current = false;\n    }, [getRootState, emitter, state]);\n\n    const defaultOnUnhandledAction = React.useCallback(\n      (action: NavigationAction) => {\n        if (process.env.NODE_ENV === 'production') {\n          return;\n        }\n\n        const payload: Record<string, any> | undefined = action.payload;\n\n        let message = `The action '${action.type}'${\n          payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n        } was not handled by any navigator.`;\n\n        switch (action.type) {\n          case 'NAVIGATE':\n          case 'PUSH':\n          case 'REPLACE':\n          case 'JUMP_TO':\n            if (payload?.name) {\n              message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n            } else {\n              message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n            }\n\n            break;\n          case 'GO_BACK':\n          case 'POP':\n          case 'POP_TO_TOP':\n            message += `\\n\\nIs there any screen to go back to?`;\n            break;\n          case 'OPEN_DRAWER':\n          case 'CLOSE_DRAWER':\n          case 'TOGGLE_DRAWER':\n            message += `\\n\\nIs your screen inside a Drawer navigator?`;\n            break;\n        }\n\n        message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n        console.error(message);\n      },\n      []\n    );\n\n    let element = (\n      <NavigationContainerRefContext.Provider value={navigation}>\n        <ScheduleUpdateContext.Provider value={scheduleContext}>\n          <NavigationBuilderContext.Provider value={builderContext}>\n            <NavigationStateContext.Provider value={context}>\n              <UnhandledActionContext.Provider\n                value={onUnhandledAction ?? defaultOnUnhandledAction}\n              >\n                <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n              </UnhandledActionContext.Provider>\n            </NavigationStateContext.Provider>\n          </NavigationBuilderContext.Provider>\n        </ScheduleUpdateContext.Provider>\n      </NavigationContainerRefContext.Provider>\n    );\n\n    if (independent) {\n      // We need to clear any existing contexts for nested independent container to work correctly\n      element = (\n        <NavigationRouteContext.Provider value={undefined}>\n          <NavigationContext.Provider value={undefined}>\n            {element}\n          </NavigationContext.Provider>\n        </NavigationRouteContext.Provider>\n      );\n    }\n\n    return element;\n  }\n);\n\nexport default BaseNavigationContainer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}