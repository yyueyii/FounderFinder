{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"@babel/runtime/helpers/defineProperty\");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.getNormalizedStatePath=exports.getRouteInfoFromState=void 0;const getStateFromPath_1=require(\"./fork/getStateFromPath\");function getRouteInfoFromState(getPathFromState,state,baseUrl){const{path}=getPathFromState(state,false);const qualified=getPathFromState(state,true);return _objectSpread({unstable_globalHref:path,pathname:(0,getStateFromPath_1.stripBaseUrl)(path,baseUrl).split('?')['0'],isIndex:isIndexPath(state)},getNormalizedStatePath(qualified,baseUrl));}exports.getRouteInfoFromState=getRouteInfoFromState;function isIndexPath(state){const route=state.routes[state.index??state.routes.length-1];if(route.state){return isIndexPath(route.state);}if(route.params&&'screen'in route.params){return route.params.screen==='index';}if(route.name.match(/.+\\/index$/))return true;return false;}function getNormalizedStatePath({path:statePath,params},baseUrl){const[pathname]=statePath.split('?');return{segments:(0,getStateFromPath_1.stripBaseUrl)(pathname,baseUrl).split('/').filter(Boolean).map(decodeURIComponent),params:Object.entries(params).reduce((prev,[key,value])=>{if(Array.isArray(value)){prev[key]=value.map(v=>{try{return decodeURIComponent(v);}catch{return v;}});}else{try{prev[key]=decodeURIComponent(value);}catch{prev[key]=value;}}return prev;},{})};}exports.getNormalizedStatePath=getNormalizedStatePath;","map":{"version":3,"names":["getStateFromPath_1","require","getRouteInfoFromState","getPathFromState","state","baseUrl","path","qualified","_objectSpread","unstable_globalHref","pathname","stripBaseUrl","split","isIndex","isIndexPath","getNormalizedStatePath","exports","route","routes","index","length","params","screen","name","match","statePath","segments","filter","Boolean","map","decodeURIComponent","Object","entries","reduce","prev","key","value","Array","isArray","v"],"sources":["/Users/apple/FounderFinder/node_modules/expo-router/src/LocationProvider.tsx"],"sourcesContent":["import type { State } from './fork/getPathFromState';\nimport { stripBaseUrl } from './fork/getStateFromPath';\n\ntype SearchParams = Record<string, string | string[]>;\n\nexport type UrlObject = {\n  unstable_globalHref: string;\n  pathname: string;\n  readonly params: SearchParams;\n  segments: string[];\n  isIndex: boolean;\n};\n\nexport function getRouteInfoFromState(\n  getPathFromState: (state: State, asPath: boolean) => { path: string; params: any },\n  state: State,\n  baseUrl?: string\n): UrlObject {\n  const { path } = getPathFromState(state, false);\n  const qualified = getPathFromState(state, true);\n\n  return {\n    // TODO: This may have a predefined origin attached in the future.\n    unstable_globalHref: path,\n    pathname: stripBaseUrl(path, baseUrl).split('?')['0'],\n    isIndex: isIndexPath(state),\n    ...getNormalizedStatePath(qualified, baseUrl),\n  };\n}\n\nfunction isIndexPath(state: State) {\n  const route = state.routes[state.index ?? state.routes.length - 1];\n  if (route.state) {\n    return isIndexPath(route.state);\n  }\n\n  // Index routes on the same level as a layout do not have `index` in their name\n  if (route.params && 'screen' in route.params) {\n    return route.params.screen === 'index';\n  }\n\n  // The `params` key will not exist if there are no params\n  // So we need to do a positive lookahead to check if the route ends with /index\n  // Nested routes that are hoisted will have a name ending with /index\n  // e.g name could be /user/[id]/index\n  if (route.name.match(/.+\\/index$/)) return true;\n\n  // The state will either have params (because there are multiple _layout) or it will be hoisted with a name\n  // If we don't match the above cases, then it's not an index route\n\n  return false;\n}\n\n// TODO: Split up getPathFromState to return all this info at once.\nexport function getNormalizedStatePath(\n  {\n    path: statePath,\n    params,\n  }: {\n    path: string;\n    params: any;\n  },\n  baseUrl?: string\n): Pick<UrlObject, 'segments' | 'params'> {\n  const [pathname] = statePath.split('?');\n  return {\n    // Strip empty path at the start\n    segments: stripBaseUrl(pathname, baseUrl).split('/').filter(Boolean).map(decodeURIComponent),\n    // TODO: This is not efficient, we should generate based on the state instead\n    // of converting to string then back to object\n    params: Object.entries(params).reduce((prev, [key, value]) => {\n      if (Array.isArray(value)) {\n        prev[key] = value.map((v: string) => {\n          try {\n            return decodeURIComponent(v);\n          } catch {\n            return v;\n          }\n        });\n      } else {\n        try {\n          prev[key] = decodeURIComponent(value as string);\n        } catch {\n          prev[key] = value as string;\n        }\n      }\n      return prev;\n    }, {} as SearchParams),\n  };\n}\n"],"mappings":"2zBACA,MAAAA,kBAAA,CAAAC,OAAA,4BAYA,QAAgB,CAAAC,qBAAqBA,CACnCC,gBAAkF,CAClFC,KAAY,CACZC,OAAgB,EAEhB,KAAM,CAAEC,IAAI,CAAE,CAAGH,gBAAgB,CAACC,KAAK,CAAE,KAAK,CAAC,CAC/C,KAAM,CAAAG,SAAS,CAAGJ,gBAAgB,CAACC,KAAK,CAAE,IAAI,CAAC,CAE/C,OAAAI,aAAA,EAEEC,mBAAmB,CAAEH,IAAI,CACzBI,QAAQ,CAAE,GAAAV,kBAAA,CAAAW,YAAY,EAACL,IAAI,CAAED,OAAO,CAAC,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACrDC,OAAO,CAAEC,WAAW,CAACV,KAAK,CAAC,EACxBW,sBAAsB,CAACR,SAAS,CAAEF,OAAO,CAAC,EAEjD,CAfAW,OAAA,CAAAd,qBAAA,CAAAA,qBAAA,CAiBA,QAAS,CAAAY,WAAWA,CAACV,KAAY,EAC/B,KAAM,CAAAa,KAAK,CAAGb,KAAK,CAACc,MAAM,CAACd,KAAK,CAACe,KAAK,EAAIf,KAAK,CAACc,MAAM,CAACE,MAAM,CAAG,CAAC,CAAC,CAClE,GAAIH,KAAK,CAACb,KAAK,CAAE,CACf,MAAO,CAAAU,WAAW,CAACG,KAAK,CAACb,KAAK,CAAC,C,CAIjC,GAAIa,KAAK,CAACI,MAAM,EAAI,QAAQ,EAAI,CAAAJ,KAAK,CAACI,MAAM,CAAE,CAC5C,MAAO,CAAAJ,KAAK,CAACI,MAAM,CAACC,MAAM,GAAK,OAAO,C,CAOxC,GAAIL,KAAK,CAACM,IAAI,CAACC,KAAK,CAAC,YAAY,CAAC,CAAE,MAAO,KAAI,CAK/C,MAAO,MAAK,CACd,CAGA,QAAgB,CAAAT,sBAAsBA,CACpC,CACET,IAAI,CAAEmB,SAAS,CACfJ,MAAM,CAIP,CACDhB,OAAgB,EAEhB,KAAM,CAACK,QAAQ,CAAC,CAAGe,SAAS,CAACb,KAAK,CAAC,GAAG,CAAC,CACvC,MAAO,CAELc,QAAQ,CAAE,GAAA1B,kBAAA,CAAAW,YAAY,EAACD,QAAQ,CAAEL,OAAO,CAAC,CAACO,KAAK,CAAC,GAAG,CAAC,CAACe,MAAM,CAACC,OAAO,CAAC,CAACC,GAAG,CAACC,kBAAkB,CAAC,CAG5FT,MAAM,CAAEU,MAAM,CAACC,OAAO,CAACX,MAAM,CAAC,CAACY,MAAM,CAAC,CAACC,IAAI,CAAE,CAACC,GAAG,CAAEC,KAAK,CAAC,GAAI,CAC3D,GAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,CAAE,CACxBF,IAAI,CAACC,GAAG,CAAC,CAAGC,KAAK,CAACP,GAAG,CAAEU,CAAS,EAAI,CAClC,GAAI,CACF,MAAO,CAAAT,kBAAkB,CAACS,CAAC,CAAC,C,CAC5B,KAAM,CACN,MAAO,CAAAA,CAAC,C,CAEZ,CAAC,CAAC,C,CACH,IAAM,CACL,GAAI,CACFL,IAAI,CAACC,GAAG,CAAC,CAAGL,kBAAkB,CAACM,KAAe,CAAC,C,CAC/C,KAAM,CACNF,IAAI,CAACC,GAAG,CAAC,CAAGC,KAAe,C,EAG/B,MAAO,CAAAF,IAAI,CACb,CAAC,CAAE,EAAkB,C,CACtB,CACH,CAnCAlB,OAAA,CAAAD,sBAAA,CAAAA,sBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}