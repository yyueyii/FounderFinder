{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"@babel/runtime/helpers/defineProperty\");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.generateDynamic=exports.extrapolateGroups=exports.getIgnoreList=exports.getExactRoutes=exports.getRoutes=void 0;const matchers_1=require(\"./matchers\");const validPlatforms=new Set(['android','ios','native','web']);function getRoutes(contextModule,options={}){const directoryTree=getDirectoryTree(contextModule,options);if(!directoryTree){return null;}const rootNode=flattenDirectoryTreeToRoutes(directoryTree,options);if(!options.ignoreEntryPoints){crawlAndAppendInitialRoutesAndEntryFiles(rootNode,options);}return rootNode;}exports.getRoutes=getRoutes;function getExactRoutes(contextModule,options={}){return getRoutes(contextModule,_objectSpread(_objectSpread({},options),{},{skipGenerated:true}));}exports.getExactRoutes=getExactRoutes;function getDirectoryTree(contextModule,options){const importMode=options.importMode||\"sync\";const ignoreList=[/^\\.\\/\\+(html|native-intent)\\.[tj]sx?$/];if(options.ignore){ignoreList.push(...options.ignore);}if(!options.preserveApiRoutes){ignoreList.push(/\\+api\\.[tj]sx?$/);}const rootDirectory={files:new Map(),subdirectories:new Map()};let hasRoutes=false;let isValid=false;for(const filePath of contextModule.keys()){if(ignoreList.some(regex=>regex.test(filePath))){continue;}isValid=true;const meta=getFileMeta(filePath,options);if(meta.specificity<0){continue;}let node={type:meta.isApi?'api':meta.isLayout?'layout':'route',loadRoute(){if(options.ignoreRequireErrors){try{return contextModule(filePath);}catch{return{};}}else{return contextModule(filePath);}},contextKey:filePath,route:'',dynamic:null,children:[]};if(false){if(node.type!=='api'&&importMode==='sync'){if(!node.loadRoute()?.default){continue;}}}for(const route of extrapolateGroups(meta.route)){const subdirectoryParts=route.split('/').slice(0,-1);let directory=rootDirectory;for(const part of subdirectoryParts){let subDirectory=directory.subdirectories.get(part);if(!subDirectory){subDirectory={files:new Map(),subdirectories:new Map()};directory.subdirectories.set(part,subDirectory);}directory=subDirectory;}node=_objectSpread(_objectSpread({},node),{},{route});if(meta.isLayout){directory.layout??=[];const existing=directory.layout[meta.specificity];if(existing){if(false){throw new Error(`The layouts \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Please remove or rename one of these files.`);}}else{node=getLayoutNode(node,options);directory.layout[meta.specificity]=node;}}else if(meta.isApi){const fileKey=`${route}+api`;let nodes=directory.files.get(fileKey);if(!nodes){nodes=[];directory.files.set(fileKey,nodes);}const existing=nodes[0];if(existing){if(false){throw new Error(`The API route file \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Please remove or rename one of these files.`);}}else{nodes[0]=node;}}else{let nodes=directory.files.get(route);if(!nodes){nodes=[];directory.files.set(route,nodes);}const existing=nodes[meta.specificity];if(existing){if(false){throw new Error(`The route files \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Please remove or rename one of these files.`);}}else{hasRoutes||=true;nodes[meta.specificity]=node;}}}}if(!isValid){return null;}if(!rootDirectory.layout){rootDirectory.layout=[{type:'layout',loadRoute:()=>({default:require('./views/Navigator').DefaultNavigator}),contextKey:'expo-router/build/views/Navigator.js',route:'',generated:true,dynamic:null,children:[]}];}if(!options.skipGenerated){if(hasRoutes){appendSitemapRoute(rootDirectory);}appendNotFoundRoute(rootDirectory);}return rootDirectory;}function flattenDirectoryTreeToRoutes(directory,options,layout,pathToRemove=''){if(directory.layout){const previousLayout=layout;layout=getMostSpecific(directory.layout);if(previousLayout){previousLayout.children.push(layout);}if(options.internal_stripLoadRoute){delete layout.loadRoute;}const newRoute=layout.route.replace(pathToRemove,'');pathToRemove=layout.route?`${layout.route}/`:'';layout.route=newRoute;layout.dynamic=generateDynamic(layout.route);}if(!layout)throw new Error('Expo Router Internal Error: No nearest layout');for(const routes of directory.files.values()){const routeNode=getMostSpecific(routes);routeNode.route=routeNode.route.replace(pathToRemove,'');routeNode.dynamic=generateDynamic(routeNode.route);if(options.internal_stripLoadRoute){delete routeNode.loadRoute;}layout.children.push(routeNode);}for(const child of directory.subdirectories.values()){flattenDirectoryTreeToRoutes(child,options,layout,pathToRemove);}return layout;}function getFileMeta(key,options){key=key.replace(/^\\.\\//,'');const parts=key.split('/');let route=(0,matchers_1.removeSupportedExtensions)(key);const filename=parts[parts.length-1];const[filenameWithoutExtensions,platformExtension]=(0,matchers_1.removeSupportedExtensions)(filename).split('.');const isLayout=filenameWithoutExtensions==='_layout';const isApi=filename.match(/\\+api\\.(\\w+\\.)?[jt]sx?$/);if(filenameWithoutExtensions.startsWith('(')&&filenameWithoutExtensions.endsWith(')')){throw new Error(`Invalid route ./${key}. Routes cannot end with '(group)' syntax`);}if(!isApi&&filename.startsWith('+')&&filenameWithoutExtensions!=='+not-found'){const renamedRoute=[...parts.slice(0,-1),filename.slice(1)].join('/');throw new Error(`Invalid route ./${key}. Route nodes cannot start with the '+' character. \"Please rename to ${renamedRoute}\"`);}let specificity=0;const hasPlatformExtension=validPlatforms.has(platformExtension);const usePlatformRoutes=options.platformRoutes??true;if(hasPlatformExtension){if(!usePlatformRoutes){specificity=-1;}else if(!options.platform){specificity=-1;}else if(platformExtension===options.platform){specificity=2;}else if(platformExtension==='native'&&options.platform!=='web'){specificity=1;}else if(platformExtension!==options.platform){specificity=-1;}if(isApi&&specificity!==0){throw new Error(`Api routes cannot have platform extensions. Please remove '.${platformExtension}' from './${key}'`);}route=route.replace(new RegExp(`.${platformExtension}$`),'');}return{route,specificity,isLayout,isApi};}function getIgnoreList(options){const ignore=[/^\\.\\/\\+html\\.[tj]sx?$/,...(options?.ignore??[])];if(options?.preserveApiRoutes!==true){ignore.push(/\\+api\\.[tj]sx?$/);}return ignore;}exports.getIgnoreList=getIgnoreList;function extrapolateGroups(key,keys=new Set()){const match=(0,matchers_1.matchArrayGroupName)(key);if(!match){keys.add(key);return keys;}const groups=match.split(',');const groupsSet=new Set(groups);if(groupsSet.size!==groups.length){throw new Error(`Array syntax cannot contain duplicate group name \"${groups}\" in \"${key}\".`);}if(groups.length===1){keys.add(key);return keys;}for(const group of groups){extrapolateGroups(key.replace(match,group.trim()),keys);}return keys;}exports.extrapolateGroups=extrapolateGroups;function generateDynamic(path){const dynamic=path.split('/').map(part=>{if(part==='+not-found'){return{name:'+not-found',deep:true,notFound:true};}const deepDynamicName=(0,matchers_1.matchDeepDynamicRouteName)(part);const dynamicName=deepDynamicName??(0,matchers_1.matchDynamicName)(part);if(!dynamicName)return null;return{name:dynamicName,deep:!!deepDynamicName};}).filter(part=>!!part);return dynamic.length===0?null:dynamic;}exports.generateDynamic=generateDynamic;function appendSitemapRoute(directory){if(!directory.files.has('_sitemap')){directory.files.set('_sitemap',[{loadRoute(){const{Sitemap,getNavOptions}=require('./views/Sitemap');return{default:Sitemap,getNavOptions};},route:'_sitemap',type:'route',contextKey:'expo-router/build/views/Sitemap.js',generated:true,internal:true,dynamic:null,children:[]}]);}}function appendNotFoundRoute(directory){if(!directory.files.has('+not-found')){directory.files.set('+not-found',[{loadRoute(){return{default:require('./views/Unmatched').Unmatched};},type:'route',route:'+not-found',contextKey:'expo-router/build/views/Unmatched.js',generated:true,internal:true,dynamic:[{name:'+not-found',deep:true,notFound:true}],children:[]}]);}}function getLayoutNode(node,options){const groupName=(0,matchers_1.matchGroupName)(node.route);const childMatchingGroup=node.children.find(child=>{return child.route.replace(/\\/index$/,'')===groupName;});let initialRouteName=childMatchingGroup?.route;const loaded=node.loadRoute();if(loaded?.unstable_settings){initialRouteName=loaded.unstable_settings.initialRouteName??initialRouteName;if(groupName){const groupSpecificInitialRouteName=loaded.unstable_settings?.[groupName]?.initialRouteName;initialRouteName=groupSpecificInitialRouteName??initialRouteName;}}return _objectSpread(_objectSpread({},node),{},{route:node.route.replace(/\\/?_layout$/,''),children:[],initialRouteName});}function crawlAndAppendInitialRoutesAndEntryFiles(node,options,entryPoints=[]){if(node.type==='route'){node.entryPoints=[...new Set([...entryPoints,node.contextKey])];}else if(node.type==='layout'){if(!node.children){throw new Error(`Layout \"${node.contextKey}\" does not contain any child routes`);}entryPoints=[...entryPoints,node.contextKey];const groupName=(0,matchers_1.matchGroupName)(node.route);const childMatchingGroup=node.children.find(child=>{return child.route.replace(/\\/index$/,'')===groupName;});let initialRouteName=childMatchingGroup?.route;if(!options.internal_stripLoadRoute){const loaded=node.loadRoute();if(loaded?.unstable_settings){initialRouteName=loaded.unstable_settings.initialRouteName??initialRouteName;if(groupName){const groupSpecificInitialRouteName=loaded.unstable_settings?.[groupName]?.initialRouteName;initialRouteName=groupSpecificInitialRouteName??initialRouteName;}}}if(initialRouteName){const initialRoute=node.children.find(child=>child.route===initialRouteName);if(!initialRoute){const validInitialRoutes=node.children.filter(child=>!child.generated).map(child=>`'${child.route}'`).join(', ');if(groupName){throw new Error(`Layout ${node.contextKey} has invalid initialRouteName '${initialRouteName}' for group '(${groupName})'. Valid options are: ${validInitialRoutes}`);}else{throw new Error(`Layout ${node.contextKey} has invalid initialRouteName '${initialRouteName}'. Valid options are: ${validInitialRoutes}`);}}node.initialRouteName=initialRouteName;entryPoints.push(initialRoute.contextKey);}for(const child of node.children){crawlAndAppendInitialRoutesAndEntryFiles(child,options,entryPoints);}}}function getMostSpecific(routes){const route=routes[routes.length-1];if(!routes[0]){throw new Error(`The file ${route.contextKey} does not have a fallback sibling file without a platform extension.`);}return routes[routes.length-1];}","map":{"version":3,"names":["matchers_1","require","validPlatforms","Set","getRoutes","contextModule","options","directoryTree","getDirectoryTree","rootNode","flattenDirectoryTreeToRoutes","ignoreEntryPoints","crawlAndAppendInitialRoutesAndEntryFiles","exports","getExactRoutes","_objectSpread","skipGenerated","importMode","ignoreList","ignore","push","preserveApiRoutes","rootDirectory","files","Map","subdirectories","hasRoutes","isValid","filePath","keys","some","regex","test","meta","getFileMeta","specificity","node","type","isApi","isLayout","loadRoute","ignoreRequireErrors","contextKey","route","dynamic","children","default","extrapolateGroups","subdirectoryParts","split","slice","directory","part","subDirectory","get","set","layout","existing","Error","getLayoutNode","fileKey","nodes","DefaultNavigator","generated","appendSitemapRoute","appendNotFoundRoute","pathToRemove","previousLayout","getMostSpecific","internal_stripLoadRoute","newRoute","replace","generateDynamic","routes","values","routeNode","child","key","parts","removeSupportedExtensions","filename","length","filenameWithoutExtensions","platformExtension","match","startsWith","endsWith","renamedRoute","join","hasPlatformExtension","has","usePlatformRoutes","platformRoutes","platform","RegExp","getIgnoreList","matchArrayGroupName","add","groups","groupsSet","size","group","trim","path","map","name","deep","notFound","deepDynamicName","matchDeepDynamicRouteName","dynamicName","matchDynamicName","filter","Sitemap","getNavOptions","internal","Unmatched","groupName","matchGroupName","childMatchingGroup","find","initialRouteName","loaded","unstable_settings","groupSpecificInitialRouteName","entryPoints","initialRoute","validInitialRoutes"],"sources":["/Users/apple/FounderFinder/node_modules/expo-router/src/getRoutes.ts"],"sourcesContent":["import { DynamicConvention, RouteNode } from './Route';\nimport {\n  matchArrayGroupName,\n  matchDeepDynamicRouteName,\n  matchDynamicName,\n  matchGroupName,\n  removeSupportedExtensions,\n} from './matchers';\nimport { RequireContext } from './types';\n\nexport type Options = {\n  ignore?: RegExp[];\n  preserveApiRoutes?: boolean;\n  ignoreRequireErrors?: boolean;\n  ignoreEntryPoints?: boolean;\n  /* Used to simplify testing for toEqual() comparison */\n  internal_stripLoadRoute?: boolean;\n  /* Used to simplify by skipping the generated routes */\n  skipGenerated?: boolean;\n  importMode?: string;\n  platformRoutes?: boolean;\n  platform?: string;\n};\n\ntype DirectoryNode = {\n  layout?: RouteNode[];\n  files: Map<string, RouteNode[]>;\n  subdirectories: Map<string, DirectoryNode>;\n};\n\nconst validPlatforms = new Set(['android', 'ios', 'native', 'web']);\n\n/**\n * Given a Metro context module, return an array of nested routes.\n *\n * This is a two step process:\n *  1. Convert the RequireContext keys (file paths) into a directory tree.\n *      - This should extrapolate array syntax into multiple routes\n *      - Routes are given a specificity score\n *  2. Flatten the directory tree into routes\n *      - Routes in directories without _layout files are hoisted to the nearest _layout\n *      - The name of the route is relative to the nearest _layout\n *      - If multiple routes have the same name, the most specific route is used\n */\nexport function getRoutes(contextModule: RequireContext, options: Options = {}): RouteNode | null {\n  const directoryTree = getDirectoryTree(contextModule, options);\n\n  // If there are no routes\n  if (!directoryTree) {\n    return null;\n  }\n\n  const rootNode = flattenDirectoryTreeToRoutes(directoryTree, options);\n\n  if (!options.ignoreEntryPoints) {\n    crawlAndAppendInitialRoutesAndEntryFiles(rootNode, options);\n  }\n\n  return rootNode;\n}\n\nexport function getExactRoutes(\n  contextModule: RequireContext,\n  options: Options = {}\n): RouteNode | null {\n  return getRoutes(contextModule, {\n    ...options,\n    skipGenerated: true,\n  });\n}\n\n/**\n * Converts the RequireContext keys (file paths) into a directory tree.\n */\nfunction getDirectoryTree(contextModule: RequireContext, options: Options) {\n  const importMode = options.importMode || process.env.EXPO_ROUTER_IMPORT_MODE;\n\n  const ignoreList: RegExp[] = [/^\\.\\/\\+(html|native-intent)\\.[tj]sx?$/]; // Ignore the top level ./+html file\n\n  if (options.ignore) {\n    ignoreList.push(...options.ignore);\n  }\n  if (!options.preserveApiRoutes) {\n    ignoreList.push(/\\+api\\.[tj]sx?$/);\n  }\n\n  const rootDirectory: DirectoryNode = {\n    files: new Map(),\n    subdirectories: new Map(),\n  };\n\n  let hasRoutes = false;\n  let isValid = false;\n\n  for (const filePath of contextModule.keys()) {\n    if (ignoreList.some((regex) => regex.test(filePath))) {\n      continue;\n    }\n\n    isValid = true;\n\n    const meta = getFileMeta(filePath, options);\n\n    // This is a file that should be ignored. e.g maybe it has an invalid platform?\n    if (meta.specificity < 0) {\n      continue;\n    }\n\n    let node: RouteNode = {\n      type: meta.isApi ? 'api' : meta.isLayout ? 'layout' : 'route',\n      loadRoute() {\n        if (options.ignoreRequireErrors) {\n          try {\n            return contextModule(filePath);\n          } catch {\n            return {};\n          }\n        } else {\n          return contextModule(filePath);\n        }\n      },\n      contextKey: filePath,\n      route: '', // This is overwritten during hoisting based upon the _layout\n      dynamic: null,\n      children: [], // While we are building the directory tree, we don't know the node's children just yet. This is added during hoisting\n    };\n\n    if (process.env.NODE_ENV === 'development') {\n      // If the user has set the `EXPO_ROUTER_IMPORT_MODE` to `sync` then we should\n      // filter the missing routes.\n      if (node.type !== 'api' && importMode === 'sync') {\n        if (!node.loadRoute()?.default) {\n          continue;\n        }\n      }\n    }\n\n    /**\n     * A single filepath may be extrapolated into multiple routes if it contains array syntax.\n     * Another way to thinking about is that a filepath node is present in multiple leaves of the directory tree.\n     */\n    for (const route of extrapolateGroups(meta.route)) {\n      // Traverse the directory tree to its leaf node, creating any missing directories along the way\n      const subdirectoryParts = route.split('/').slice(0, -1);\n\n      // Start at the root directory and traverse the path to the leaf directory\n      let directory = rootDirectory;\n\n      for (const part of subdirectoryParts) {\n        let subDirectory = directory.subdirectories.get(part);\n\n        // Create any missing subdirectories\n        if (!subDirectory) {\n          subDirectory = {\n            files: new Map(),\n            subdirectories: new Map(),\n          };\n          directory.subdirectories.set(part, subDirectory);\n        }\n\n        directory = subDirectory;\n      }\n\n      // Clone the node for this route\n      node = { ...node, route };\n\n      if (meta.isLayout) {\n        directory.layout ??= [];\n        const existing = directory.layout[meta.specificity];\n        if (existing) {\n          // In production, use the first route found\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(\n              `The layouts \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Please remove or rename one of these files.`\n            );\n          }\n        } else {\n          node = getLayoutNode(node, options);\n          directory.layout[meta.specificity] = node;\n        }\n      } else if (meta.isApi) {\n        const fileKey = `${route}+api`;\n        let nodes = directory.files.get(fileKey);\n\n        if (!nodes) {\n          nodes = [];\n          directory.files.set(fileKey, nodes);\n        }\n\n        // API Routes have no specificity, they are always the first node\n        const existing = nodes[0];\n\n        if (existing) {\n          // In production, use the first route found\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(\n              `The API route file \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Please remove or rename one of these files.`\n            );\n          }\n        } else {\n          nodes[0] = node;\n        }\n      } else {\n        let nodes = directory.files.get(route);\n\n        if (!nodes) {\n          nodes = [];\n          directory.files.set(route, nodes);\n        }\n\n        /**\n         * If there is an existing node with the same specificity, then we have a conflict.\n         * NOTE(Platform Routes):\n         *    We cannot check for specificity conflicts here, as we haven't processed all the context keys yet!\n         *    This will be checked during hoisting, as well as enforcing that all routes have a non-platform route.\n         */\n        const existing = nodes[meta.specificity];\n        if (existing) {\n          // In production, use the first route found\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(\n              `The route files \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Please remove or rename one of these files.`\n            );\n          }\n        } else {\n          hasRoutes ||= true;\n          nodes[meta.specificity] = node;\n        }\n      }\n    }\n  }\n\n  // If there are no routes/layouts then we should display the tutorial.\n  if (!isValid) {\n    return null;\n  }\n\n  /**\n   * If there are no top-level _layout, add a default _layout\n   * While this is a generated route, it will still be generated even if skipGenerated is true.\n   */\n  if (!rootDirectory.layout) {\n    rootDirectory.layout = [\n      {\n        type: 'layout',\n        loadRoute: () => ({\n          default: (require('./views/Navigator') as typeof import('./views/Navigator'))\n            .DefaultNavigator,\n        }),\n        // Generate a fake file name for the directory\n        contextKey: 'expo-router/build/views/Navigator.js',\n        route: '',\n        generated: true,\n        dynamic: null,\n        children: [],\n      },\n    ];\n  }\n\n  // Only include the sitemap if there are routes.\n  if (!options.skipGenerated) {\n    if (hasRoutes) {\n      appendSitemapRoute(rootDirectory);\n    }\n    appendNotFoundRoute(rootDirectory);\n  }\n  return rootDirectory;\n}\n\n/**\n * Flatten the directory tree into routes, hoisting routes to the nearest _layout.\n */\nfunction flattenDirectoryTreeToRoutes(\n  directory: DirectoryNode,\n  options: Options,\n  /* The nearest _layout file in the directory tree */\n  layout?: RouteNode,\n  /* Route names are relative to their layout */\n  pathToRemove = ''\n) {\n  /**\n   * This directory has a _layout file so it becomes the new target for hoisting routes.\n   */\n  if (directory.layout) {\n    const previousLayout = layout;\n    layout = getMostSpecific(directory.layout);\n\n    // Add the new layout as a child of its parent\n    if (previousLayout) {\n      previousLayout.children.push(layout);\n    }\n\n    if (options.internal_stripLoadRoute) {\n      delete (layout as any).loadRoute;\n    }\n\n    // `route` is the absolute pathname. We need to make this relative to the last _layout\n    const newRoute = layout.route.replace(pathToRemove, '');\n    pathToRemove = layout.route ? `${layout.route}/` : '';\n\n    // Now update this layout with the new relative route and dynamic conventions\n    layout.route = newRoute;\n    layout.dynamic = generateDynamic(layout.route);\n  }\n\n  // This should never occur as there will always be a root layout, but it makes the type system happy\n  if (!layout) throw new Error('Expo Router Internal Error: No nearest layout');\n\n  for (const routes of directory.files.values()) {\n    const routeNode = getMostSpecific(routes);\n\n    // `route` is the absolute pathname. We need to make this relative to the nearest layout\n    routeNode.route = routeNode.route.replace(pathToRemove, '');\n    routeNode.dynamic = generateDynamic(routeNode.route);\n\n    if (options.internal_stripLoadRoute) {\n      delete (routeNode as any).loadRoute;\n    }\n\n    layout.children.push(routeNode);\n  }\n\n  // Recursively flatten the subdirectories\n  for (const child of directory.subdirectories.values()) {\n    flattenDirectoryTreeToRoutes(child, options, layout, pathToRemove);\n  }\n\n  return layout;\n}\n\nfunction getFileMeta(key: string, options: Options) {\n  // Remove the leading `./`\n  key = key.replace(/^\\.\\//, '');\n\n  const parts = key.split('/');\n  let route = removeSupportedExtensions(key);\n  const filename = parts[parts.length - 1];\n  const [filenameWithoutExtensions, platformExtension] =\n    removeSupportedExtensions(filename).split('.');\n  const isLayout = filenameWithoutExtensions === '_layout';\n  const isApi = filename.match(/\\+api\\.(\\w+\\.)?[jt]sx?$/);\n\n  if (filenameWithoutExtensions.startsWith('(') && filenameWithoutExtensions.endsWith(')')) {\n    throw new Error(`Invalid route ./${key}. Routes cannot end with '(group)' syntax`);\n  }\n\n  // Nested routes cannot start with the '+' character, except for the '+not-found' route\n  if (!isApi && filename.startsWith('+') && filenameWithoutExtensions !== '+not-found') {\n    const renamedRoute = [...parts.slice(0, -1), filename.slice(1)].join('/');\n    throw new Error(\n      `Invalid route ./${key}. Route nodes cannot start with the '+' character. \"Please rename to ${renamedRoute}\"`\n    );\n  }\n  let specificity = 0;\n\n  const hasPlatformExtension = validPlatforms.has(platformExtension);\n  const usePlatformRoutes = options.platformRoutes ?? true;\n\n  if (hasPlatformExtension) {\n    if (!usePlatformRoutes) {\n      // If the user has disabled platform routes, then we should ignore this file\n      specificity = -1;\n    } else if (!options.platform) {\n      // If we don't have a platform, then we should ignore this file\n      // This used by typed routes, sitemap, etc\n      specificity = -1;\n    } else if (platformExtension === options.platform) {\n      // If the platform extension is the same as the options.platform, then it is the most specific\n      specificity = 2;\n    } else if (platformExtension === 'native' && options.platform !== 'web') {\n      // `native` is allow but isn't as specific as the platform\n      specificity = 1;\n    } else if (platformExtension !== options.platform) {\n      // Somehow we have a platform extension that doesn't match the options.platform and it isn't native\n      // This is an invalid file and we will ignore it\n      specificity = -1;\n    }\n\n    if (isApi && specificity !== 0) {\n      throw new Error(\n        `Api routes cannot have platform extensions. Please remove '.${platformExtension}' from './${key}'`\n      );\n    }\n\n    route = route.replace(new RegExp(`.${platformExtension}$`), '');\n  }\n\n  return {\n    route,\n    specificity,\n    isLayout,\n    isApi,\n  };\n}\n\nexport function getIgnoreList(options?: Options) {\n  const ignore: RegExp[] = [/^\\.\\/\\+html\\.[tj]sx?$/, ...(options?.ignore ?? [])];\n  if (options?.preserveApiRoutes !== true) {\n    ignore.push(/\\+api\\.[tj]sx?$/);\n  }\n  return ignore;\n}\n\n/**\n * Generates a set of strings which have the router array syntax extrapolated.\n *\n * /(a,b)/(c,d)/e.tsx => new Set(['a/c/e.tsx', 'a/d/e.tsx', 'b/c/e.tsx', 'b/d/e.tsx'])\n */\nexport function extrapolateGroups(key: string, keys: Set<string> = new Set()): Set<string> {\n  const match = matchArrayGroupName(key);\n\n  if (!match) {\n    keys.add(key);\n    return keys;\n  }\n  const groups = match.split(',');\n  const groupsSet = new Set(groups);\n\n  if (groupsSet.size !== groups.length) {\n    throw new Error(`Array syntax cannot contain duplicate group name \"${groups}\" in \"${key}\".`);\n  }\n\n  if (groups.length === 1) {\n    keys.add(key);\n    return keys;\n  }\n\n  for (const group of groups) {\n    extrapolateGroups(key.replace(match, group.trim()), keys);\n  }\n\n  return keys;\n}\n\nexport function generateDynamic(path: string): DynamicConvention[] | null {\n  const dynamic = path\n    .split('/')\n    .map((part): DynamicConvention | null => {\n      if (part === '+not-found') {\n        return {\n          name: '+not-found',\n          deep: true,\n          notFound: true,\n        };\n      }\n\n      const deepDynamicName = matchDeepDynamicRouteName(part);\n      const dynamicName = deepDynamicName ?? matchDynamicName(part);\n\n      if (!dynamicName) return null;\n      return { name: dynamicName, deep: !!deepDynamicName };\n    })\n    .filter((part): part is DynamicConvention => !!part);\n\n  return dynamic.length === 0 ? null : dynamic;\n}\n\nfunction appendSitemapRoute(directory: DirectoryNode) {\n  if (!directory.files.has('_sitemap')) {\n    directory.files.set('_sitemap', [\n      {\n        loadRoute() {\n          const { Sitemap, getNavOptions } = require('./views/Sitemap');\n          return { default: Sitemap, getNavOptions };\n        },\n        route: '_sitemap',\n        type: 'route',\n        contextKey: 'expo-router/build/views/Sitemap.js',\n        generated: true,\n        internal: true,\n        dynamic: null,\n        children: [],\n      },\n    ]);\n  }\n}\n\nfunction appendNotFoundRoute(directory: DirectoryNode) {\n  if (!directory.files.has('+not-found')) {\n    directory.files.set('+not-found', [\n      {\n        loadRoute() {\n          return { default: require('./views/Unmatched').Unmatched };\n        },\n        type: 'route',\n        route: '+not-found',\n        contextKey: 'expo-router/build/views/Unmatched.js',\n        generated: true,\n        internal: true,\n        dynamic: [{ name: '+not-found', deep: true, notFound: true }],\n        children: [],\n      },\n    ]);\n  }\n}\n\nfunction getLayoutNode(node: RouteNode, options: Options) {\n  /**\n   * A file called `(a,b)/(c)/_layout.tsx` will generate two _layout routes: `(a)/(c)/_layout` and `(b)/(c)/_layout`.\n   * Each of these layouts will have a different initialRouteName based upon the first group name.\n   *\n   * So\n   */\n\n  // We may strip loadRoute during testing\n  const groupName = matchGroupName(node.route);\n  const childMatchingGroup = node.children.find((child) => {\n    return child.route.replace(/\\/index$/, '') === groupName;\n  });\n  let initialRouteName = childMatchingGroup?.route;\n  const loaded = node.loadRoute();\n  if (loaded?.unstable_settings) {\n    // Allow unstable_settings={ initialRouteName: '...' } to override the default initial route name.\n    initialRouteName = loaded.unstable_settings.initialRouteName ?? initialRouteName;\n\n    if (groupName) {\n      // Allow unstable_settings={ 'custom': { initialRouteName: '...' } } to override the less specific initial route name.\n      const groupSpecificInitialRouteName = loaded.unstable_settings?.[groupName]?.initialRouteName;\n\n      initialRouteName = groupSpecificInitialRouteName ?? initialRouteName;\n    }\n  }\n\n  return {\n    ...node,\n    route: node.route.replace(/\\/?_layout$/, ''),\n    children: [], // Each layout should have its own children\n    initialRouteName,\n  };\n}\n\nfunction crawlAndAppendInitialRoutesAndEntryFiles(\n  node: RouteNode,\n  options: Options,\n  entryPoints: string[] = []\n) {\n  if (node.type === 'route') {\n    node.entryPoints = [...new Set([...entryPoints, node.contextKey])];\n  } else if (node.type === 'layout') {\n    if (!node.children) {\n      throw new Error(`Layout \"${node.contextKey}\" does not contain any child routes`);\n    }\n\n    // Every node below this layout will have it as an entryPoint\n    entryPoints = [...entryPoints, node.contextKey];\n\n    /**\n     * Calculate the initialRouteNode\n     *\n     * A file called `(a,b)/(c)/_layout.tsx` will generate two _layout routes: `(a)/(c)/_layout` and `(b)/(c)/_layout`.\n     * Each of these layouts will have a different initialRouteName based upon the first group.\n     */\n    const groupName = matchGroupName(node.route);\n    const childMatchingGroup = node.children.find((child) => {\n      return child.route.replace(/\\/index$/, '') === groupName;\n    });\n    let initialRouteName = childMatchingGroup?.route;\n    // We may strip loadRoute during testing\n    if (!options.internal_stripLoadRoute) {\n      const loaded = node.loadRoute();\n      if (loaded?.unstable_settings) {\n        // Allow unstable_settings={ initialRouteName: '...' } to override the default initial route name.\n        initialRouteName = loaded.unstable_settings.initialRouteName ?? initialRouteName;\n\n        if (groupName) {\n          // Allow unstable_settings={ 'custom': { initialRouteName: '...' } } to override the less specific initial route name.\n          const groupSpecificInitialRouteName =\n            loaded.unstable_settings?.[groupName]?.initialRouteName;\n\n          initialRouteName = groupSpecificInitialRouteName ?? initialRouteName;\n        }\n      }\n    }\n\n    if (initialRouteName) {\n      const initialRoute = node.children.find((child) => child.route === initialRouteName);\n      if (!initialRoute) {\n        const validInitialRoutes = node.children\n          .filter((child) => !child.generated)\n          .map((child) => `'${child.route}'`)\n          .join(', ');\n\n        if (groupName) {\n          throw new Error(\n            `Layout ${node.contextKey} has invalid initialRouteName '${initialRouteName}' for group '(${groupName})'. Valid options are: ${validInitialRoutes}`\n          );\n        } else {\n          throw new Error(\n            `Layout ${node.contextKey} has invalid initialRouteName '${initialRouteName}'. Valid options are: ${validInitialRoutes}`\n          );\n        }\n      }\n\n      // Navigators can add initialsRoutes into the history, so they need to be to be included in the entryPoints\n      node.initialRouteName = initialRouteName;\n      entryPoints.push(initialRoute.contextKey);\n    }\n\n    for (const child of node.children) {\n      crawlAndAppendInitialRoutesAndEntryFiles(child, options, entryPoints);\n    }\n  }\n}\n\nfunction getMostSpecific(routes: RouteNode[]) {\n  const route = routes[routes.length - 1];\n\n  if (!routes[0]) {\n    throw new Error(\n      `The file ${route.contextKey} does not have a fallback sibling file without a platform extension.`\n    );\n  }\n\n  // This works even tho routes is holey array (e.g it might have index 0 and 2 but not 1)\n  // `.length` includes the holes in its count\n  return routes[routes.length - 1];\n}\n"],"mappings":"+2BACA,MAAAA,UAAA,CAAAC,OAAA,eA6BA,KAAM,CAAAC,cAAc,CAAG,GAAI,CAAAC,GAAG,CAAC,CAAC,SAAS,CAAE,KAAK,CAAE,QAAQ,CAAE,KAAK,CAAC,CAAC,CAcnE,QAAgB,CAAAC,SAASA,CAACC,aAA6B,CAAEC,OAAA,CAAmB,EAAE,EAC5E,KAAM,CAAAC,aAAa,CAAGC,gBAAgB,CAACH,aAAa,CAAEC,OAAO,CAAC,CAG9D,GAAI,CAACC,aAAa,CAAE,CAClB,MAAO,KAAI,C,CAGb,KAAM,CAAAE,QAAQ,CAAGC,4BAA4B,CAACH,aAAa,CAAED,OAAO,CAAC,CAErE,GAAI,CAACA,OAAO,CAACK,iBAAiB,CAAE,CAC9BC,wCAAwC,CAACH,QAAQ,CAAEH,OAAO,CAAC,C,CAG7D,MAAO,CAAAG,QAAQ,CACjB,CAfAI,OAAA,CAAAT,SAAA,CAAAA,SAAA,CAiBA,QAAgB,CAAAU,cAAcA,CAC5BT,aAA6B,CAC7BC,OAAA,CAAmB,EAAE,EAErB,MAAO,CAAAF,SAAS,CAACC,aAAa,CAAAU,aAAA,CAAAA,aAAA,IACzBT,OAAO,MACVU,aAAa,CAAE,IAAI,EACpB,CAAC,CACJ,CARAH,OAAA,CAAAC,cAAA,CAAAA,cAAA,CAaA,QAAS,CAAAN,gBAAgBA,CAACH,aAA6B,CAAEC,OAAgB,EACvE,KAAM,CAAAW,UAAU,CAAGX,OAAO,CAACW,UAAU,QAAuC,CAE5E,KAAM,CAAAC,UAAU,CAAa,CAAC,uCAAuC,CAAC,CAEtE,GAAIZ,OAAO,CAACa,MAAM,CAAE,CAClBD,UAAU,CAACE,IAAI,CAAC,GAAGd,OAAO,CAACa,MAAM,CAAC,C,CAEpC,GAAI,CAACb,OAAO,CAACe,iBAAiB,CAAE,CAC9BH,UAAU,CAACE,IAAI,CAAC,iBAAiB,CAAC,C,CAGpC,KAAM,CAAAE,aAAa,CAAkB,CACnCC,KAAK,CAAE,GAAI,CAAAC,GAAG,EAAE,CAChBC,cAAc,CAAE,GAAI,CAAAD,GAAG,E,CACxB,CAED,GAAI,CAAAE,SAAS,CAAG,KAAK,CACrB,GAAI,CAAAC,OAAO,CAAG,KAAK,CAEnB,IAAK,KAAM,CAAAC,QAAQ,GAAI,CAAAvB,aAAa,CAACwB,IAAI,EAAE,CAAE,CAC3C,GAAIX,UAAU,CAACY,IAAI,CAAEC,KAAK,EAAKA,KAAK,CAACC,IAAI,CAACJ,QAAQ,CAAC,CAAC,CAAE,CACpD,S,CAGFD,OAAO,CAAG,IAAI,CAEd,KAAM,CAAAM,IAAI,CAAGC,WAAW,CAACN,QAAQ,CAAEtB,OAAO,CAAC,CAG3C,GAAI2B,IAAI,CAACE,WAAW,CAAG,CAAC,CAAE,CACxB,S,CAGF,GAAI,CAAAC,IAAI,CAAc,CACpBC,IAAI,CAAEJ,IAAI,CAACK,KAAK,CAAG,KAAK,CAAGL,IAAI,CAACM,QAAQ,CAAG,QAAQ,CAAG,OAAO,CAC7DC,SAASA,CAAA,EACP,GAAIlC,OAAO,CAACmC,mBAAmB,CAAE,CAC/B,GAAI,CACF,MAAO,CAAApC,aAAa,CAACuB,QAAQ,CAAC,C,CAC9B,KAAM,CACN,MAAO,EAAE,C,EAEZ,IAAM,CACL,MAAO,CAAAvB,aAAa,CAACuB,QAAQ,CAAC,C,CAElC,CAAC,CACDc,UAAU,CAAEd,QAAQ,CACpBe,KAAK,CAAE,EAAE,CACTC,OAAO,CAAE,IAAI,CACbC,QAAQ,CAAE,E,CACX,CAED,SAA4C,CAG1C,GAAIT,IAAI,CAACC,IAAI,GAAK,KAAK,EAAIpB,UAAU,GAAK,MAAM,CAAE,CAChD,GAAI,CAACmB,IAAI,CAACI,SAAS,EAAE,EAAEM,OAAO,CAAE,CAC9B,S,GASN,IAAK,KAAM,CAAAH,KAAK,GAAI,CAAAI,iBAAiB,CAACd,IAAI,CAACU,KAAK,CAAC,CAAE,CAEjD,KAAM,CAAAK,iBAAiB,CAAGL,KAAK,CAACM,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAGvD,GAAI,CAAAC,SAAS,CAAG7B,aAAa,CAE7B,IAAK,KAAM,CAAA8B,IAAI,GAAI,CAAAJ,iBAAiB,CAAE,CACpC,GAAI,CAAAK,YAAY,CAAGF,SAAS,CAAC1B,cAAc,CAAC6B,GAAG,CAACF,IAAI,CAAC,CAGrD,GAAI,CAACC,YAAY,CAAE,CACjBA,YAAY,CAAG,CACb9B,KAAK,CAAE,GAAI,CAAAC,GAAG,EAAE,CAChBC,cAAc,CAAE,GAAI,CAAAD,GAAG,E,CACxB,CACD2B,SAAS,CAAC1B,cAAc,CAAC8B,GAAG,CAACH,IAAI,CAAEC,YAAY,CAAC,C,CAGlDF,SAAS,CAAGE,YAAY,C,CAI1BjB,IAAI,CAAArB,aAAA,CAAAA,aAAA,IAAQqB,IAAI,MAAEO,KAAK,EAAE,CAEzB,GAAIV,IAAI,CAACM,QAAQ,CAAE,CACjBY,SAAS,CAACK,MAAM,GAAK,EAAE,CACvB,KAAM,CAAAC,QAAQ,CAAGN,SAAS,CAACK,MAAM,CAACvB,IAAI,CAACE,WAAW,CAAC,CACnD,GAAIsB,QAAQ,CAAE,CAEZ,SAA2C,CACzC,KAAM,IAAI,CAAAC,KAAK,CACb,gBAAgB9B,QAAQ,UAAU6B,QAAQ,CAACf,UAAU,6BAA6BC,KAAK,gDAAgD,CACxI,C,EAEJ,IAAM,CACLP,IAAI,CAAGuB,aAAa,CAACvB,IAAI,CAAE9B,OAAO,CAAC,CACnC6C,SAAS,CAACK,MAAM,CAACvB,IAAI,CAACE,WAAW,CAAC,CAAGC,IAAI,C,EAE5C,IAAM,IAAIH,IAAI,CAACK,KAAK,CAAE,CACrB,KAAM,CAAAsB,OAAO,CAAG,GAAGjB,KAAK,MAAM,CAC9B,GAAI,CAAAkB,KAAK,CAAGV,SAAS,CAAC5B,KAAK,CAAC+B,GAAG,CAACM,OAAO,CAAC,CAExC,GAAI,CAACC,KAAK,CAAE,CACVA,KAAK,CAAG,EAAE,CACVV,SAAS,CAAC5B,KAAK,CAACgC,GAAG,CAACK,OAAO,CAAEC,KAAK,CAAC,C,CAIrC,KAAM,CAAAJ,QAAQ,CAAGI,KAAK,CAAC,CAAC,CAAC,CAEzB,GAAIJ,QAAQ,CAAE,CAEZ,SAA2C,CACzC,KAAM,IAAI,CAAAC,KAAK,CACb,uBAAuB9B,QAAQ,UAAU6B,QAAQ,CAACf,UAAU,6BAA6BC,KAAK,gDAAgD,CAC/I,C,EAEJ,IAAM,CACLkB,KAAK,CAAC,CAAC,CAAC,CAAGzB,IAAI,C,EAElB,IAAM,CACL,GAAI,CAAAyB,KAAK,CAAGV,SAAS,CAAC5B,KAAK,CAAC+B,GAAG,CAACX,KAAK,CAAC,CAEtC,GAAI,CAACkB,KAAK,CAAE,CACVA,KAAK,CAAG,EAAE,CACVV,SAAS,CAAC5B,KAAK,CAACgC,GAAG,CAACZ,KAAK,CAAEkB,KAAK,CAAC,C,CASnC,KAAM,CAAAJ,QAAQ,CAAGI,KAAK,CAAC5B,IAAI,CAACE,WAAW,CAAC,CACxC,GAAIsB,QAAQ,CAAE,CAEZ,SAA2C,CACzC,KAAM,IAAI,CAAAC,KAAK,CACb,oBAAoB9B,QAAQ,UAAU6B,QAAQ,CAACf,UAAU,6BAA6BC,KAAK,gDAAgD,CAC5I,C,EAEJ,IAAM,CACLjB,SAAS,GAAK,IAAI,CAClBmC,KAAK,CAAC5B,IAAI,CAACE,WAAW,CAAC,CAAGC,IAAI,C,IAOtC,GAAI,CAACT,OAAO,CAAE,CACZ,MAAO,KAAI,C,CAOb,GAAI,CAACL,aAAa,CAACkC,MAAM,CAAE,CACzBlC,aAAa,CAACkC,MAAM,CAAG,CACrB,CACEnB,IAAI,CAAE,QAAQ,CACdG,SAAS,CAAEA,CAAA,IAAO,CAChBM,OAAO,CAAG7C,OAAO,CAAC,mBAAmB,CAAwC,CAC1E6D,gB,CACJ,CAAC,CAEFpB,UAAU,CAAE,sCAAsC,CAClDC,KAAK,CAAE,EAAE,CACToB,SAAS,CAAE,IAAI,CACfnB,OAAO,CAAE,IAAI,CACbC,QAAQ,CAAE,E,CACX,CACF,C,CAIH,GAAI,CAACvC,OAAO,CAACU,aAAa,CAAE,CAC1B,GAAIU,SAAS,CAAE,CACbsC,kBAAkB,CAAC1C,aAAa,CAAC,C,CAEnC2C,mBAAmB,CAAC3C,aAAa,CAAC,C,CAEpC,MAAO,CAAAA,aAAa,CACtB,CAKA,QAAS,CAAAZ,4BAA4BA,CACnCyC,SAAwB,CACxB7C,OAAgB,CAEhBkD,MAAkB,CAElBU,YAAY,CAAG,EAAE,EAKjB,GAAIf,SAAS,CAACK,MAAM,CAAE,CACpB,KAAM,CAAAW,cAAc,CAAGX,MAAM,CAC7BA,MAAM,CAAGY,eAAe,CAACjB,SAAS,CAACK,MAAM,CAAC,CAG1C,GAAIW,cAAc,CAAE,CAClBA,cAAc,CAACtB,QAAQ,CAACzB,IAAI,CAACoC,MAAM,CAAC,C,CAGtC,GAAIlD,OAAO,CAAC+D,uBAAuB,CAAE,CACnC,MAAQ,CAAAb,MAAc,CAAChB,SAAS,C,CAIlC,KAAM,CAAA8B,QAAQ,CAAGd,MAAM,CAACb,KAAK,CAAC4B,OAAO,CAACL,YAAY,CAAE,EAAE,CAAC,CACvDA,YAAY,CAAGV,MAAM,CAACb,KAAK,CAAG,GAAGa,MAAM,CAACb,KAAK,GAAG,CAAG,EAAE,CAGrDa,MAAM,CAACb,KAAK,CAAG2B,QAAQ,CACvBd,MAAM,CAACZ,OAAO,CAAG4B,eAAe,CAAChB,MAAM,CAACb,KAAK,CAAC,C,CAIhD,GAAI,CAACa,MAAM,CAAE,KAAM,IAAI,CAAAE,KAAK,CAAC,+CAA+C,CAAC,CAE7E,IAAK,KAAM,CAAAe,MAAM,GAAI,CAAAtB,SAAS,CAAC5B,KAAK,CAACmD,MAAM,EAAE,CAAE,CAC7C,KAAM,CAAAC,SAAS,CAAGP,eAAe,CAACK,MAAM,CAAC,CAGzCE,SAAS,CAAChC,KAAK,CAAGgC,SAAS,CAAChC,KAAK,CAAC4B,OAAO,CAACL,YAAY,CAAE,EAAE,CAAC,CAC3DS,SAAS,CAAC/B,OAAO,CAAG4B,eAAe,CAACG,SAAS,CAAChC,KAAK,CAAC,CAEpD,GAAIrC,OAAO,CAAC+D,uBAAuB,CAAE,CACnC,MAAQ,CAAAM,SAAiB,CAACnC,SAAS,C,CAGrCgB,MAAM,CAACX,QAAQ,CAACzB,IAAI,CAACuD,SAAS,CAAC,C,CAIjC,IAAK,KAAM,CAAAC,KAAK,GAAI,CAAAzB,SAAS,CAAC1B,cAAc,CAACiD,MAAM,EAAE,CAAE,CACrDhE,4BAA4B,CAACkE,KAAK,CAAEtE,OAAO,CAAEkD,MAAM,CAAEU,YAAY,CAAC,C,CAGpE,MAAO,CAAAV,MAAM,CACf,CAEA,QAAS,CAAAtB,WAAWA,CAAC2C,GAAW,CAAEvE,OAAgB,EAEhDuE,GAAG,CAAGA,GAAG,CAACN,OAAO,CAAC,OAAO,CAAE,EAAE,CAAC,CAE9B,KAAM,CAAAO,KAAK,CAAGD,GAAG,CAAC5B,KAAK,CAAC,GAAG,CAAC,CAC5B,GAAI,CAAAN,KAAK,CAAG,GAAA3C,UAAA,CAAA+E,yBAAyB,EAACF,GAAG,CAAC,CAC1C,KAAM,CAAAG,QAAQ,CAAGF,KAAK,CAACA,KAAK,CAACG,MAAM,CAAG,CAAC,CAAC,CACxC,KAAM,CAACC,yBAAyB,CAAEC,iBAAiB,CAAC,CAClD,GAAAnF,UAAA,CAAA+E,yBAAyB,EAACC,QAAQ,CAAC,CAAC/B,KAAK,CAAC,GAAG,CAAC,CAChD,KAAM,CAAAV,QAAQ,CAAG2C,yBAAyB,GAAK,SAAS,CACxD,KAAM,CAAA5C,KAAK,CAAG0C,QAAQ,CAACI,KAAK,CAAC,yBAAyB,CAAC,CAEvD,GAAIF,yBAAyB,CAACG,UAAU,CAAC,GAAG,CAAC,EAAIH,yBAAyB,CAACI,QAAQ,CAAC,GAAG,CAAC,CAAE,CACxF,KAAM,IAAI,CAAA5B,KAAK,CAAC,mBAAmBmB,GAAG,2CAA2C,CAAC,C,CAIpF,GAAI,CAACvC,KAAK,EAAI0C,QAAQ,CAACK,UAAU,CAAC,GAAG,CAAC,EAAIH,yBAAyB,GAAK,YAAY,CAAE,CACpF,KAAM,CAAAK,YAAY,CAAG,CAAC,GAAGT,KAAK,CAAC5B,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAAE8B,QAAQ,CAAC9B,KAAK,CAAC,CAAC,CAAC,CAAC,CAACsC,IAAI,CAAC,GAAG,CAAC,CACzE,KAAM,IAAI,CAAA9B,KAAK,CACb,mBAAmBmB,GAAG,wEAAwEU,YAAY,GAAG,CAC9G,C,CAEH,GAAI,CAAApD,WAAW,CAAG,CAAC,CAEnB,KAAM,CAAAsD,oBAAoB,CAAGvF,cAAc,CAACwF,GAAG,CAACP,iBAAiB,CAAC,CAClE,KAAM,CAAAQ,iBAAiB,CAAGrF,OAAO,CAACsF,cAAc,EAAI,IAAI,CAExD,GAAIH,oBAAoB,CAAE,CACxB,GAAI,CAACE,iBAAiB,CAAE,CAEtBxD,WAAW,CAAG,CAAC,CAAC,C,CACjB,IAAM,IAAI,CAAC7B,OAAO,CAACuF,QAAQ,CAAE,CAG5B1D,WAAW,CAAG,CAAC,CAAC,C,CACjB,IAAM,IAAIgD,iBAAiB,GAAK7E,OAAO,CAACuF,QAAQ,CAAE,CAEjD1D,WAAW,CAAG,CAAC,C,CAChB,IAAM,IAAIgD,iBAAiB,GAAK,QAAQ,EAAI7E,OAAO,CAACuF,QAAQ,GAAK,KAAK,CAAE,CAEvE1D,WAAW,CAAG,CAAC,C,CAChB,IAAM,IAAIgD,iBAAiB,GAAK7E,OAAO,CAACuF,QAAQ,CAAE,CAGjD1D,WAAW,CAAG,CAAC,CAAC,C,CAGlB,GAAIG,KAAK,EAAIH,WAAW,GAAK,CAAC,CAAE,CAC9B,KAAM,IAAI,CAAAuB,KAAK,CACb,+DAA+DyB,iBAAiB,aAAaN,GAAG,GAAG,CACpG,C,CAGHlC,KAAK,CAAGA,KAAK,CAAC4B,OAAO,CAAC,GAAI,CAAAuB,MAAM,CAAC,IAAIX,iBAAiB,GAAG,CAAC,CAAE,EAAE,CAAC,C,CAGjE,MAAO,CACLxC,KAAK,CACLR,WAAW,CACXI,QAAQ,CACRD,K,CACD,CACH,CAEA,QAAgB,CAAAyD,aAAaA,CAACzF,OAAiB,EAC7C,KAAM,CAAAa,MAAM,CAAa,CAAC,uBAAuB,CAAE,IAAIb,OAAO,EAAEa,MAAM,EAAI,EAAE,CAAC,CAAC,CAC9E,GAAIb,OAAO,EAAEe,iBAAiB,GAAK,IAAI,CAAE,CACvCF,MAAM,CAACC,IAAI,CAAC,iBAAiB,CAAC,C,CAEhC,MAAO,CAAAD,MAAM,CACf,CANAN,OAAA,CAAAkF,aAAA,CAAAA,aAAA,CAaA,QAAgB,CAAAhD,iBAAiBA,CAAC8B,GAAW,CAAEhD,IAAA,CAAoB,GAAI,CAAA1B,GAAG,EAAE,EAC1E,KAAM,CAAAiF,KAAK,CAAG,GAAApF,UAAA,CAAAgG,mBAAmB,EAACnB,GAAG,CAAC,CAEtC,GAAI,CAACO,KAAK,CAAE,CACVvD,IAAI,CAACoE,GAAG,CAACpB,GAAG,CAAC,CACb,MAAO,CAAAhD,IAAI,C,CAEb,KAAM,CAAAqE,MAAM,CAAGd,KAAK,CAACnC,KAAK,CAAC,GAAG,CAAC,CAC/B,KAAM,CAAAkD,SAAS,CAAG,GAAI,CAAAhG,GAAG,CAAC+F,MAAM,CAAC,CAEjC,GAAIC,SAAS,CAACC,IAAI,GAAKF,MAAM,CAACjB,MAAM,CAAE,CACpC,KAAM,IAAI,CAAAvB,KAAK,CAAC,qDAAqDwC,MAAM,SAASrB,GAAG,IAAI,CAAC,C,CAG9F,GAAIqB,MAAM,CAACjB,MAAM,GAAK,CAAC,CAAE,CACvBpD,IAAI,CAACoE,GAAG,CAACpB,GAAG,CAAC,CACb,MAAO,CAAAhD,IAAI,C,CAGb,IAAK,KAAM,CAAAwE,KAAK,GAAI,CAAAH,MAAM,CAAE,CAC1BnD,iBAAiB,CAAC8B,GAAG,CAACN,OAAO,CAACa,KAAK,CAAEiB,KAAK,CAACC,IAAI,EAAE,CAAC,CAAEzE,IAAI,CAAC,C,CAG3D,MAAO,CAAAA,IAAI,CACb,CAxBAhB,OAAA,CAAAkC,iBAAA,CAAAA,iBAAA,CA0BA,QAAgB,CAAAyB,eAAeA,CAAC+B,IAAY,EAC1C,KAAM,CAAA3D,OAAO,CAAG2D,IAAI,CACjBtD,KAAK,CAAC,GAAG,CAAC,CACVuD,GAAG,CAAEpD,IAAI,EAA8B,CACtC,GAAIA,IAAI,GAAK,YAAY,CAAE,CACzB,MAAO,CACLqD,IAAI,CAAE,YAAY,CAClBC,IAAI,CAAE,IAAI,CACVC,QAAQ,CAAE,I,CACX,C,CAGH,KAAM,CAAAC,eAAe,CAAG,GAAA5G,UAAA,CAAA6G,yBAAyB,EAACzD,IAAI,CAAC,CACvD,KAAM,CAAA0D,WAAW,CAAGF,eAAe,EAAI,GAAA5G,UAAA,CAAA+G,gBAAgB,EAAC3D,IAAI,CAAC,CAE7D,GAAI,CAAC0D,WAAW,CAAE,MAAO,KAAI,CAC7B,MAAO,CAAEL,IAAI,CAAEK,WAAW,CAAEJ,IAAI,CAAE,CAAC,CAACE,eAAe,CAAE,CACvD,CAAC,CAAC,CACDI,MAAM,CAAE5D,IAAI,EAAgC,CAAC,CAACA,IAAI,CAAC,CAEtD,MAAO,CAAAR,OAAO,CAACqC,MAAM,GAAK,CAAC,CAAG,IAAI,CAAGrC,OAAO,CAC9C,CArBA/B,OAAA,CAAA2D,eAAA,CAAAA,eAAA,CAuBA,QAAS,CAAAR,kBAAkBA,CAACb,SAAwB,EAClD,GAAI,CAACA,SAAS,CAAC5B,KAAK,CAACmE,GAAG,CAAC,UAAU,CAAC,CAAE,CACpCvC,SAAS,CAAC5B,KAAK,CAACgC,GAAG,CAAC,UAAU,CAAE,CAC9B,CACEf,SAASA,CAAA,EACP,KAAM,CAAEyE,OAAO,CAAEC,aAAa,CAAE,CAAGjH,OAAO,CAAC,iBAAiB,CAAC,CAC7D,MAAO,CAAE6C,OAAO,CAAEmE,OAAO,CAAEC,aAAa,CAAE,CAC5C,CAAC,CACDvE,KAAK,CAAE,UAAU,CACjBN,IAAI,CAAE,OAAO,CACbK,UAAU,CAAE,oCAAoC,CAChDqB,SAAS,CAAE,IAAI,CACfoD,QAAQ,CAAE,IAAI,CACdvE,OAAO,CAAE,IAAI,CACbC,QAAQ,CAAE,E,CACX,CACF,CAAC,C,CAEN,CAEA,QAAS,CAAAoB,mBAAmBA,CAACd,SAAwB,EACnD,GAAI,CAACA,SAAS,CAAC5B,KAAK,CAACmE,GAAG,CAAC,YAAY,CAAC,CAAE,CACtCvC,SAAS,CAAC5B,KAAK,CAACgC,GAAG,CAAC,YAAY,CAAE,CAChC,CACEf,SAASA,CAAA,EACP,MAAO,CAAEM,OAAO,CAAE7C,OAAO,CAAC,mBAAmB,CAAC,CAACmH,SAAS,CAAE,CAC5D,CAAC,CACD/E,IAAI,CAAE,OAAO,CACbM,KAAK,CAAE,YAAY,CACnBD,UAAU,CAAE,sCAAsC,CAClDqB,SAAS,CAAE,IAAI,CACfoD,QAAQ,CAAE,IAAI,CACdvE,OAAO,CAAE,CAAC,CAAE6D,IAAI,CAAE,YAAY,CAAEC,IAAI,CAAE,IAAI,CAAEC,QAAQ,CAAE,IAAI,CAAE,CAAC,CAC7D9D,QAAQ,CAAE,E,CACX,CACF,CAAC,C,CAEN,CAEA,QAAS,CAAAc,aAAaA,CAACvB,IAAe,CAAE9B,OAAgB,EAStD,KAAM,CAAA+G,SAAS,CAAG,GAAArH,UAAA,CAAAsH,cAAc,EAAClF,IAAI,CAACO,KAAK,CAAC,CAC5C,KAAM,CAAA4E,kBAAkB,CAAGnF,IAAI,CAACS,QAAQ,CAAC2E,IAAI,CAAE5C,KAAK,EAAI,CACtD,MAAO,CAAAA,KAAK,CAACjC,KAAK,CAAC4B,OAAO,CAAC,UAAU,CAAE,EAAE,CAAC,GAAK8C,SAAS,CAC1D,CAAC,CAAC,CACF,GAAI,CAAAI,gBAAgB,CAAGF,kBAAkB,EAAE5E,KAAK,CAChD,KAAM,CAAA+E,MAAM,CAAGtF,IAAI,CAACI,SAAS,EAAE,CAC/B,GAAIkF,MAAM,EAAEC,iBAAiB,CAAE,CAE7BF,gBAAgB,CAAGC,MAAM,CAACC,iBAAiB,CAACF,gBAAgB,EAAIA,gBAAgB,CAEhF,GAAIJ,SAAS,CAAE,CAEb,KAAM,CAAAO,6BAA6B,CAAGF,MAAM,CAACC,iBAAiB,GAAGN,SAAS,CAAC,EAAEI,gBAAgB,CAE7FA,gBAAgB,CAAGG,6BAA6B,EAAIH,gBAAgB,C,EAIxE,OAAA1G,aAAA,CAAAA,aAAA,IACKqB,IAAI,MACPO,KAAK,CAAEP,IAAI,CAACO,KAAK,CAAC4B,OAAO,CAAC,aAAa,CAAE,EAAE,CAAC,CAC5C1B,QAAQ,CAAE,EAAE,CACZ4E,gBAAgB,GAEpB,CAEA,QAAS,CAAA7G,wCAAwCA,CAC/CwB,IAAe,CACf9B,OAAgB,CAChBuH,WAAA,CAAwB,EAAE,EAE1B,GAAIzF,IAAI,CAACC,IAAI,GAAK,OAAO,CAAE,CACzBD,IAAI,CAACyF,WAAW,CAAG,CAAC,GAAG,GAAI,CAAA1H,GAAG,CAAC,CAAC,GAAG0H,WAAW,CAAEzF,IAAI,CAACM,UAAU,CAAC,CAAC,CAAC,C,CACnE,IAAM,IAAIN,IAAI,CAACC,IAAI,GAAK,QAAQ,CAAE,CACjC,GAAI,CAACD,IAAI,CAACS,QAAQ,CAAE,CAClB,KAAM,IAAI,CAAAa,KAAK,CAAC,WAAWtB,IAAI,CAACM,UAAU,qCAAqC,CAAC,C,CAIlFmF,WAAW,CAAG,CAAC,GAAGA,WAAW,CAAEzF,IAAI,CAACM,UAAU,CAAC,CAQ/C,KAAM,CAAA2E,SAAS,CAAG,GAAArH,UAAA,CAAAsH,cAAc,EAAClF,IAAI,CAACO,KAAK,CAAC,CAC5C,KAAM,CAAA4E,kBAAkB,CAAGnF,IAAI,CAACS,QAAQ,CAAC2E,IAAI,CAAE5C,KAAK,EAAI,CACtD,MAAO,CAAAA,KAAK,CAACjC,KAAK,CAAC4B,OAAO,CAAC,UAAU,CAAE,EAAE,CAAC,GAAK8C,SAAS,CAC1D,CAAC,CAAC,CACF,GAAI,CAAAI,gBAAgB,CAAGF,kBAAkB,EAAE5E,KAAK,CAEhD,GAAI,CAACrC,OAAO,CAAC+D,uBAAuB,CAAE,CACpC,KAAM,CAAAqD,MAAM,CAAGtF,IAAI,CAACI,SAAS,EAAE,CAC/B,GAAIkF,MAAM,EAAEC,iBAAiB,CAAE,CAE7BF,gBAAgB,CAAGC,MAAM,CAACC,iBAAiB,CAACF,gBAAgB,EAAIA,gBAAgB,CAEhF,GAAIJ,SAAS,CAAE,CAEb,KAAM,CAAAO,6BAA6B,CACjCF,MAAM,CAACC,iBAAiB,GAAGN,SAAS,CAAC,EAAEI,gBAAgB,CAEzDA,gBAAgB,CAAGG,6BAA6B,EAAIH,gBAAgB,C,GAK1E,GAAIA,gBAAgB,CAAE,CACpB,KAAM,CAAAK,YAAY,CAAG1F,IAAI,CAACS,QAAQ,CAAC2E,IAAI,CAAE5C,KAAK,EAAKA,KAAK,CAACjC,KAAK,GAAK8E,gBAAgB,CAAC,CACpF,GAAI,CAACK,YAAY,CAAE,CACjB,KAAM,CAAAC,kBAAkB,CAAG3F,IAAI,CAACS,QAAQ,CACrCmE,MAAM,CAAEpC,KAAK,EAAK,CAACA,KAAK,CAACb,SAAS,CAAC,CACnCyC,GAAG,CAAE5B,KAAK,EAAK,IAAIA,KAAK,CAACjC,KAAK,GAAG,CAAC,CAClC6C,IAAI,CAAC,IAAI,CAAC,CAEb,GAAI6B,SAAS,CAAE,CACb,KAAM,IAAI,CAAA3D,KAAK,CACb,UAAUtB,IAAI,CAACM,UAAU,kCAAkC+E,gBAAgB,iBAAiBJ,SAAS,0BAA0BU,kBAAkB,EAAE,CACpJ,C,CACF,IAAM,CACL,KAAM,IAAI,CAAArE,KAAK,CACb,UAAUtB,IAAI,CAACM,UAAU,kCAAkC+E,gBAAgB,yBAAyBM,kBAAkB,EAAE,CACzH,C,EAKL3F,IAAI,CAACqF,gBAAgB,CAAGA,gBAAgB,CACxCI,WAAW,CAACzG,IAAI,CAAC0G,YAAY,CAACpF,UAAU,CAAC,C,CAG3C,IAAK,KAAM,CAAAkC,KAAK,GAAI,CAAAxC,IAAI,CAACS,QAAQ,CAAE,CACjCjC,wCAAwC,CAACgE,KAAK,CAAEtE,OAAO,CAAEuH,WAAW,CAAC,C,EAG3E,CAEA,QAAS,CAAAzD,eAAeA,CAACK,MAAmB,EAC1C,KAAM,CAAA9B,KAAK,CAAG8B,MAAM,CAACA,MAAM,CAACQ,MAAM,CAAG,CAAC,CAAC,CAEvC,GAAI,CAACR,MAAM,CAAC,CAAC,CAAC,CAAE,CACd,KAAM,IAAI,CAAAf,KAAK,CACb,YAAYf,KAAK,CAACD,UAAU,sEAAsE,CACnG,C,CAKH,MAAO,CAAA+B,MAAM,CAACA,MAAM,CAACQ,MAAM,CAAG,CAAC,CAAC,CAClC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}