{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"@babel/runtime/helpers/defineProperty\");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.stateCache=exports.getLinkingConfig=exports.getNavigationConfig=void 0;const native_1=require(\"@react-navigation/native\");const expo_modules_core_1=require(\"expo-modules-core\");const getReactNavigationConfig_1=require(\"./getReactNavigationConfig\");const linking_1=require(\"./link/linking\");function getNavigationConfig(routes,metaOnly=true){return(0,getReactNavigationConfig_1.getReactNavigationConfig)(routes,metaOnly);}exports.getNavigationConfig=getNavigationConfig;function getLinkingConfig(routes,context,{metaOnly=true,serverUrl}={}){let hasCachedInitialUrl=false;let initialUrl;const nativeLinkingKey=context.keys().find(key=>key.match(/^\\.\\/\\+native-intent\\.[tj]sx?$/));const nativeLinking=nativeLinkingKey?context(nativeLinkingKey):undefined;return{prefixes:[],config:getNavigationConfig(routes,metaOnly),getInitialURL(){if(!hasCachedInitialUrl){if(expo_modules_core_1.Platform.OS==='web'){initialUrl=serverUrl??(0,linking_1.getInitialURL)();}else{initialUrl=serverUrl??(0,linking_1.getInitialURL)();if(typeof initialUrl==='string'){if(typeof nativeLinking?.redirectSystemPath==='function'){initialUrl=nativeLinking.redirectSystemPath({path:initialUrl,initial:true});}}else if(initialUrl){initialUrl=initialUrl.then(url=>{if(url&&typeof nativeLinking?.redirectSystemPath==='function'){return nativeLinking.redirectSystemPath({path:url,initial:true});}return url;});}}hasCachedInitialUrl=true;}return initialUrl;},subscribe:(0,linking_1.addEventListener)(nativeLinking),getStateFromPath:getStateFromPathMemoized,getPathFromState(state,options){return(0,linking_1.getPathFromState)(state,_objectSpread(_objectSpread({screens:{}},this.config),options))??'/';},getActionFromState:native_1.getActionFromState};}exports.getLinkingConfig=getLinkingConfig;exports.stateCache=new Map();function getStateFromPathMemoized(path,options){const cached=exports.stateCache.get(path);if(cached){return cached;}const result=(0,linking_1.getStateFromPath)(path,options);exports.stateCache.set(path,result);return result;}","map":{"version":3,"names":["native_1","require","expo_modules_core_1","getReactNavigationConfig_1","linking_1","getNavigationConfig","routes","metaOnly","getReactNavigationConfig","exports","getLinkingConfig","context","serverUrl","hasCachedInitialUrl","initialUrl","nativeLinkingKey","keys","find","key","match","nativeLinking","undefined","prefixes","config","getInitialURL","Platform","OS","redirectSystemPath","path","initial","then","url","subscribe","addEventListener","getStateFromPath","getStateFromPathMemoized","getPathFromState","state","options","_objectSpread","screens","getActionFromState","stateCache","Map","cached","get","result","set"],"sources":["/Users/apple/FounderFinder/node_modules/expo-router/src/getLinkingConfig.ts"],"sourcesContent":["import { getActionFromState, LinkingOptions } from '@react-navigation/native';\nimport { Platform } from 'expo-modules-core';\n\nimport { RouteNode } from './Route';\nimport { State } from './fork/getPathFromState';\nimport { getReactNavigationConfig } from './getReactNavigationConfig';\nimport {\n  addEventListener,\n  getInitialURL,\n  getPathFromState,\n  getStateFromPath,\n} from './link/linking';\nimport { NativeIntent, RequireContext } from './types';\n\nexport function getNavigationConfig(routes: RouteNode, metaOnly: boolean = true) {\n  return getReactNavigationConfig(routes, metaOnly);\n}\n\nexport type ExpoLinkingOptions<T extends object = Record<string, unknown>> = LinkingOptions<T> & {\n  getPathFromState?: typeof getPathFromState;\n};\n\nexport type LinkingConfigOptions = {\n  metaOnly?: boolean;\n  serverUrl?: string;\n  getInitialURL?: typeof getInitialURL;\n};\n\nexport function getLinkingConfig(\n  routes: RouteNode,\n  context: RequireContext,\n  { metaOnly = true, serverUrl }: LinkingConfigOptions = {}\n): ExpoLinkingOptions {\n  // Returning `undefined` / `null from `getInitialURL` are valid values, so we need to track if it's been called.\n  let hasCachedInitialUrl = false;\n  let initialUrl: ReturnType<typeof getInitialURL> | undefined;\n\n  const nativeLinkingKey = context\n    .keys()\n    .find((key) => key.match(/^\\.\\/\\+native-intent\\.[tj]sx?$/));\n  const nativeLinking: NativeIntent | undefined = nativeLinkingKey\n    ? context(nativeLinkingKey)\n    : undefined;\n\n  return {\n    prefixes: [],\n    config: getNavigationConfig(routes, metaOnly),\n    // A custom getInitialURL is used on native to ensure the app always starts at\n    // the root path if it's launched from something other than a deep link.\n    // This helps keep the native functionality working like the web functionality.\n    // For example, if you had a root navigator where the first screen was `/settings` and the second was `/index`\n    // then `/index` would be used on web and `/settings` would be used on native.\n    getInitialURL() {\n      // Expo Router calls `getInitialURL` twice, which may confuse the user if they provide a custom `getInitialURL`.\n      // Therefor we memoize the result.\n      if (!hasCachedInitialUrl) {\n        if (Platform.OS === 'web') {\n          initialUrl = serverUrl ?? getInitialURL();\n        } else {\n          initialUrl = serverUrl ?? getInitialURL();\n\n          if (typeof initialUrl === 'string') {\n            if (typeof nativeLinking?.redirectSystemPath === 'function') {\n              initialUrl = nativeLinking.redirectSystemPath({ path: initialUrl, initial: true });\n            }\n          } else if (initialUrl) {\n            initialUrl = initialUrl.then((url) => {\n              if (url && typeof nativeLinking?.redirectSystemPath === 'function') {\n                return nativeLinking.redirectSystemPath({ path: url, initial: true });\n              }\n              return url;\n            });\n          }\n        }\n        hasCachedInitialUrl = true;\n      }\n      return initialUrl;\n    },\n    subscribe: addEventListener(nativeLinking),\n    getStateFromPath: getStateFromPathMemoized,\n    getPathFromState(state: State, options: Parameters<typeof getPathFromState>[1]) {\n      return (\n        getPathFromState(state, {\n          screens: {},\n          ...this.config,\n          ...options,\n        }) ?? '/'\n      );\n    },\n    // Add all functions to ensure the types never need to fallback.\n    // This is a convenience for usage in the package.\n    getActionFromState,\n  };\n}\n\nexport const stateCache = new Map<string, any>();\n\n/** We can reduce work by memoizing the state by the pathname. This only works because the options (linking config) theoretically never change.  */\nfunction getStateFromPathMemoized(path: string, options: Parameters<typeof getStateFromPath>[1]) {\n  const cached = stateCache.get(path);\n  if (cached) {\n    return cached;\n  }\n  const result = getStateFromPath(path, options);\n  stateCache.set(path, result);\n  return result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}