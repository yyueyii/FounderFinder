{"ast":null,"code":"import{getPathFromState,NavigationContainerRefContext,NavigationHelpersContext}from'@react-navigation/core';import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import LinkingContext from'./LinkingContext';import useLinkTo from'./useLinkTo';const getStateFromParams=params=>{if(params!==null&&params!==void 0&&params.state){return params.state;}if(params!==null&&params!==void 0&&params.screen){return{routes:[{name:params.screen,params:params.params,state:params.screen?getStateFromParams(params.params):undefined}]};}return undefined;};export default function useLinkProps(_ref){let{to,action}=_ref;const root=React.useContext(NavigationContainerRefContext);const navigation=React.useContext(NavigationHelpersContext);const{options}=React.useContext(LinkingContext);const linkTo=useLinkTo();const onPress=e=>{var _e$currentTarget;let shouldHandle=false;if(false||!e){shouldHandle=e?!e.defaultPrevented:true;}else if(!e.defaultPrevented&&!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&(e.button==null||e.button===0)&&[undefined,null,'','self'].includes((_e$currentTarget=e.currentTarget)===null||_e$currentTarget===void 0?void 0:_e$currentTarget.target)){e.preventDefault();shouldHandle=true;}if(shouldHandle){if(action){if(navigation){navigation.dispatch(action);}else if(root){root.dispatch(action);}else{throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");}}else{linkTo(to);}}};const getPathFromStateHelper=(options===null||options===void 0?void 0:options.getPathFromState)??getPathFromState;const href=typeof to==='string'?to:getPathFromStateHelper({routes:[{name:to.screen,params:to.params,state:getStateFromParams(to.params)}]},options===null||options===void 0?void 0:options.config);return{href,accessibilityRole:'link',onPress};}","map":{"version":3,"names":["getPathFromState","NavigationContainerRefContext","NavigationHelpersContext","React","Platform","LinkingContext","useLinkTo","getStateFromParams","params","state","screen","routes","name","undefined","useLinkProps","_ref","to","action","root","useContext","navigation","options","linkTo","onPress","e","_e$currentTarget","shouldHandle","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","includes","currentTarget","target","preventDefault","dispatch","Error","getPathFromStateHelper","href","config","accessibilityRole"],"sources":["/Users/apple/FounderFinder/node_modules/@react-navigation/native/src/useLinkProps.tsx"],"sourcesContent":["import {\n  getPathFromState,\n  NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n  NavigatorScreenParams,\n  ParamListBase,\n} from '@react-navigation/core';\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport LinkingContext from './LinkingContext';\nimport useLinkTo, { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n};\n\nconst getStateFromParams = (\n  params: NavigatorScreenParams<ParamListBase, NavigationState> | undefined\n): PartialState<NavigationState> | NavigationState | undefined => {\n  if (params?.state) {\n    return params.state;\n  }\n\n  if (params?.screen) {\n    return {\n      routes: [\n        {\n          name: params.screen,\n          params: params.params,\n          // @ts-expect-error\n          state: params.screen\n            ? getStateFromParams(\n                params.params as\n                  | NavigatorScreenParams<ParamListBase, NavigationState>\n                  | undefined\n              )\n            : undefined,\n        },\n      ],\n    };\n  }\n\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps<\n  ParamList extends ReactNavigation.RootParamList\n>({ to, action }: Props<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const { options } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo<ParamList>();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n\n  const href =\n    typeof to === 'string'\n      ? to\n      : getPathFromStateHelper(\n          {\n            routes: [\n              {\n                name: to.screen,\n                // @ts-expect-error\n                params: to.params,\n                // @ts-expect-error\n                state: getStateFromParams(to.params),\n              },\n            ],\n          },\n          options?.config\n        );\n\n  return {\n    href,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}