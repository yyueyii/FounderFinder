{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";const _excluded=[\"defaultStatus\"];function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import{nanoid}from'nanoid/non-secure';import TabRouter,{TabActions}from'./TabRouter';export const DrawerActions=_objectSpread(_objectSpread({},TabActions),{},{openDrawer(){return{type:'OPEN_DRAWER'};},closeDrawer(){return{type:'CLOSE_DRAWER'};},toggleDrawer(){return{type:'TOGGLE_DRAWER'};}});export default function DrawerRouter(_ref){let{defaultStatus='closed'}=_ref,rest=_objectWithoutProperties(_ref,_excluded);const router=TabRouter(rest);const isDrawerInHistory=state=>{var _state$history;return Boolean((_state$history=state.history)===null||_state$history===void 0?void 0:_state$history.some(it=>it.type==='drawer'));};const addDrawerToHistory=state=>{if(isDrawerInHistory(state)){return state;}return _objectSpread(_objectSpread({},state),{},{history:[...state.history,{type:'drawer',status:defaultStatus==='open'?'closed':'open'}]});};const removeDrawerFromHistory=state=>{if(!isDrawerInHistory(state)){return state;}return _objectSpread(_objectSpread({},state),{},{history:state.history.filter(it=>it.type!=='drawer')});};const openDrawer=state=>{if(defaultStatus==='open'){return removeDrawerFromHistory(state);}return addDrawerToHistory(state);};const closeDrawer=state=>{if(defaultStatus==='open'){return addDrawerToHistory(state);}return removeDrawerFromHistory(state);};return _objectSpread(_objectSpread({},router),{},{type:'drawer',getInitialState(_ref2){let{routeNames,routeParamList,routeGetIdList}=_ref2;const state=router.getInitialState({routeNames,routeParamList,routeGetIdList});return _objectSpread(_objectSpread({},state),{},{default:defaultStatus,stale:false,type:'drawer',key:`drawer-${nanoid()}`});},getRehydratedState(partialState,_ref3){let{routeNames,routeParamList,routeGetIdList}=_ref3;if(partialState.stale===false){return partialState;}let state=router.getRehydratedState(partialState,{routeNames,routeParamList,routeGetIdList});if(isDrawerInHistory(partialState)){state=removeDrawerFromHistory(state);state=addDrawerToHistory(state);}return _objectSpread(_objectSpread({},state),{},{default:defaultStatus,type:'drawer',key:`drawer-${nanoid()}`});},getStateForRouteFocus(state,key){const result=router.getStateForRouteFocus(state,key);return closeDrawer(result);},getStateForAction(state,action,options){switch(action.type){case'OPEN_DRAWER':return openDrawer(state);case'CLOSE_DRAWER':return closeDrawer(state);case'TOGGLE_DRAWER':if(isDrawerInHistory(state)){return removeDrawerFromHistory(state);}return addDrawerToHistory(state);case'JUMP_TO':case'NAVIGATE':{const result=router.getStateForAction(state,action,options);if(result!=null&&result.index!==state.index){return closeDrawer(result);}return result;}case'GO_BACK':if(isDrawerInHistory(state)){return removeDrawerFromHistory(state);}return router.getStateForAction(state,action,options);default:return router.getStateForAction(state,action,options);}},actionCreators:DrawerActions});}","map":{"version":3,"names":["nanoid","TabRouter","TabActions","DrawerActions","_objectSpread","openDrawer","type","closeDrawer","toggleDrawer","DrawerRouter","_ref","defaultStatus","rest","_objectWithoutProperties","_excluded","router","isDrawerInHistory","state","_state$history","Boolean","history","some","it","addDrawerToHistory","status","removeDrawerFromHistory","filter","getInitialState","_ref2","routeNames","routeParamList","routeGetIdList","default","stale","key","getRehydratedState","partialState","_ref3","getStateForRouteFocus","result","getStateForAction","action","options","index","actionCreators"],"sources":["/Users/apple/FounderFinder/node_modules/@react-navigation/routers/src/DrawerRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport TabRouter, {\n  TabActionHelpers,\n  TabActions,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\nexport type DrawerStatus = 'open' | 'closed';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: DrawerStatus;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * Default status of the drawer.\n   */\n  default: DrawerStatus;\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: DrawerStatus }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nexport default function DrawerRouter({\n  defaultStatus = 'closed',\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  const isDrawerInHistory = (\n    state:\n      | DrawerNavigationState<ParamListBase>\n      | PartialState<DrawerNavigationState<ParamListBase>>\n  ) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\n  const addDrawerToHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: [\n        ...state.history,\n        {\n          type: 'drawer',\n          status: defaultStatus === 'open' ? 'closed' : 'open',\n        },\n      ],\n    };\n  };\n\n  const removeDrawerFromHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: state.history.filter((it) => it.type !== 'drawer'),\n    };\n  };\n\n  const openDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      return {\n        ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return {\n        ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          const result = router.getStateForAction(state, action, options);\n\n          if (result != null && result.index !== state.index) {\n            return closeDrawer(result as DrawerNavigationState<ParamListBase>);\n          }\n\n          return result;\n        }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}