{"ast":null,"code":"import{useRef,useMemo,useEffect}from'react';export function useReleasingSharedObject(factory,dependencies){const objectRef=useRef(null);const isFastRefresh=useRef(false);const previousDependencies=useRef(dependencies);if(objectRef.current==null){objectRef.current=factory();}const object=useMemo(()=>{let newObject=objectRef.current;const dependenciesAreEqual=previousDependencies.current?.length===dependencies.length&&dependencies.every((value,index)=>value===previousDependencies.current[index]);if(!newObject||!dependenciesAreEqual){objectRef.current?.release();newObject=factory();objectRef.current=newObject;previousDependencies.current=dependencies;}else{isFastRefresh.current=true;}return newObject;},dependencies);useEffect(()=>{isFastRefresh.current=false;return()=>{if(!isFastRefresh.current&&objectRef.current){objectRef.current.release();}};},[]);return object;}","map":{"version":3,"names":["useRef","useMemo","useEffect","useReleasingSharedObject","factory","dependencies","objectRef","isFastRefresh","previousDependencies","current","object","newObject","dependenciesAreEqual","length","every","value","index","release"],"sources":["/Users/apple/FounderFinder/node_modules/expo-modules-core/src/hooks/useReleasingSharedObject.ts"],"sourcesContent":["import { DependencyList, useRef, useMemo, useEffect } from 'react';\n\nimport type { SharedObject } from '../ts-declarations/SharedObject';\n\n/**\n * Returns a shared object, which is automatically cleaned up when the component is unmounted.\n */\nexport function useReleasingSharedObject<TSharedObject extends SharedObject>(\n  factory: () => TSharedObject,\n  dependencies: DependencyList\n): TSharedObject {\n  const objectRef = useRef<TSharedObject | null>(null);\n  const isFastRefresh = useRef(false);\n  const previousDependencies = useRef<DependencyList>(dependencies);\n\n  if (objectRef.current == null) {\n    objectRef.current = factory();\n  }\n\n  const object = useMemo(() => {\n    let newObject = objectRef.current;\n    const dependenciesAreEqual =\n      previousDependencies.current?.length === dependencies.length &&\n      dependencies.every((value, index) => value === previousDependencies.current[index]);\n\n    // If the dependencies have changed, release the previous object and create a new one, otherwise this has been called\n    // because of a fast refresh, and we don't want to release the object.\n    if (!newObject || !dependenciesAreEqual) {\n      objectRef.current?.release();\n      newObject = factory();\n      objectRef.current = newObject;\n      previousDependencies.current = dependencies;\n    } else {\n      isFastRefresh.current = true;\n    }\n    return newObject;\n  }, dependencies);\n\n  useEffect(() => {\n    isFastRefresh.current = false;\n\n    return () => {\n      // This will be called on every fast refresh and on unmount, but we only want to release the object on unmount.\n      if (!isFastRefresh.current && objectRef.current) {\n        objectRef.current.release();\n      }\n    };\n  }, []);\n\n  return object;\n}\n"],"mappings":"AAAA,OAAyBA,MAAM,CAAEC,OAAO,CAAEC,SAAS,KAAQ,OAAO,CAOlE,MAAM,SAAU,CAAAC,wBAAwBA,CACtCC,OAA4B,CAC5BC,YAA4B,EAE5B,KAAM,CAAAC,SAAS,CAAGN,MAAM,CAAuB,IAAI,CAAC,CACpD,KAAM,CAAAO,aAAa,CAAGP,MAAM,CAAC,KAAK,CAAC,CACnC,KAAM,CAAAQ,oBAAoB,CAAGR,MAAM,CAAiBK,YAAY,CAAC,CAEjE,GAAIC,SAAS,CAACG,OAAO,EAAI,IAAI,CAAE,CAC7BH,SAAS,CAACG,OAAO,CAAGL,OAAO,EAAE,C,CAG/B,KAAM,CAAAM,MAAM,CAAGT,OAAO,CAAC,IAAK,CAC1B,GAAI,CAAAU,SAAS,CAAGL,SAAS,CAACG,OAAO,CACjC,KAAM,CAAAG,oBAAoB,CACxBJ,oBAAoB,CAACC,OAAO,EAAEI,MAAM,GAAKR,YAAY,CAACQ,MAAM,EAC5DR,YAAY,CAACS,KAAK,CAAC,CAACC,KAAK,CAAEC,KAAK,GAAKD,KAAK,GAAKP,oBAAoB,CAACC,OAAO,CAACO,KAAK,CAAC,CAAC,CAIrF,GAAI,CAACL,SAAS,EAAI,CAACC,oBAAoB,CAAE,CACvCN,SAAS,CAACG,OAAO,EAAEQ,OAAO,EAAE,CAC5BN,SAAS,CAAGP,OAAO,EAAE,CACrBE,SAAS,CAACG,OAAO,CAAGE,SAAS,CAC7BH,oBAAoB,CAACC,OAAO,CAAGJ,YAAY,C,CAC5C,IAAM,CACLE,aAAa,CAACE,OAAO,CAAG,IAAI,C,CAE9B,MAAO,CAAAE,SAAS,CAClB,CAAC,CAAEN,YAAY,CAAC,CAEhBH,SAAS,CAAC,IAAK,CACbK,aAAa,CAACE,OAAO,CAAG,KAAK,CAE7B,MAAO,IAAK,CAEV,GAAI,CAACF,aAAa,CAACE,OAAO,EAAIH,SAAS,CAACG,OAAO,CAAE,CAC/CH,SAAS,CAACG,OAAO,CAACQ,OAAO,EAAE,C,CAE/B,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAAP,MAAM,CACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}