{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import escape from'escape-string-regexp';import*as queryString from'query-string';import findFocusedRoute from'./findFocusedRoute';import validatePathConfig from'./validatePathConfig';export default function getStateFromPath(path,options){if(options){validatePathConfig(options);}let initialRoutes=[];if(options!==null&&options!==void 0&&options.initialRouteName){initialRoutes.push({initialRouteName:options.initialRouteName,parentScreens:[]});}const screens=options===null||options===void 0?void 0:options.screens;let remaining=path.replace(/\\/+/g,'/').replace(/^\\//,'').replace(/\\?.*$/,'');remaining=remaining.endsWith('/')?remaining:`${remaining}/`;if(screens===undefined){const routes=remaining.split('/').filter(Boolean).map(segment=>{const name=decodeURIComponent(segment);return{name};});if(routes.length){return createNestedStateObject(path,routes,initialRoutes);}return undefined;}const configs=[].concat(...Object.keys(screens).map(key=>createNormalizedConfigs(key,screens,[],initialRoutes,[]))).sort((a,b)=>{if(a.pattern===b.pattern){return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));}if(a.pattern.startsWith(b.pattern)){return-1;}if(b.pattern.startsWith(a.pattern)){return 1;}const aParts=a.pattern.split('/');const bParts=b.pattern.split('/');for(let i=0;i<Math.max(aParts.length,bParts.length);i++){if(aParts[i]==null){return 1;}if(bParts[i]==null){return-1;}const aWildCard=aParts[i]==='*'||aParts[i].startsWith(':');const bWildCard=bParts[i]==='*'||bParts[i].startsWith(':');if(aWildCard&&bWildCard){continue;}if(aWildCard){return 1;}if(bWildCard){return-1;}}return bParts.length-aParts.length;});configs.reduce((acc,config)=>{if(acc[config.pattern]){const a=acc[config.pattern].routeNames;const b=config.routeNames;const intersects=a.length>b.length?b.every((it,i)=>a[i]===it):a.every((it,i)=>b[i]===it);if(!intersects){throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);}}return Object.assign(acc,{[config.pattern]:config});},{});if(remaining==='/'){const match=configs.find(config=>config.path===''&&config.routeNames.every(name=>{var _configs$find;return!((_configs$find=configs.find(c=>c.screen===name))!==null&&_configs$find!==void 0&&_configs$find.path);}));if(match){return createNestedStateObject(path,match.routeNames.map(name=>({name})),initialRoutes,configs);}return undefined;}let result;let current;const{routes,remainingPath}=matchAgainstConfigs(remaining,configs.map(c=>_objectSpread(_objectSpread({},c),{},{regex:c.regex?new RegExp(c.regex.source+'$'):undefined})));if(routes!==undefined){current=createNestedStateObject(path,routes,initialRoutes,configs);remaining=remainingPath;result=current;}if(current==null||result==null){return undefined;}return result;}const joinPaths=function(){for(var _len=arguments.length,paths=new Array(_len),_key=0;_key<_len;_key++){paths[_key]=arguments[_key];}return[].concat(...paths.map(p=>p.split('/'))).filter(Boolean).join('/');};const matchAgainstConfigs=(remaining,configs)=>{let routes;let remainingPath=remaining;for(const config of configs){if(!config.regex){continue;}const match=remainingPath.match(config.regex);if(match){var _config$pattern;const matchResult=(_config$pattern=config.pattern)===null||_config$pattern===void 0?void 0:_config$pattern.split('/').reduce((acc,p,index)=>{if(!p.startsWith(':')){return acc;}acc.pos+=1;const decodedParamSegment=decodeURIComponent(match[(acc.pos+1)*2].replace(/\\/$/,''));Object.assign(acc.matchedParams,{[p]:Object.assign(acc.matchedParams[p]||{},{[index]:decodedParamSegment})});return acc;},{pos:-1,matchedParams:{}});const matchedParams=matchResult.matchedParams||{};routes=config.routeNames.map(name=>{var _routeConfig$pattern$;const routeConfig=configs.find(c=>{return c.screen===name&&config.pattern.startsWith(c.pattern);});const normalizedPath=routeConfig===null||routeConfig===void 0?void 0:routeConfig.path.split('/').filter(Boolean).join('/');const numInitialSegments=routeConfig===null||routeConfig===void 0?void 0:(_routeConfig$pattern$=routeConfig.pattern.replace(new RegExp(`${escape(normalizedPath)}$`),''))===null||_routeConfig$pattern$===void 0?void 0:_routeConfig$pattern$.split('/').length;const params=normalizedPath===null||normalizedPath===void 0?void 0:normalizedPath.split('/').reduce((acc,p,index)=>{var _matchedParams$p;if(!p.startsWith(':')){return acc;}const offset=numInitialSegments?numInitialSegments-1:0;const value=(_matchedParams$p=matchedParams[p])===null||_matchedParams$p===void 0?void 0:_matchedParams$p[index+offset];if(value){var _routeConfig$parse;const key=p.replace(/^:/,'').replace(/\\?$/,'');acc[key]=routeConfig!==null&&routeConfig!==void 0&&(_routeConfig$parse=routeConfig.parse)!==null&&_routeConfig$parse!==void 0&&_routeConfig$parse[key]?routeConfig.parse[key](value):value;}return acc;},{});if(params&&Object.keys(params).length){return{name,params};}return{name};});remainingPath=remainingPath.replace(match[1],'');break;}}return{routes,remainingPath};};const createNormalizedConfigs=function(screen,routeConfig){let routeNames=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];let initials=arguments.length>3?arguments[3]:undefined;let parentScreens=arguments.length>4?arguments[4]:undefined;let parentPattern=arguments.length>5?arguments[5]:undefined;const configs=[];routeNames.push(screen);parentScreens.push(screen);const config=routeConfig[screen];if(typeof config==='string'){const pattern=parentPattern?joinPaths(parentPattern,config):config;configs.push(createConfigItem(screen,routeNames,pattern,config));}else if(typeof config==='object'){let pattern;if(typeof config.path==='string'){if(config.exact&&config.path===undefined){throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");}pattern=config.exact!==true?joinPaths(parentPattern||'',config.path||''):config.path||'';configs.push(createConfigItem(screen,routeNames,pattern,config.path,config.parse));}if(config.screens){if(config.initialRouteName){initials.push({initialRouteName:config.initialRouteName,parentScreens});}Object.keys(config.screens).forEach(nestedConfig=>{const result=createNormalizedConfigs(nestedConfig,config.screens,routeNames,initials,[...parentScreens],pattern??parentPattern);configs.push(...result);});}}routeNames.pop();return configs;};const createConfigItem=(screen,routeNames,pattern,path,parse)=>{pattern=pattern.split('/').filter(Boolean).join('/');const regex=pattern?new RegExp(`^(${pattern.split('/').map(it=>{if(it.startsWith(':')){return`(([^/]+\\\\/)${it.endsWith('?')?'?':''})`;}return`${it==='*'?'.*':escape(it)}\\\\/`;}).join('')})`):undefined;return{screen,regex,pattern,path,routeNames:[...routeNames],parse};};const findParseConfigForRoute=(routeName,flatConfig)=>{for(const config of flatConfig){if(routeName===config.routeNames[config.routeNames.length-1]){return config.parse;}}return undefined;};const findInitialRoute=(routeName,parentScreens,initialRoutes)=>{for(const config of initialRoutes){if(parentScreens.length===config.parentScreens.length){let sameParents=true;for(let i=0;i<parentScreens.length;i++){if(parentScreens[i].localeCompare(config.parentScreens[i])!==0){sameParents=false;break;}}if(sameParents){return routeName!==config.initialRouteName?config.initialRouteName:undefined;}}}return undefined;};const createStateObject=(initialRoute,route,isEmpty)=>{if(isEmpty){if(initialRoute){return{index:1,routes:[{name:initialRoute},route]};}else{return{routes:[route]};}}else{if(initialRoute){return{index:1,routes:[{name:initialRoute},_objectSpread(_objectSpread({},route),{},{state:{routes:[]}})]};}else{return{routes:[_objectSpread(_objectSpread({},route),{},{state:{routes:[]}})]};}}};const createNestedStateObject=(path,routes,initialRoutes,flatConfig)=>{let state;let route=routes.shift();const parentScreens=[];let initialRoute=findInitialRoute(route.name,parentScreens,initialRoutes);parentScreens.push(route.name);state=createStateObject(initialRoute,route,routes.length===0);if(routes.length>0){let nestedState=state;while(route=routes.shift()){initialRoute=findInitialRoute(route.name,parentScreens,initialRoutes);const nestedStateIndex=nestedState.index||nestedState.routes.length-1;nestedState.routes[nestedStateIndex].state=createStateObject(initialRoute,route,routes.length===0);if(routes.length>0){nestedState=nestedState.routes[nestedStateIndex].state;}parentScreens.push(route.name);}}route=findFocusedRoute(state);route.path=path;const params=parseQueryParams(path,flatConfig?findParseConfigForRoute(route.name,flatConfig):undefined);if(params){route.params=_objectSpread(_objectSpread({},route.params),params);}return state;};const parseQueryParams=(path,parseConfig)=>{const query=path.split('?')[1];const params=queryString.parse(query);if(parseConfig){Object.keys(params).forEach(name=>{if(Object.hasOwnProperty.call(parseConfig,name)&&typeof params[name]==='string'){params[name]=parseConfig[name](params[name]);}});}return Object.keys(params).length?params:undefined;};","map":{"version":3,"names":["escape","queryString","findFocusedRoute","validatePathConfig","getStateFromPath","path","options","initialRoutes","initialRouteName","push","parentScreens","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","name","decodeURIComponent","length","createNestedStateObject","configs","concat","Object","keys","key","createNormalizedConfigs","sort","a","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","i","Math","max","aWildCard","bWildCard","reduce","acc","config","intersects","every","it","Error","assign","match","find","_configs$find","c","screen","result","current","remainingPath","matchAgainstConfigs","_objectSpread","regex","RegExp","source","joinPaths","_len","arguments","paths","Array","_key","p","_config$pattern","matchResult","index","pos","decodedParamSegment","matchedParams","_routeConfig$pattern$","routeConfig","normalizedPath","numInitialSegments","params","_matchedParams$p","offset","value","_routeConfig$parse","parse","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","pop","findParseConfigForRoute","routeName","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","route","isEmpty","state","shift","nestedState","nestedStateIndex","parseQueryParams","parseConfig","query","hasOwnProperty","call"],"sources":["/Users/apple/FounderFinder/node_modules/@react-navigation/core/src/getStateFromPath.tsx"],"sourcesContent":["import type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport findFocusedRoute from './findFocusedRoute';\nimport type { PathConfigMap } from './types';\nimport validatePathConfig from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath<ParamList extends {}>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = options?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          key,\n          screens as PathConfigMap<object>,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        path,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(\n    remaining,\n    configs.map((c) => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n    }))\n  );\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchResult = config.pattern?.split('/').reduce<{\n        pos: number; // Position of the current path param segment in the path (e.g in pattern `a/:b/:c`, `:a` is 0 and `:b` is 1)\n        matchedParams: Record<string, Record<string, string>>; // The extracted params\n      }>(\n        (acc, p, index) => {\n          if (!p.startsWith(':')) {\n            return acc;\n          }\n\n          // Path parameter so increment position for the segment\n          acc.pos += 1;\n\n          const decodedParamSegment = decodeURIComponent(\n            // The param segments appear every second item starting from 2 in the regex match result\n            match![(acc.pos + 1) * 2]\n              // Remove trailing slash\n              .replace(/\\/$/, '')\n          );\n\n          Object.assign(acc.matchedParams, {\n            [p]: Object.assign(acc.matchedParams[p] || {}, {\n              [index]: decodedParamSegment,\n            }),\n          });\n\n          return acc;\n        },\n        { pos: -1, matchedParams: {} }\n      );\n\n      const matchedParams = matchResult.matchedParams || {};\n\n      routes = config.routeNames.map((name) => {\n        const routeConfig = configs.find((c) => {\n          // Check matching name AND pattern in case same screen is used at different levels in config\n          return c.screen === name && config.pattern.startsWith(c.pattern);\n        });\n\n        // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n        const normalizedPath = routeConfig?.path\n          .split('/')\n          .filter(Boolean)\n          .join('/');\n\n        // Get the number of segments in the initial pattern\n        const numInitialSegments = routeConfig?.pattern\n          // Extract the prefix from the pattern by removing the ending path pattern (e.g pattern=`a/b/c/d` and normalizedPath=`c/d` becomes `a/b`)\n          .replace(new RegExp(`${escape(normalizedPath!)}$`), '')\n          ?.split('/').length;\n\n        const params = normalizedPath\n          ?.split('/')\n          .reduce<Record<string, unknown>>((acc, p, index) => {\n            if (!p.startsWith(':')) {\n              return acc;\n            }\n\n            // Get the real index of the path parameter in the matched path\n            // by offsetting by the number of segments in the initial pattern\n            const offset = numInitialSegments ? numInitialSegments - 1 : 0;\n            const value = matchedParams[p]?.[index + offset];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = routeConfig?.parse?.[key]\n                ? routeConfig.parse[key](value)\n                : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  route.path = path;\n\n  const params = parseQueryParams(\n    path,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (\n        Object.hasOwnProperty.call(parseConfig, name) &&\n        typeof params[name] === 'string'\n      ) {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}