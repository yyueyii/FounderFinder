{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"@babel/runtime/helpers/defineProperty\");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;var desc=Object.getOwnPropertyDescriptor(m,k);if(!desc||(\"get\"in desc?!m.__esModule:desc.writable||desc.configurable)){desc={enumerable:true,get:function(){return m[k];}};}Object.defineProperty(o,k2,desc);}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k];});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,\"default\",{enumerable:true,value:v});}:function(o,v){o[\"default\"]=v;});var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod)if(k!==\"default\"&&Object.prototype.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);__setModuleDefault(result,mod);return result;};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.useInitializeExpoRouter=exports.useStoreRouteInfo=exports.useStoreRootState=exports.useExpoRouter=exports.store=exports.RouterStore=void 0;const native_1=require(\"@react-navigation/native\");const expo_constants_1=__importDefault(require(\"expo-constants\"));const SplashScreen=__importStar(require(\"expo-splash-screen\"));const react_1=require(\"react\");const react_native_1=require(\"react-native-web/dist/index\");const routing_1=require(\"./routing\");const sort_routes_1=require(\"./sort-routes\");const LocationProvider_1=require(\"../LocationProvider\");const getPathFromState_1=require(\"../fork/getPathFromState\");const getLinkingConfig_1=require(\"../getLinkingConfig\");const getRoutes_1=require(\"../getRoutes\");const useScreens_1=require(\"../useScreens\");class RouterStore{hasAttemptedToHideSplash=false;rootStateSubscribers=new Set();storeSubscribers=new Set();linkTo=routing_1.linkTo.bind(this);getSortedRoutes=sort_routes_1.getSortedRoutes.bind(this);goBack=routing_1.goBack.bind(this);canGoBack=routing_1.canGoBack.bind(this);push=routing_1.push.bind(this);dismiss=routing_1.dismiss.bind(this);replace=routing_1.replace.bind(this);dismissAll=routing_1.dismissAll.bind(this);canDismiss=routing_1.canDismiss.bind(this);setParams=routing_1.setParams.bind(this);navigate=routing_1.navigate.bind(this);initialize(context,navigationRef,linkingConfigOptions={}){this.initialState=undefined;this.rootState=undefined;this.nextState=undefined;this.linking=undefined;this.navigationRefSubscription?.();this.rootStateSubscribers.clear();this.storeSubscribers.clear();this.routeNode=(0,getRoutes_1.getRoutes)(context,_objectSpread(_objectSpread({},expo_constants_1.default.expoConfig?.extra?.router),{},{ignoreEntryPoints:true,platform:react_native_1.Platform.OS}));this.routeInfo={unstable_globalHref:'',pathname:'',isIndex:false,params:{},segments:[]};if(this.routeNode){this.linking=(0,getLinkingConfig_1.getLinkingConfig)(this.routeNode,context,linkingConfigOptions);this.rootComponent=(0,useScreens_1.getQualifiedRouteComponent)(this.routeNode);const initialURL=this.linking?.getInitialURL?.();if(typeof initialURL==='string'){this.rootState=this.linking.getStateFromPath?.(initialURL,this.linking.config);this.initialState=this.rootState;if(this.rootState){this.routeInfo=this.getRouteInfo(this.rootState);}}}else{if(true){throw new Error('No routes found');}this.rootComponent=react_1.Fragment;}this.navigationRef=navigationRef;this.navigationRefSubscription=navigationRef.addListener('state',data=>{const state=data.data.state;if(!this.hasAttemptedToHideSplash){this.hasAttemptedToHideSplash=true;this.splashScreenAnimationFrame=requestAnimationFrame(()=>{SplashScreen._internal_maybeHideAsync?.();});}let shouldUpdateSubscribers=this.nextState===state;this.nextState=undefined;if(state&&state!==this.rootState){exports.store.updateState(state,undefined);shouldUpdateSubscribers=true;}if(shouldUpdateSubscribers){for(const subscriber of this.rootStateSubscribers){subscriber();}}});for(const subscriber of this.storeSubscribers){subscriber();}}updateState(state,nextState=state){exports.store.rootState=state;exports.store.nextState=nextState;const nextRouteInfo=exports.store.getRouteInfo(state);if(!(0,getPathFromState_1.deepEqual)(this.routeInfo,nextRouteInfo)){exports.store.routeInfo=nextRouteInfo;}}getRouteInfo(state){return(0,LocationProvider_1.getRouteInfoFromState)((state,asPath)=>{return(0,getPathFromState_1.getPathDataFromState)(state,_objectSpread(_objectSpread({screens:{}},this.linking?.config),{},{preserveDynamicRoutes:asPath,preserveGroups:asPath}));},state);}shouldShowTutorial(){return!this.routeNode&&false;}subscribeToRootState=subscriber=>{this.rootStateSubscribers.add(subscriber);return()=>this.rootStateSubscribers.delete(subscriber);};subscribeToStore=subscriber=>{this.storeSubscribers.add(subscriber);return()=>this.storeSubscribers.delete(subscriber);};snapshot=()=>{return this;};rootStateSnapshot=()=>{return this.rootState;};routeInfoSnapshot=()=>{return this.routeInfo;};cleanup(){if(this.splashScreenAnimationFrame){cancelAnimationFrame(this.splashScreenAnimationFrame);}}}exports.RouterStore=RouterStore;exports.store=new RouterStore();function useExpoRouter(){return(0,react_1.useSyncExternalStore)(exports.store.subscribeToStore,exports.store.snapshot,exports.store.snapshot);}exports.useExpoRouter=useExpoRouter;function syncStoreRootState(){if(exports.store.navigationRef.isReady()){const currentState=exports.store.navigationRef.getRootState();if(exports.store.rootState!==currentState){exports.store.updateState(currentState);}}}function useStoreRootState(){syncStoreRootState();return(0,react_1.useSyncExternalStore)(exports.store.subscribeToRootState,exports.store.rootStateSnapshot,exports.store.rootStateSnapshot);}exports.useStoreRootState=useStoreRootState;function useStoreRouteInfo(){syncStoreRootState();return(0,react_1.useSyncExternalStore)(exports.store.subscribeToRootState,exports.store.routeInfoSnapshot,exports.store.routeInfoSnapshot);}exports.useStoreRouteInfo=useStoreRouteInfo;function useInitializeExpoRouter(context,options){const navigationRef=(0,native_1.useNavigationContainerRef)();(0,react_1.useMemo)(()=>exports.store.initialize(context,navigationRef,options),[context]);useExpoRouter();return exports.store;}exports.useInitializeExpoRouter=useInitializeExpoRouter;","map":{"version":3,"names":["native_1","require","expo_constants_1","__importDefault","SplashScreen","__importStar","react_1","react_native_1","routing_1","sort_routes_1","LocationProvider_1","getPathFromState_1","getLinkingConfig_1","getRoutes_1","useScreens_1","RouterStore","hasAttemptedToHideSplash","rootStateSubscribers","Set","storeSubscribers","linkTo","bind","getSortedRoutes","goBack","canGoBack","push","dismiss","replace","dismissAll","canDismiss","setParams","navigate","initialize","context","navigationRef","linkingConfigOptions","initialState","undefined","rootState","nextState","linking","navigationRefSubscription","clear","routeNode","getRoutes","_objectSpread","default","expoConfig","extra","router","ignoreEntryPoints","platform","Platform","OS","routeInfo","unstable_globalHref","pathname","isIndex","params","segments","getLinkingConfig","rootComponent","getQualifiedRouteComponent","initialURL","getInitialURL","getStateFromPath","config","getRouteInfo","Error","Fragment","addListener","data","state","splashScreenAnimationFrame","requestAnimationFrame","_internal_maybeHideAsync","shouldUpdateSubscribers","exports","store","updateState","subscriber","nextRouteInfo","deepEqual","getRouteInfoFromState","asPath","getPathDataFromState","screens","preserveDynamicRoutes","preserveGroups","shouldShowTutorial","subscribeToRootState","add","delete","subscribeToStore","snapshot","rootStateSnapshot","routeInfoSnapshot","cleanup","cancelAnimationFrame","useExpoRouter","useSyncExternalStore","syncStoreRootState","isReady","currentState","getRootState","useStoreRootState","useStoreRouteInfo","useInitializeExpoRouter","options","useNavigationContainerRef","useMemo"],"sources":["/Users/apple/FounderFinder/node_modules/expo-router/src/global-state/router-store.tsx"],"sourcesContent":["import {\n  NavigationContainerRefWithCurrent,\n  getPathFromState,\n  useNavigationContainerRef,\n} from '@react-navigation/native';\nimport Constants from 'expo-constants';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useSyncExternalStore, useMemo, ComponentType, Fragment } from 'react';\nimport { Platform } from 'react-native';\n\nimport {\n  canGoBack,\n  canDismiss,\n  goBack,\n  linkTo,\n  navigate,\n  dismiss,\n  dismissAll,\n  push,\n  replace,\n  setParams,\n} from './routing';\nimport { getSortedRoutes } from './sort-routes';\nimport { UrlObject, getRouteInfoFromState } from '../LocationProvider';\nimport { RouteNode } from '../Route';\nimport { deepEqual, getPathDataFromState } from '../fork/getPathFromState';\nimport { ResultState } from '../fork/getStateFromPath';\nimport { ExpoLinkingOptions, LinkingConfigOptions, getLinkingConfig } from '../getLinkingConfig';\nimport { getRoutes } from '../getRoutes';\nimport { RequireContext } from '../types';\nimport { getQualifiedRouteComponent } from '../useScreens';\n\n/**\n * This is the global state for the router. It is used to keep track of the current route, and to provide a way to navigate to other routes.\n *\n * There should only be one instance of this class and be initialized via `useInitializeExpoRouter`\n */\nexport class RouterStore {\n  routeNode!: RouteNode | null;\n  rootComponent!: ComponentType;\n  linking?: ExpoLinkingOptions;\n  private hasAttemptedToHideSplash: boolean = false;\n\n  initialState?: ResultState;\n  rootState?: ResultState;\n  nextState?: ResultState;\n  routeInfo?: UrlObject;\n  splashScreenAnimationFrame?: number;\n\n  navigationRef!: NavigationContainerRefWithCurrent<ReactNavigation.RootParamList>;\n  navigationRefSubscription!: () => void;\n\n  rootStateSubscribers = new Set<() => void>();\n  storeSubscribers = new Set<() => void>();\n\n  linkTo = linkTo.bind(this);\n  getSortedRoutes = getSortedRoutes.bind(this);\n  goBack = goBack.bind(this);\n  canGoBack = canGoBack.bind(this);\n  push = push.bind(this);\n  dismiss = dismiss.bind(this);\n  replace = replace.bind(this);\n  dismissAll = dismissAll.bind(this);\n  canDismiss = canDismiss.bind(this);\n  setParams = setParams.bind(this);\n  navigate = navigate.bind(this);\n\n  initialize(\n    context: RequireContext,\n    navigationRef: NavigationContainerRefWithCurrent<ReactNavigation.RootParamList>,\n    linkingConfigOptions: LinkingConfigOptions = {}\n  ) {\n    // Clean up any previous state\n    this.initialState = undefined;\n    this.rootState = undefined;\n    this.nextState = undefined;\n    this.linking = undefined;\n    this.navigationRefSubscription?.();\n    this.rootStateSubscribers.clear();\n    this.storeSubscribers.clear();\n\n    this.routeNode = getRoutes(context, {\n      ...Constants.expoConfig?.extra?.router,\n      ignoreEntryPoints: true,\n      platform: Platform.OS,\n    });\n\n    // We always needs routeInfo, even if there are no routes. This can happen if:\n    //  - there are no routes (we are showing the onboarding screen)\n    //  - getInitialURL() is async\n    this.routeInfo = {\n      unstable_globalHref: '',\n      pathname: '',\n      isIndex: false,\n      params: {},\n      segments: [],\n    };\n\n    if (this.routeNode) {\n      // We have routes, so get the linking config and the root component\n      this.linking = getLinkingConfig(this.routeNode, context, linkingConfigOptions);\n      this.rootComponent = getQualifiedRouteComponent(this.routeNode);\n\n      // By default React Navigation is async and does not render anything in the first pass as it waits for `getInitialURL`\n      // This will cause static rendering to fail, which once performs a single pass.\n      // If the initialURL is a string, we can preload the state and routeInfo, skipping React Navigation's async behavior.\n      const initialURL = this.linking?.getInitialURL?.();\n      if (typeof initialURL === 'string') {\n        this.rootState = this.linking.getStateFromPath?.(initialURL, this.linking.config);\n        this.initialState = this.rootState;\n        if (this.rootState) {\n          this.routeInfo = this.getRouteInfo(this.rootState);\n        }\n      }\n    } else {\n      // Only error in production, in development we will show the onboarding screen\n      if (process.env.NODE_ENV === 'production') {\n        throw new Error('No routes found');\n      }\n\n      // In development, we will show the onboarding screen\n      this.rootComponent = Fragment;\n    }\n\n    /**\n     * Counter intuitively - this fires AFTER both React Navigation's state changes and the subsequent paint.\n     * This poses a couple of issues for Expo Router,\n     *   - Ensuring hooks (e.g. useSearchParams()) have data in the initial render\n     *   - Reacting to state changes after a navigation event\n     *\n     * This is why the initial render renders a Fragment and we wait until `onReady()` is called\n     * Additionally, some hooks compare the state from both the store and the navigationRef. If the store it stale,\n     * that hooks will manually update the store.\n     *\n     */\n    this.navigationRef = navigationRef;\n    this.navigationRefSubscription = navigationRef.addListener('state', (data) => {\n      const state = data.data.state as ResultState;\n\n      if (!this.hasAttemptedToHideSplash) {\n        this.hasAttemptedToHideSplash = true;\n        // NOTE(EvanBacon): `navigationRef.isReady` is sometimes not true when state is called initially.\n        this.splashScreenAnimationFrame = requestAnimationFrame(() => {\n          // @ts-expect-error: This function is native-only and for internal-use only.\n          SplashScreen._internal_maybeHideAsync?.();\n        });\n      }\n\n      let shouldUpdateSubscribers = this.nextState === state;\n      this.nextState = undefined;\n\n      // This can sometimes be undefined when an error is thrown in the Root Layout Route.\n      // Additionally that state may already equal the rootState if it was updated within a hook\n      if (state && state !== this.rootState) {\n        store.updateState(state, undefined);\n        shouldUpdateSubscribers = true;\n      }\n\n      // If the state has changed, or was changed inside a hook we need to update the subscribers\n      if (shouldUpdateSubscribers) {\n        for (const subscriber of this.rootStateSubscribers) {\n          subscriber();\n        }\n      }\n    });\n\n    for (const subscriber of this.storeSubscribers) {\n      subscriber();\n    }\n  }\n\n  updateState(state: ResultState, nextState = state) {\n    store.rootState = state;\n    store.nextState = nextState;\n\n    const nextRouteInfo = store.getRouteInfo(state);\n\n    if (!deepEqual(this.routeInfo, nextRouteInfo)) {\n      store.routeInfo = nextRouteInfo;\n    }\n  }\n\n  getRouteInfo(state: ResultState) {\n    return getRouteInfoFromState(\n      (state: Parameters<typeof getPathFromState>[0], asPath: boolean) => {\n        return getPathDataFromState(state, {\n          screens: {},\n          ...this.linking?.config,\n          preserveDynamicRoutes: asPath,\n          preserveGroups: asPath,\n        });\n      },\n      state\n    );\n  }\n\n  // This is only used in development, to show the onboarding screen\n  // In production we should have errored during the initialization\n  shouldShowTutorial() {\n    return !this.routeNode && process.env.NODE_ENV === 'development';\n  }\n\n  /** Make sure these are arrow functions so `this` is correctly bound */\n  subscribeToRootState = (subscriber: () => void) => {\n    this.rootStateSubscribers.add(subscriber);\n    return () => this.rootStateSubscribers.delete(subscriber);\n  };\n  subscribeToStore = (subscriber: () => void) => {\n    this.storeSubscribers.add(subscriber);\n    return () => this.storeSubscribers.delete(subscriber);\n  };\n  snapshot = () => {\n    return this;\n  };\n  rootStateSnapshot = () => {\n    return this.rootState!;\n  };\n  routeInfoSnapshot = () => {\n    return this.routeInfo!;\n  };\n\n  cleanup() {\n    if (this.splashScreenAnimationFrame) {\n      cancelAnimationFrame(this.splashScreenAnimationFrame);\n    }\n  }\n}\n\nexport const store = new RouterStore();\n\nexport function useExpoRouter() {\n  return useSyncExternalStore(store.subscribeToStore, store.snapshot, store.snapshot);\n}\n\nfunction syncStoreRootState() {\n  if (store.navigationRef.isReady()) {\n    const currentState = store.navigationRef.getRootState() as unknown as ResultState;\n\n    if (store.rootState !== currentState) {\n      store.updateState(currentState);\n    }\n  }\n}\n\nexport function useStoreRootState() {\n  syncStoreRootState();\n  return useSyncExternalStore(\n    store.subscribeToRootState,\n    store.rootStateSnapshot,\n    store.rootStateSnapshot\n  );\n}\n\nexport function useStoreRouteInfo() {\n  syncStoreRootState();\n  return useSyncExternalStore(\n    store.subscribeToRootState,\n    store.routeInfoSnapshot,\n    store.routeInfoSnapshot\n  );\n}\n\nexport function useInitializeExpoRouter(context: RequireContext, options: LinkingConfigOptions) {\n  const navigationRef = useNavigationContainerRef();\n  useMemo(() => store.initialize(context, navigationRef, options), [context]);\n  useExpoRouter();\n  return store;\n}\n"],"mappings":"4yDAAA,MAAAA,QAAA,CAAAC,OAAA,6BAKA,MAAAC,gBAAA,CAAAC,eAAA,CAAAF,OAAA,oBACA,MAAAG,YAAA,CAAAC,YAAA,CAAAJ,OAAA,wBACA,MAAAK,OAAA,CAAAL,OAAA,UAA+E,MAAAM,cAAA,CAAAN,OAAA,gCAG/E,MAAAO,SAAA,CAAAP,OAAA,cAYA,MAAAQ,aAAA,CAAAR,OAAA,kBACA,MAAAS,kBAAA,CAAAT,OAAA,wBAEA,MAAAU,kBAAA,CAAAV,OAAA,6BAEA,MAAAW,kBAAA,CAAAX,OAAA,wBACA,MAAAY,WAAA,CAAAZ,OAAA,iBAEA,MAAAa,YAAA,CAAAb,OAAA,kBAOA,KAAa,CAAAc,WAAW,CAIdC,wBAAwB,CAAY,KAAK,CAWjDC,oBAAoB,CAAG,GAAI,CAAAC,GAAG,EAAc,CAC5CC,gBAAgB,CAAG,GAAI,CAAAD,GAAG,EAAc,CAExCE,MAAM,CAAGZ,SAAA,CAAAY,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC,CAC1BC,eAAe,CAAGb,aAAA,CAAAa,eAAe,CAACD,IAAI,CAAC,IAAI,CAAC,CAC5CE,MAAM,CAAGf,SAAA,CAAAe,MAAM,CAACF,IAAI,CAAC,IAAI,CAAC,CAC1BG,SAAS,CAAGhB,SAAA,CAAAgB,SAAS,CAACH,IAAI,CAAC,IAAI,CAAC,CAChCI,IAAI,CAAGjB,SAAA,CAAAiB,IAAI,CAACJ,IAAI,CAAC,IAAI,CAAC,CACtBK,OAAO,CAAGlB,SAAA,CAAAkB,OAAO,CAACL,IAAI,CAAC,IAAI,CAAC,CAC5BM,OAAO,CAAGnB,SAAA,CAAAmB,OAAO,CAACN,IAAI,CAAC,IAAI,CAAC,CAC5BO,UAAU,CAAGpB,SAAA,CAAAoB,UAAU,CAACP,IAAI,CAAC,IAAI,CAAC,CAClCQ,UAAU,CAAGrB,SAAA,CAAAqB,UAAU,CAACR,IAAI,CAAC,IAAI,CAAC,CAClCS,SAAS,CAAGtB,SAAA,CAAAsB,SAAS,CAACT,IAAI,CAAC,IAAI,CAAC,CAChCU,QAAQ,CAAGvB,SAAA,CAAAuB,QAAQ,CAACV,IAAI,CAAC,IAAI,CAAC,CAE9BW,UAAUA,CACRC,OAAuB,CACvBC,aAA+E,CAC/EC,oBAAA,CAA6C,EAAE,EAG/C,IAAI,CAACC,YAAY,CAAGC,SAAS,CAC7B,IAAI,CAACC,SAAS,CAAGD,SAAS,CAC1B,IAAI,CAACE,SAAS,CAAGF,SAAS,CAC1B,IAAI,CAACG,OAAO,CAAGH,SAAS,CACxB,IAAI,CAACI,yBAAyB,GAAE,CAAE,CAClC,IAAI,CAACxB,oBAAoB,CAACyB,KAAK,EAAE,CACjC,IAAI,CAACvB,gBAAgB,CAACuB,KAAK,EAAE,CAE7B,IAAI,CAACC,SAAS,CAAG,GAAA9B,WAAA,CAAA+B,SAAS,EAACX,OAAO,CAAAY,aAAA,CAAAA,aAAA,IAC7B3C,gBAAA,CAAA4C,OAAS,CAACC,UAAU,EAAEC,KAAK,EAAEC,MAAM,MACtCC,iBAAiB,CAAE,IAAI,CACvBC,QAAQ,CAAE5C,cAAA,CAAA6C,QAAQ,CAACC,EAAE,EACtB,CAAC,CAKF,IAAI,CAACC,SAAS,CAAG,CACfC,mBAAmB,CAAE,EAAE,CACvBC,QAAQ,CAAE,EAAE,CACZC,OAAO,CAAE,KAAK,CACdC,MAAM,CAAE,EAAE,CACVC,QAAQ,CAAE,E,CACX,CAED,GAAI,IAAI,CAAChB,SAAS,CAAE,CAElB,IAAI,CAACH,OAAO,CAAG,GAAA5B,kBAAA,CAAAgD,gBAAgB,EAAC,IAAI,CAACjB,SAAS,CAAEV,OAAO,CAAEE,oBAAoB,CAAC,CAC9E,IAAI,CAAC0B,aAAa,CAAG,GAAA/C,YAAA,CAAAgD,0BAA0B,EAAC,IAAI,CAACnB,SAAS,CAAC,CAK/D,KAAM,CAAAoB,UAAU,CAAG,IAAI,CAACvB,OAAO,EAAEwB,aAAa,GAAE,CAAE,CAClD,GAAI,MAAO,CAAAD,UAAU,GAAK,QAAQ,CAAE,CAClC,IAAI,CAACzB,SAAS,CAAG,IAAI,CAACE,OAAO,CAACyB,gBAAgB,GAAGF,UAAU,CAAE,IAAI,CAACvB,OAAO,CAAC0B,MAAM,CAAC,CACjF,IAAI,CAAC9B,YAAY,CAAG,IAAI,CAACE,SAAS,CAClC,GAAI,IAAI,CAACA,SAAS,CAAE,CAClB,IAAI,CAACgB,SAAS,CAAG,IAAI,CAACa,YAAY,CAAC,IAAI,CAAC7B,SAAS,CAAC,C,GAGvD,IAAM,CAEL,QAA2C,CACzC,KAAM,IAAI,CAAA8B,KAAK,CAAC,iBAAiB,CAAC,C,CAIpC,IAAI,CAACP,aAAa,CAAGvD,OAAA,CAAA+D,QAAQ,C,CAc/B,IAAI,CAACnC,aAAa,CAAGA,aAAa,CAClC,IAAI,CAACO,yBAAyB,CAAGP,aAAa,CAACoC,WAAW,CAAC,OAAO,CAAGC,IAAI,EAAI,CAC3E,KAAM,CAAAC,KAAK,CAAGD,IAAI,CAACA,IAAI,CAACC,KAAoB,CAE5C,GAAI,CAAC,IAAI,CAACxD,wBAAwB,CAAE,CAClC,IAAI,CAACA,wBAAwB,CAAG,IAAI,CAEpC,IAAI,CAACyD,0BAA0B,CAAGC,qBAAqB,CAAC,IAAK,CAE3DtE,YAAY,CAACuE,wBAAwB,GAAE,CAAE,CAC3C,CAAC,CAAC,C,CAGJ,GAAI,CAAAC,uBAAuB,CAAG,IAAI,CAACrC,SAAS,GAAKiC,KAAK,CACtD,IAAI,CAACjC,SAAS,CAAGF,SAAS,CAI1B,GAAImC,KAAK,EAAIA,KAAK,GAAK,IAAI,CAAClC,SAAS,CAAE,CACrCuC,OAAA,CAAAC,KAAK,CAACC,WAAW,CAACP,KAAK,CAAEnC,SAAS,CAAC,CACnCuC,uBAAuB,CAAG,IAAI,C,CAIhC,GAAIA,uBAAuB,CAAE,CAC3B,IAAK,KAAM,CAAAI,UAAU,GAAI,KAAI,CAAC/D,oBAAoB,CAAE,CAClD+D,UAAU,EAAE,C,EAGlB,CAAC,CAAC,CAEF,IAAK,KAAM,CAAAA,UAAU,GAAI,KAAI,CAAC7D,gBAAgB,CAAE,CAC9C6D,UAAU,EAAE,C,CAEhB,CAEAD,WAAWA,CAACP,KAAkB,CAAEjC,SAAS,CAAGiC,KAAK,EAC/CK,OAAA,CAAAC,KAAK,CAACxC,SAAS,CAAGkC,KAAK,CACvBK,OAAA,CAAAC,KAAK,CAACvC,SAAS,CAAGA,SAAS,CAE3B,KAAM,CAAA0C,aAAa,CAAGJ,OAAA,CAAAC,KAAK,CAACX,YAAY,CAACK,KAAK,CAAC,CAE/C,GAAI,CAAC,GAAA7D,kBAAA,CAAAuE,SAAS,EAAC,IAAI,CAAC5B,SAAS,CAAE2B,aAAa,CAAC,CAAE,CAC7CJ,OAAA,CAAAC,KAAK,CAACxB,SAAS,CAAG2B,aAAa,C,CAEnC,CAEAd,YAAYA,CAACK,KAAkB,EAC7B,MAAO,GAAA9D,kBAAA,CAAAyE,qBAAqB,EAC1B,CAACX,KAA6C,CAAEY,MAAe,GAAI,CACjE,MAAO,GAAAzE,kBAAA,CAAA0E,oBAAoB,EAACb,KAAK,CAAA3B,aAAA,CAAAA,aAAA,EAC/ByC,OAAO,CAAE,EAAE,EACR,IAAI,CAAC9C,OAAO,EAAE0B,MAAM,MACvBqB,qBAAqB,CAAEH,MAAM,CAC7BI,cAAc,CAAEJ,MAAM,EACvB,CAAC,CACJ,CAAC,CACDZ,KAAK,CACN,CACH,CAIAiB,kBAAkBA,CAAA,EAChB,MAAO,CAAC,IAAI,CAAC9C,SAAS,OAA0C,CAClE,CAGA+C,oBAAoB,CAAIV,UAAsB,EAAI,CAChD,IAAI,CAAC/D,oBAAoB,CAAC0E,GAAG,CAACX,UAAU,CAAC,CACzC,MAAO,IAAM,IAAI,CAAC/D,oBAAoB,CAAC2E,MAAM,CAACZ,UAAU,CAAC,CAC3D,CAAC,CACDa,gBAAgB,CAAIb,UAAsB,EAAI,CAC5C,IAAI,CAAC7D,gBAAgB,CAACwE,GAAG,CAACX,UAAU,CAAC,CACrC,MAAO,IAAM,IAAI,CAAC7D,gBAAgB,CAACyE,MAAM,CAACZ,UAAU,CAAC,CACvD,CAAC,CACDc,QAAQ,CAAGA,CAAA,GAAK,CACd,MAAO,KAAI,CACb,CAAC,CACDC,iBAAiB,CAAGA,CAAA,GAAK,CACvB,MAAO,KAAI,CAACzD,SAAU,CACxB,CAAC,CACD0D,iBAAiB,CAAGA,CAAA,GAAK,CACvB,MAAO,KAAI,CAAC1C,SAAU,CACxB,CAAC,CAED2C,OAAOA,CAAA,EACL,GAAI,IAAI,CAACxB,0BAA0B,CAAE,CACnCyB,oBAAoB,CAAC,IAAI,CAACzB,0BAA0B,CAAC,C,CAEzD,C,CA5LFI,OAAA,CAAA9D,WAAA,CAAAA,WAAA,CA+La8D,OAAA,CAAAC,KAAK,CAAG,GAAI,CAAA/D,WAAW,EAAE,CAEtC,QAAgB,CAAAoF,aAAaA,CAAA,EAC3B,MAAO,GAAA7F,OAAA,CAAA8F,oBAAoB,EAACvB,OAAA,CAAAC,KAAK,CAACe,gBAAgB,CAAEhB,OAAA,CAAAC,KAAK,CAACgB,QAAQ,CAAEjB,OAAA,CAAAC,KAAK,CAACgB,QAAQ,CAAC,CACrF,CAFAjB,OAAA,CAAAsB,aAAA,CAAAA,aAAA,CAIA,QAAS,CAAAE,kBAAkBA,CAAA,EACzB,GAAIxB,OAAA,CAAAC,KAAK,CAAC5C,aAAa,CAACoE,OAAO,EAAE,CAAE,CACjC,KAAM,CAAAC,YAAY,CAAG1B,OAAA,CAAAC,KAAK,CAAC5C,aAAa,CAACsE,YAAY,EAA4B,CAEjF,GAAI3B,OAAA,CAAAC,KAAK,CAACxC,SAAS,GAAKiE,YAAY,CAAE,CACpC1B,OAAA,CAAAC,KAAK,CAACC,WAAW,CAACwB,YAAY,CAAC,C,EAGrC,CAEA,QAAgB,CAAAE,iBAAiBA,CAAA,EAC/BJ,kBAAkB,EAAE,CACpB,MAAO,GAAA/F,OAAA,CAAA8F,oBAAoB,EACzBvB,OAAA,CAAAC,KAAK,CAACY,oBAAoB,CAC1Bb,OAAA,CAAAC,KAAK,CAACiB,iBAAiB,CACvBlB,OAAA,CAAAC,KAAK,CAACiB,iBAAiB,CACxB,CACH,CAPAlB,OAAA,CAAA4B,iBAAA,CAAAA,iBAAA,CASA,QAAgB,CAAAC,iBAAiBA,CAAA,EAC/BL,kBAAkB,EAAE,CACpB,MAAO,GAAA/F,OAAA,CAAA8F,oBAAoB,EACzBvB,OAAA,CAAAC,KAAK,CAACY,oBAAoB,CAC1Bb,OAAA,CAAAC,KAAK,CAACkB,iBAAiB,CACvBnB,OAAA,CAAAC,KAAK,CAACkB,iBAAiB,CACxB,CACH,CAPAnB,OAAA,CAAA6B,iBAAA,CAAAA,iBAAA,CASA,QAAgB,CAAAC,uBAAuBA,CAAC1E,OAAuB,CAAE2E,OAA6B,EAC5F,KAAM,CAAA1E,aAAa,CAAG,GAAAlC,QAAA,CAAA6G,yBAAyB,GAAE,CACjD,GAAAvG,OAAA,CAAAwG,OAAO,EAAC,IAAMjC,OAAA,CAAAC,KAAK,CAAC9C,UAAU,CAACC,OAAO,CAAEC,aAAa,CAAE0E,OAAO,CAAC,CAAE,CAAC3E,OAAO,CAAC,CAAC,CAC3EkE,aAAa,EAAE,CACf,MAAO,CAAAtB,OAAA,CAAAC,KAAK,CACd,CALAD,OAAA,CAAA8B,uBAAA,CAAAA,uBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}