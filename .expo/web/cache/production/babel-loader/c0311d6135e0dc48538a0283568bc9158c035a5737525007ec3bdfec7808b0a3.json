{"ast":null,"code":"import{nanoid}from'nanoid/non-secure';import*as React from'react';import useLatestCallback from'use-latest-callback';import useNavigation from'./useNavigation';import usePreventRemoveContext from'./usePreventRemoveContext';import useRoute from'./useRoute';export default function usePreventRemove(preventRemove,callback){const[id]=React.useState(()=>nanoid());const navigation=useNavigation();const{key:routeKey}=useRoute();const{setPreventRemove}=usePreventRemoveContext();React.useEffect(()=>{setPreventRemove(id,routeKey,preventRemove);return()=>{setPreventRemove(id,routeKey,false);};},[setPreventRemove,id,routeKey,preventRemove]);const beforeRemoveListener=useLatestCallback(e=>{if(!preventRemove){return;}e.preventDefault();callback({data:e.data});});React.useEffect(()=>navigation===null||navigation===void 0?void 0:navigation.addListener('beforeRemove',beforeRemoveListener),[navigation,beforeRemoveListener]);}","map":{"version":3,"names":["nanoid","React","useLatestCallback","useNavigation","usePreventRemoveContext","useRoute","usePreventRemove","preventRemove","callback","id","useState","navigation","key","routeKey","setPreventRemove","useEffect","beforeRemoveListener","e","preventDefault","data","addListener"],"sources":["/Users/apple/FounderFinder/node_modules/@react-navigation/core/src/usePreventRemove.tsx"],"sourcesContent":["import type { NavigationAction } from '@react-navigation/routers';\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport type { EventListenerCallback, EventMapCore } from './types';\nimport useNavigation from './useNavigation';\nimport usePreventRemoveContext from './usePreventRemoveContext';\nimport useRoute from './useRoute';\n\n/**\n * Hook to prevent screen from being removed. Can be used to prevent users from leaving the screen.\n *\n * @param preventRemove Boolean indicating whether to prevent screen from being removed.\n * @param callback Function which is executed when screen was prevented from being removed.\n */\nexport default function usePreventRemove(\n  preventRemove: boolean,\n  callback: (options: { data: { action: NavigationAction } }) => void\n) {\n  const [id] = React.useState(() => nanoid());\n\n  const navigation = useNavigation();\n  const { key: routeKey } = useRoute();\n\n  const { setPreventRemove } = usePreventRemoveContext();\n\n  React.useEffect(() => {\n    setPreventRemove(id, routeKey, preventRemove);\n    return () => {\n      setPreventRemove(id, routeKey, false);\n    };\n  }, [setPreventRemove, id, routeKey, preventRemove]);\n\n  const beforeRemoveListener = useLatestCallback<\n    EventListenerCallback<EventMapCore<any>, 'beforeRemove'>\n  >((e) => {\n    if (!preventRemove) {\n      return;\n    }\n\n    e.preventDefault();\n\n    callback({ data: e.data });\n  });\n\n  React.useEffect(\n    () => navigation?.addListener('beforeRemove', beforeRemoveListener),\n    [navigation, beforeRemoveListener]\n  );\n}\n"],"mappings":"AACA,OAASA,MAAM,KAAQ,mBAAmB,CAC1C,MAAO,GAAK,CAAAC,KAAK,KAAM,OAAO,CAC9B,MAAO,CAAAC,iBAAiB,KAAM,qBAAqB,CAGnD,MAAO,CAAAC,aAAa,KAAM,iBAAiB,CAC3C,MAAO,CAAAC,uBAAuB,KAAM,2BAA2B,CAC/D,MAAO,CAAAC,QAAQ,KAAM,YAAY,CAQjC,cAAe,SAAS,CAAAC,gBAAgBA,CACtCC,aAAsB,CACtBC,QAAmE,CACnE,CACA,KAAM,CAACC,EAAE,CAAC,CAAGR,KAAK,CAACS,QAAQ,CAAC,IAAMV,MAAM,EAAE,CAAC,CAE3C,KAAM,CAAAW,UAAU,CAAGR,aAAa,EAAE,CAClC,KAAM,CAAES,GAAG,CAAEC,QAAS,CAAC,CAAGR,QAAQ,EAAE,CAEpC,KAAM,CAAES,gBAAiB,CAAC,CAAGV,uBAAuB,EAAE,CAEtDH,KAAK,CAACc,SAAS,CAAC,IAAM,CACpBD,gBAAgB,CAACL,EAAE,CAAEI,QAAQ,CAAEN,aAAa,CAAC,CAC7C,MAAO,IAAM,CACXO,gBAAgB,CAACL,EAAE,CAAEI,QAAQ,CAAE,KAAK,CAAC,CACvC,CAAC,CACH,CAAC,CAAE,CAACC,gBAAgB,CAAEL,EAAE,CAAEI,QAAQ,CAAEN,aAAa,CAAC,CAAC,CAEnD,KAAM,CAAAS,oBAAoB,CAAGd,iBAAiB,CAE3Ce,CAAC,EAAK,CACP,GAAI,CAACV,aAAa,CAAE,CAClB,OACF,CAEAU,CAAC,CAACC,cAAc,EAAE,CAElBV,QAAQ,CAAC,CAAEW,IAAI,CAAEF,CAAC,CAACE,IAAK,CAAC,CAAC,CAC5B,CAAC,CAAC,CAEFlB,KAAK,CAACc,SAAS,CACb,IAAMJ,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAES,WAAW,CAAC,cAAc,CAAEJ,oBAAoB,CAAC,CACnE,CAACL,UAAU,CAAEK,oBAAoB,CAAC,CACnC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}