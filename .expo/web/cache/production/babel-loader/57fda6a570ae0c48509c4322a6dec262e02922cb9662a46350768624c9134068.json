{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";const _excluded=[\"children\",\"screenListeners\"];function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import{CommonActions}from'@react-navigation/routers';import*as React from'react';import{isValidElementType}from'react-is';import Group from'./Group';import isArrayEqual from'./isArrayEqual';import isRecordEqual from'./isRecordEqual';import NavigationHelpersContext from'./NavigationHelpersContext';import NavigationRouteContext from'./NavigationRouteContext';import NavigationStateContext from'./NavigationStateContext';import PreventRemoveProvider from'./PreventRemoveProvider';import Screen from'./Screen';import{PrivateValueStore}from'./types';import useChildListeners from'./useChildListeners';import useComponent from'./useComponent';import useCurrentRender from'./useCurrentRender';import useDescriptors from'./useDescriptors';import useEventEmitter from'./useEventEmitter';import useFocusedListenersChildrenAdapter from'./useFocusedListenersChildrenAdapter';import useFocusEvents from'./useFocusEvents';import useKeyedChildListeners from'./useKeyedChildListeners';import useNavigationHelpers from'./useNavigationHelpers';import useOnAction from'./useOnAction';import useOnGetState from'./useOnGetState';import useOnRouteFocus from'./useOnRouteFocus';import useRegisterNavigator from'./useRegisterNavigator';import useScheduleUpdate from'./useScheduleUpdate';PrivateValueStore;const isValidKey=key=>key===undefined||typeof key==='string'&&key!=='';const getRouteConfigsFromChildren=(children,groupKey,groupOptions)=>{const configs=React.Children.toArray(children).reduce((acc,child)=>{var _child$type,_child$props;if(React.isValidElement(child)){if(child.type===Screen){if(!isValidKey(child.props.navigationKey)){throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the screen '${child.props.name}'. It must be a non-empty string or 'undefined'.`);}acc.push({keys:[groupKey,child.props.navigationKey],options:groupOptions,props:child.props});return acc;}if(child.type===React.Fragment||child.type===Group){if(!isValidKey(child.props.navigationKey)){throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the group. It must be a non-empty string or 'undefined'.`);}acc.push(...getRouteConfigsFromChildren(child.props.children,child.props.navigationKey,child.type!==Group?groupOptions:groupOptions!=null?[...groupOptions,child.props.screenOptions]:[child.props.screenOptions]));return acc;}}throw new Error(`A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${React.isValidElement(child)?`'${typeof child.type==='string'?child.type:(_child$type=child.type)===null||_child$type===void 0?void 0:_child$type.name}'${child.props!=null&&typeof child.props==='object'&&'name'in child.props&&(_child$props=child.props)!==null&&_child$props!==void 0&&_child$props.name?` for the screen '${child.props.name}'`:''}`:typeof child==='object'?JSON.stringify(child):`'${String(child)}'`}). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`);},[]);if(false){configs.forEach(config=>{const{name,children,component,getComponent}=config.props;if(typeof name!=='string'||!name){throw new Error(`Got an invalid name (${JSON.stringify(name)}) for the screen. It must be a non-empty string.`);}if(children!=null||component!==undefined||getComponent!==undefined){if(children!=null&&component!==undefined){throw new Error(`Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`);}if(children!=null&&getComponent!==undefined){throw new Error(`Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`);}if(component!==undefined&&getComponent!==undefined){throw new Error(`Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`);}if(children!=null&&typeof children!=='function'){throw new Error(`Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`);}if(component!==undefined&&!isValidElementType(component)){throw new Error(`Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`);}if(getComponent!==undefined&&typeof getComponent!=='function'){throw new Error(`Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`);}if(typeof component==='function'){if(component.name==='component'){console.warn(`Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`);}else if(/^[a-z]/.test(component.name)){console.warn(`Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`);}}}else{throw new Error(`Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`);}});}return configs;};export default function useNavigationBuilder(createRouter,options){const navigatorKey=useRegisterNavigator();const route=React.useContext(NavigationRouteContext);const{children,screenListeners}=options,rest=_objectWithoutProperties(options,_excluded);const{current:router}=React.useRef(createRouter(_objectSpread(_objectSpread({},rest),route!==null&&route!==void 0&&route.params&&route.params.state==null&&route.params.initial!==false&&typeof route.params.screen==='string'?{initialRouteName:route.params.screen}:null)));const routeConfigs=getRouteConfigsFromChildren(children);const screens=routeConfigs.reduce((acc,config)=>{if(config.props.name in acc){throw new Error(`A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`);}acc[config.props.name]=config;return acc;},{});const routeNames=routeConfigs.map(config=>config.props.name);const routeKeyList=routeNames.reduce((acc,curr)=>{acc[curr]=screens[curr].keys.map(key=>key??'').join(':');return acc;},{});const routeParamList=routeNames.reduce((acc,curr)=>{const{initialParams}=screens[curr].props;acc[curr]=initialParams;return acc;},{});const routeGetIdList=routeNames.reduce((acc,curr)=>Object.assign(acc,{[curr]:screens[curr].props.getId}),{});if(!routeNames.length){throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");}const isStateValid=React.useCallback(state=>state.type===undefined||state.type===router.type,[router.type]);const isStateInitialized=React.useCallback(state=>state!==undefined&&state.stale===false&&isStateValid(state),[isStateValid]);const{state:currentState,getState:getCurrentState,setState:setCurrentState,setKey,getKey,getIsInitial}=React.useContext(NavigationStateContext);const stateCleanedUp=React.useRef(false);const cleanUpState=React.useCallback(()=>{setCurrentState(undefined);stateCleanedUp.current=true;},[setCurrentState]);const setState=React.useCallback(state=>{if(stateCleanedUp.current){return;}setCurrentState(state);},[setCurrentState]);const[initializedState,isFirstStateInitialization]=React.useMemo(()=>{var _route$params4;const initialRouteParamList=routeNames.reduce((acc,curr)=>{var _route$params,_route$params2,_route$params3;const{initialParams}=screens[curr].props;const initialParamsFromParams=(route===null||route===void 0?void 0:(_route$params=route.params)===null||_route$params===void 0?void 0:_route$params.state)==null&&(route===null||route===void 0?void 0:(_route$params2=route.params)===null||_route$params2===void 0?void 0:_route$params2.initial)!==false&&(route===null||route===void 0?void 0:(_route$params3=route.params)===null||_route$params3===void 0?void 0:_route$params3.screen)===curr?route.params.params:undefined;acc[curr]=initialParams!==undefined||initialParamsFromParams!==undefined?_objectSpread(_objectSpread({},initialParams),initialParamsFromParams):undefined;return acc;},{});if((currentState===undefined||!isStateValid(currentState))&&(route===null||route===void 0?void 0:(_route$params4=route.params)===null||_route$params4===void 0?void 0:_route$params4.state)==null){return[router.getInitialState({routeNames,routeParamList:initialRouteParamList,routeGetIdList}),true];}else{var _route$params5;return[router.getRehydratedState((route===null||route===void 0?void 0:(_route$params5=route.params)===null||_route$params5===void 0?void 0:_route$params5.state)??currentState,{routeNames,routeParamList:initialRouteParamList,routeGetIdList}),false];}},[currentState,router,isStateValid]);const previousRouteKeyListRef=React.useRef(routeKeyList);React.useEffect(()=>{previousRouteKeyListRef.current=routeKeyList;});const previousRouteKeyList=previousRouteKeyListRef.current;let state=isStateInitialized(currentState)?currentState:initializedState;let nextState=state;if(!isArrayEqual(state.routeNames,routeNames)||!isRecordEqual(routeKeyList,previousRouteKeyList)){nextState=router.getStateForRouteNamesChange(state,{routeNames,routeParamList,routeGetIdList,routeKeyChanges:Object.keys(routeKeyList).filter(name=>previousRouteKeyList.hasOwnProperty(name)&&routeKeyList[name]!==previousRouteKeyList[name])});}const previousNestedParamsRef=React.useRef(route===null||route===void 0?void 0:route.params);React.useEffect(()=>{previousNestedParamsRef.current=route===null||route===void 0?void 0:route.params;},[route===null||route===void 0?void 0:route.params]);if(route!==null&&route!==void 0&&route.params){const previousParams=previousNestedParamsRef.current;let action;if(typeof route.params.state==='object'&&route.params.state!=null&&route.params!==previousParams){action=CommonActions.reset(route.params.state);}else if(typeof route.params.screen==='string'&&(route.params.initial===false&&isFirstStateInitialization||route.params!==previousParams)){action=CommonActions.navigate({name:route.params.screen,params:route.params.params,path:route.params.path});}const updatedState=action?router.getStateForAction(nextState,action,{routeNames,routeParamList,routeGetIdList}):null;nextState=updatedState!==null?router.getRehydratedState(updatedState,{routeNames,routeParamList,routeGetIdList}):nextState;}const shouldUpdate=state!==nextState;useScheduleUpdate(()=>{if(shouldUpdate){setState(nextState);}});state=nextState;React.useEffect(()=>{setKey(navigatorKey);if(!getIsInitial()){setState(nextState);}return()=>{setTimeout(()=>{if(getCurrentState()!==undefined&&getKey()===navigatorKey){cleanUpState();}},0);};},[]);const initializedStateRef=React.useRef();initializedStateRef.current=initializedState;const getState=React.useCallback(()=>{const currentState=getCurrentState();return isStateInitialized(currentState)?currentState:initializedStateRef.current;},[getCurrentState,isStateInitialized]);const emitter=useEventEmitter(e=>{let routeNames=[];let route;if(e.target){var _route;route=state.routes.find(route=>route.key===e.target);if((_route=route)!==null&&_route!==void 0&&_route.name){routeNames.push(route.name);}}else{route=state.routes[state.index];routeNames.push(...Object.keys(screens).filter(name=>{var _route2;return((_route2=route)===null||_route2===void 0?void 0:_route2.name)===name;}));}if(route==null){return;}const navigation=descriptors[route.key].navigation;const listeners=[].concat(...[screenListeners,...routeNames.map(name=>{const{listeners}=screens[name].props;return listeners;})].map(listeners=>{const map=typeof listeners==='function'?listeners({route:route,navigation}):listeners;return map?Object.keys(map).filter(type=>type===e.type).map(type=>map===null||map===void 0?void 0:map[type]):undefined;})).filter((cb,i,self)=>cb&&self.lastIndexOf(cb)===i);listeners.forEach(listener=>listener===null||listener===void 0?void 0:listener(e));});useFocusEvents({state,emitter});React.useEffect(()=>{emitter.emit({type:'state',data:{state}});},[emitter,state]);const{listeners:childListeners,addListener}=useChildListeners();const{keyedListeners,addKeyedListener}=useKeyedChildListeners();const onAction=useOnAction({router,getState,setState,key:route===null||route===void 0?void 0:route.key,actionListeners:childListeners.action,beforeRemoveListeners:keyedListeners.beforeRemove,routerConfigOptions:{routeNames,routeParamList,routeGetIdList},emitter});const onRouteFocus=useOnRouteFocus({router,key:route===null||route===void 0?void 0:route.key,getState,setState});const navigation=useNavigationHelpers({id:options.id,onAction,getState,emitter,router});useFocusedListenersChildrenAdapter({navigation,focusedListeners:childListeners.focus});useOnGetState({getState,getStateListeners:keyedListeners.getState});const descriptors=useDescriptors({state,screens,navigation,screenOptions:options.screenOptions,defaultScreenOptions:options.defaultScreenOptions,onAction,getState,setState,onRouteFocus,addListener,addKeyedListener,router,emitter});useCurrentRender({state,navigation,descriptors});const NavigationContent=useComponent(children=>React.createElement(NavigationHelpersContext.Provider,{value:navigation},React.createElement(PreventRemoveProvider,null,children)));return{state,navigation,descriptors,NavigationContent};}","map":{"version":3,"names":["CommonActions","React","isValidElementType","Group","isArrayEqual","isRecordEqual","NavigationHelpersContext","NavigationRouteContext","NavigationStateContext","PreventRemoveProvider","Screen","PrivateValueStore","useChildListeners","useComponent","useCurrentRender","useDescriptors","useEventEmitter","useFocusedListenersChildrenAdapter","useFocusEvents","useKeyedChildListeners","useNavigationHelpers","useOnAction","useOnGetState","useOnRouteFocus","useRegisterNavigator","useScheduleUpdate","isValidKey","key","undefined","getRouteConfigsFromChildren","children","groupKey","groupOptions","configs","Children","toArray","reduce","acc","child","_child$type","_child$props","isValidElement","type","props","navigationKey","Error","JSON","stringify","name","push","keys","options","Fragment","screenOptions","String","forEach","config","component","getComponent","console","warn","test","useNavigationBuilder","createRouter","navigatorKey","route","useContext","screenListeners","rest","_objectWithoutProperties","_excluded","current","router","useRef","_objectSpread","params","state","initial","screen","initialRouteName","routeConfigs","screens","routeNames","map","routeKeyList","curr","join","routeParamList","initialParams","routeGetIdList","Object","assign","getId","length","isStateValid","useCallback","isStateInitialized","stale","currentState","getState","getCurrentState","setState","setCurrentState","setKey","getKey","getIsInitial","stateCleanedUp","cleanUpState","initializedState","isFirstStateInitialization","useMemo","_route$params4","initialRouteParamList","_route$params","_route$params2","_route$params3","initialParamsFromParams","getInitialState","_route$params5","getRehydratedState","previousRouteKeyListRef","useEffect","previousRouteKeyList","nextState","getStateForRouteNamesChange","routeKeyChanges","filter","hasOwnProperty","previousNestedParamsRef","previousParams","action","reset","navigate","path","updatedState","getStateForAction","shouldUpdate","setTimeout","initializedStateRef","emitter","e","target","_route","routes","find","index","_route2","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","emit","data","childListeners","addListener","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","id","focusedListeners","focus","getStateListeners","defaultScreenOptions","NavigationContent","createElement","Provider","value"],"sources":["/Users/apple/FounderFinder/node_modules/@react-navigation/core/src/useNavigationBuilder.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport PreventRemoveProvider from './PreventRemoveProvider';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n  RouteProp,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigationBuilderOptions<ScreenOptions extends {}> = {\n  /**\n   * Default options specified by the navigator.\n   * It receives the custom options in the arguments if a function is specified.\n   */\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n};\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\nconst isValidKey = (key: unknown) =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.props.navigationKey,\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n              ? [...groupOptions, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props != null &&\n              typeof child.props === 'object' &&\n              'name' in child.props &&\n              child.props?.name\n                ? ` for the screen '${child.props.name}'`\n                : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n            );\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\n            );\n          }\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    NavigationBuilderOptions<ScreenOptions> &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState>) =>\n      state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(\n        (name) =>\n          previousRouteKeyList.hasOwnProperty(name) &&\n          routeKeyList[name] !== previousRouteKeyList[name]\n      ),\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent((children: React.ReactNode) => (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <PreventRemoveProvider>{children}</PreventRemoveProvider>\n    </NavigationHelpersContext.Provider>\n  ));\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"],"mappings":"mzBAAA,OACEA,aAAa,KAUR,2BAA2B,CAClC,MAAO,GAAK,CAAAC,KAAK,KAAM,OAAO,CAC9B,OAASC,kBAAkB,KAAQ,UAAU,CAE7C,MAAO,CAAAC,KAAK,KAAM,SAAS,CAC3B,MAAO,CAAAC,YAAY,KAAM,gBAAgB,CACzC,MAAO,CAAAC,aAAa,KAAM,iBAAiB,CAC3C,MAAO,CAAAC,wBAAwB,KAAM,4BAA4B,CACjE,MAAO,CAAAC,sBAAsB,KAAM,0BAA0B,CAC7D,MAAO,CAAAC,sBAAsB,KAAM,0BAA0B,CAC7D,MAAO,CAAAC,qBAAqB,KAAM,yBAAyB,CAC3D,MAAO,CAAAC,MAAM,KAAM,UAAU,CAC7B,OAKEC,iBAAiB,KAGZ,SAAS,CAChB,MAAO,CAAAC,iBAAiB,KAAM,qBAAqB,CACnD,MAAO,CAAAC,YAAY,KAAM,gBAAgB,CACzC,MAAO,CAAAC,gBAAgB,KAAM,oBAAoB,CACjD,MAAO,CAAAC,cAAc,KAAkC,kBAAkB,CACzE,MAAO,CAAAC,eAAe,KAAM,mBAAmB,CAC/C,MAAO,CAAAC,kCAAkC,KAAM,sCAAsC,CACrF,MAAO,CAAAC,cAAc,KAAM,kBAAkB,CAC7C,MAAO,CAAAC,sBAAsB,KAAM,0BAA0B,CAC7D,MAAO,CAAAC,oBAAoB,KAAM,wBAAwB,CACzD,MAAO,CAAAC,WAAW,KAAM,eAAe,CACvC,MAAO,CAAAC,aAAa,KAAM,iBAAiB,CAC3C,MAAO,CAAAC,eAAe,KAAM,mBAAmB,CAC/C,MAAO,CAAAC,oBAAoB,KAAM,wBAAwB,CACzD,MAAO,CAAAC,iBAAiB,KAAM,qBAAqB,CAInDd,iBAAiB,CAqBjB,KAAM,CAAAe,UAAU,CAAIC,GAAY,EAC9BA,GAAG,GAAKC,SAAS,EAAK,MAAO,CAAAD,GAAG,GAAK,QAAQ,EAAIA,GAAG,GAAK,EAAG,CAO9D,KAAM,CAAAE,2BAA2B,CAAGA,CAKlCC,QAAyB,CACzBC,QAAiB,CACjBC,YAIY,GACT,CACH,KAAM,CAAAC,OAAO,CAAGhC,KAAK,CAACiC,QAAQ,CAACC,OAAO,CAACL,QAAQ,CAAC,CAACM,MAAM,CAErD,CAACC,GAAG,CAAEC,KAAK,GAAK,KAAAC,WAAA,CAAAC,YAAA,CAChB,GAAIvC,KAAK,CAACwC,cAAc,CAACH,KAAK,CAAC,CAAE,CAC/B,GAAIA,KAAK,CAACI,IAAI,GAAKhC,MAAM,CAAE,CAIzB,GAAI,CAACgB,UAAU,CAACY,KAAK,CAACK,KAAK,CAACC,aAAa,CAAC,CAAE,CAC1C,KAAM,IAAI,CAAAC,KAAK,CACZ,wCAAuCC,IAAI,CAACC,SAAS,CACpDT,KAAK,CAACK,KAAK,CAACC,aAAa,CACzB,qBACAN,KAAK,CAACK,KAAK,CAACK,IACb,kDAAiD,CACnD,CACH,CAEAX,GAAG,CAACY,IAAI,CAAC,CACPC,IAAI,CAAE,CAACnB,QAAQ,CAAEO,KAAK,CAACK,KAAK,CAACC,aAAa,CAAC,CAC3CO,OAAO,CAAEnB,YAAY,CACrBW,KAAK,CAAEL,KAAK,CAACK,KAOf,CAAC,CAAC,CACF,MAAO,CAAAN,GAAG,CACZ,CAEA,GAAIC,KAAK,CAACI,IAAI,GAAKzC,KAAK,CAACmD,QAAQ,EAAId,KAAK,CAACI,IAAI,GAAKvC,KAAK,CAAE,CACzD,GAAI,CAACuB,UAAU,CAACY,KAAK,CAACK,KAAK,CAACC,aAAa,CAAC,CAAE,CAC1C,KAAM,IAAI,CAAAC,KAAK,CACZ,wCAAuCC,IAAI,CAACC,SAAS,CACpDT,KAAK,CAACK,KAAK,CAACC,aAAa,CACzB,gEAA+D,CAClE,CACH,CAIAP,GAAG,CAACY,IAAI,CACN,GAAGpB,2BAA2B,CAC5BS,KAAK,CAACK,KAAK,CAACb,QAAQ,CACpBQ,KAAK,CAACK,KAAK,CAACC,aAAa,CACzBN,KAAK,CAACI,IAAI,GAAKvC,KAAK,CAChB6B,YAAY,CACZA,YAAY,EAAI,IAAI,CACpB,CAAC,GAAGA,YAAY,CAAEM,KAAK,CAACK,KAAK,CAACU,aAAa,CAAC,CAC5C,CAACf,KAAK,CAACK,KAAK,CAACU,aAAa,CAAC,CAChC,CACF,CACD,MAAO,CAAAhB,GAAG,CACZ,CACF,CAEA,KAAM,IAAI,CAAAQ,KAAK,CACZ,oGACC5C,KAAK,CAACwC,cAAc,CAACH,KAAK,CAAC,CACtB,IACC,MAAO,CAAAA,KAAK,CAACI,IAAI,GAAK,QAAQ,CAAGJ,KAAK,CAACI,IAAI,EAAAH,WAAA,CAAGD,KAAK,CAACI,IAAI,UAAAH,WAAA,iBAAVA,WAAA,CAAYS,IAC3D,IACCV,KAAK,CAACK,KAAK,EAAI,IAAI,EACnB,MAAO,CAAAL,KAAK,CAACK,KAAK,GAAK,QAAQ,EAC/B,MAAM,EAAI,CAAAL,KAAK,CAACK,KAAK,GAAAH,YAAA,CACrBF,KAAK,CAACK,KAAK,UAAAH,YAAA,WAAXA,YAAA,CAAaQ,IAAI,CACZ,oBAAmBV,KAAK,CAACK,KAAK,CAACK,IAAK,GAAE,CACvC,EACL,EAAC,CACF,MAAO,CAAAV,KAAK,GAAK,QAAQ,CACzBQ,IAAI,CAACC,SAAS,CAACT,KAAK,CAAC,CACpB,IAAGgB,MAAM,CAAChB,KAAK,CAAE,GACvB,4FAA2F,CAC7F,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,SAA2C,CACzCL,OAAO,CAACsB,OAAO,CAAEC,MAAM,EAAK,CAC1B,KAAM,CAAER,IAAI,CAAElB,QAAQ,CAAE2B,SAAS,CAAEC,YAAa,CAAC,CAAGF,MAAM,CAACb,KAAK,CAEhE,GAAI,MAAO,CAAAK,IAAI,GAAK,QAAQ,EAAI,CAACA,IAAI,CAAE,CACrC,KAAM,IAAI,CAAAH,KAAK,CACZ,wBAAuBC,IAAI,CAACC,SAAS,CACpCC,IAAI,CACJ,kDAAiD,CACpD,CACH,CAEA,GACElB,QAAQ,EAAI,IAAI,EAChB2B,SAAS,GAAK7B,SAAS,EACvB8B,YAAY,GAAK9B,SAAS,CAC1B,CACA,GAAIE,QAAQ,EAAI,IAAI,EAAI2B,SAAS,GAAK7B,SAAS,CAAE,CAC/C,KAAM,IAAI,CAAAiB,KAAK,CACZ,6DAA4DG,IAAK,oCAAmC,CACtG,CACH,CAEA,GAAIlB,QAAQ,EAAI,IAAI,EAAI4B,YAAY,GAAK9B,SAAS,CAAE,CAClD,KAAM,IAAI,CAAAiB,KAAK,CACZ,gEAA+DG,IAAK,oCAAmC,CACzG,CACH,CAEA,GAAIS,SAAS,GAAK7B,SAAS,EAAI8B,YAAY,GAAK9B,SAAS,CAAE,CACzD,KAAM,IAAI,CAAAiB,KAAK,CACZ,iEAAgEG,IAAK,oCAAmC,CAC1G,CACH,CAEA,GAAIlB,QAAQ,EAAI,IAAI,EAAI,MAAO,CAAAA,QAAQ,GAAK,UAAU,CAAE,CACtD,KAAM,IAAI,CAAAe,KAAK,CACZ,4DAA2DG,IAAK,qDAAoD,CACtH,CACH,CAEA,GAAIS,SAAS,GAAK7B,SAAS,EAAI,CAAC1B,kBAAkB,CAACuD,SAAS,CAAC,CAAE,CAC7D,KAAM,IAAI,CAAAZ,KAAK,CACZ,6DAA4DG,IAAK,wCAAuC,CAC1G,CACH,CAEA,GAAIU,YAAY,GAAK9B,SAAS,EAAI,MAAO,CAAA8B,YAAY,GAAK,UAAU,CAAE,CACpE,KAAM,IAAI,CAAAb,KAAK,CACZ,gEAA+DG,IAAK,uDAAsD,CAC5H,CACH,CAEA,GAAI,MAAO,CAAAS,SAAS,GAAK,UAAU,CAAE,CACnC,GAAIA,SAAS,CAACT,IAAI,GAAK,WAAW,CAAE,CAIlCW,OAAO,CAACC,IAAI,CACT,qFAAoFZ,IAAK,uRAAsR,CACjX,CACH,CAAC,IAAM,IAAI,QAAQ,CAACa,IAAI,CAACJ,SAAS,CAACT,IAAI,CAAC,CAAE,CACxCW,OAAO,CAACC,IAAI,CACT,kCAAiCH,SAAS,CAACT,IAAK,qBAAoBA,IAAK,yMAAwM,CACnR,CACH,CACF,CACF,CAAC,IAAM,CACL,KAAM,IAAI,CAAAH,KAAK,CACZ,kFAAiFG,IAAK,qLAAoL,CAC5Q,CACH,CACF,CAAC,CAAC,CACJ,CAEA,MAAO,CAAAf,OAAO,CAChB,CAAC,CASD,cAAe,SAAS,CAAA6B,oBAAoBA,CAO1CC,YAAsD,CACtDZ,OAOe,CACf,CACA,KAAM,CAAAa,YAAY,CAAGxC,oBAAoB,EAAE,CAE3C,KAAM,CAAAyC,KAAK,CAAGhE,KAAK,CAACiE,UAAU,CAAC3D,sBAAsB,CAExC,CAEb,KAAM,CAAEuB,QAAQ,CAAEqC,eAAyB,CAAC,CAAGhB,OAAO,CAAhBiB,IAAA,CAAAC,wBAAA,CAASlB,OAAO,CAAAmB,SAAA,EACtD,KAAM,CAAEC,OAAO,CAAEC,MAAO,CAAC,CAAGvE,KAAK,CAACwE,MAAM,CACtCV,YAAY,CAAAW,aAAA,CAAAA,aAAA,IACNN,IAAiC,EACjCH,KAAK,SAALA,KAAK,WAALA,KAAK,CAAEU,MAAM,EACjBV,KAAK,CAACU,MAAM,CAACC,KAAK,EAAI,IAAI,EAC1BX,KAAK,CAACU,MAAM,CAACE,OAAO,GAAK,KAAK,EAC9B,MAAO,CAAAZ,KAAK,CAACU,MAAM,CAACG,MAAM,GAAK,QAAQ,CACnC,CAAEC,gBAAgB,CAAEd,KAAK,CAACU,MAAM,CAACG,MAAO,CAAC,CACzC,IAAI,CACT,CAAC,CACH,CAED,KAAM,CAAAE,YAAY,CAAGnD,2BAA2B,CAI9CC,QAAQ,CAAC,CAEX,KAAM,CAAAmD,OAAO,CAAGD,YAAY,CAAC5C,MAAM,CAEjC,CAACC,GAAG,CAAEmB,MAAM,GAAK,CACjB,GAAIA,MAAM,CAACb,KAAK,CAACK,IAAI,GAAI,CAAAX,GAAG,CAAE,CAC5B,KAAM,IAAI,CAAAQ,KAAK,CACZ,6GAA4GW,MAAM,CAACb,KAAK,CAACK,IAAK,IAAG,CACnI,CACH,CAEAX,GAAG,CAACmB,MAAM,CAACb,KAAK,CAACK,IAAI,CAAC,CAAGQ,MAAM,CAC/B,MAAO,CAAAnB,GAAG,CACZ,CAAC,CAAE,CAAC,CAAC,CAAC,CAEN,KAAM,CAAA6C,UAAU,CAAGF,YAAY,CAACG,GAAG,CAAE3B,MAAM,EAAKA,MAAM,CAACb,KAAK,CAACK,IAAI,CAAC,CAClE,KAAM,CAAAoC,YAAY,CAAGF,UAAU,CAAC9C,MAAM,CACpC,CAACC,GAAG,CAAEgD,IAAI,GAAK,CACbhD,GAAG,CAACgD,IAAI,CAAC,CAAGJ,OAAO,CAACI,IAAI,CAAC,CAACnC,IAAI,CAACiC,GAAG,CAAExD,GAAG,EAAKA,GAAG,EAAI,EAAE,CAAC,CAAC2D,IAAI,CAAC,GAAG,CAAC,CAChE,MAAO,CAAAjD,GAAG,CACZ,CAAC,CACD,CAAC,CAAC,CACH,CACD,KAAM,CAAAkD,cAAc,CAAGL,UAAU,CAAC9C,MAAM,CACtC,CAACC,GAAG,CAAEgD,IAAI,GAAK,CACb,KAAM,CAAEG,aAAc,CAAC,CAAGP,OAAO,CAACI,IAAI,CAAC,CAAC1C,KAAK,CAC7CN,GAAG,CAACgD,IAAI,CAAC,CAAGG,aAAa,CACzB,MAAO,CAAAnD,GAAG,CACZ,CAAC,CACD,CAAC,CAAC,CACH,CACD,KAAM,CAAAoD,cAAc,CAAGP,UAAU,CAAC9C,MAAM,CAGtC,CAACC,GAAG,CAAEgD,IAAI,GACRK,MAAM,CAACC,MAAM,CAACtD,GAAG,CAAE,CACjB,CAACgD,IAAI,EAAGJ,OAAO,CAACI,IAAI,CAAC,CAAC1C,KAAK,CAACiD,KAC9B,CAAC,CAAC,CACJ,CAAC,CAAC,CACH,CAED,GAAI,CAACV,UAAU,CAACW,MAAM,CAAE,CACtB,KAAM,IAAI,CAAAhD,KAAK,CACb,4FAA4F,CAC7F,CACH,CAEA,KAAM,CAAAiD,YAAY,CAAG7F,KAAK,CAAC8F,WAAW,CACnCnB,KAAsD,EACrDA,KAAK,CAAClC,IAAI,GAAKd,SAAS,EAAIgD,KAAK,CAAClC,IAAI,GAAK8B,MAAM,CAAC9B,IAAI,CACxD,CAAC8B,MAAM,CAAC9B,IAAI,CAAC,CACd,CAED,KAAM,CAAAsD,kBAAkB,CAAG/F,KAAK,CAAC8F,WAAW,CACzCnB,KAAkE,EACjEA,KAAK,GAAKhD,SAAS,EAAIgD,KAAK,CAACqB,KAAK,GAAK,KAAK,EAAIH,YAAY,CAAClB,KAAK,CAAC,CACrE,CAACkB,YAAY,CAAC,CACf,CAED,KAAM,CACJlB,KAAK,CAAEsB,YAAY,CACnBC,QAAQ,CAAEC,eAAe,CACzBC,QAAQ,CAAEC,eAAe,CACzBC,MAAM,CACNC,MAAM,CACNC,YACF,CAAC,CAAGxG,KAAK,CAACiE,UAAU,CAAC1D,sBAAsB,CAAC,CAE5C,KAAM,CAAAkG,cAAc,CAAGzG,KAAK,CAACwE,MAAM,CAAC,KAAK,CAAC,CAE1C,KAAM,CAAAkC,YAAY,CAAG1G,KAAK,CAAC8F,WAAW,CAAC,IAAM,CAC3CO,eAAe,CAAC1E,SAAS,CAAC,CAC1B8E,cAAc,CAACnC,OAAO,CAAG,IAAI,CAC/B,CAAC,CAAE,CAAC+B,eAAe,CAAC,CAAC,CAErB,KAAM,CAAAD,QAAQ,CAAGpG,KAAK,CAAC8F,WAAW,CAC/BnB,KAAkE,EAAK,CACtE,GAAI8B,cAAc,CAACnC,OAAO,CAAE,CAI1B,OACF,CACA+B,eAAe,CAAC1B,KAAK,CAAC,CACxB,CAAC,CACD,CAAC0B,eAAe,CAAC,CAClB,CAED,KAAM,CAACM,gBAAgB,CAAEC,0BAA0B,CAAC,CAAG5G,KAAK,CAAC6G,OAAO,CAAC,IAAM,KAAAC,cAAA,CACzE,KAAM,CAAAC,qBAAqB,CAAG9B,UAAU,CAAC9C,MAAM,CAE7C,CAACC,GAAG,CAAEgD,IAAI,GAAK,KAAA4B,aAAA,CAAAC,cAAA,CAAAC,cAAA,CACf,KAAM,CAAE3B,aAAc,CAAC,CAAGP,OAAO,CAACI,IAAI,CAAC,CAAC1C,KAAK,CAC7C,KAAM,CAAAyE,uBAAuB,CAC3B,CAAAnD,KAAK,SAALA,KAAK,kBAAAgD,aAAA,CAALhD,KAAK,CAAEU,MAAM,UAAAsC,aAAA,iBAAbA,aAAA,CAAerC,KAAK,GAAI,IAAI,EAC5B,CAAAX,KAAK,SAALA,KAAK,kBAAAiD,cAAA,CAALjD,KAAK,CAAEU,MAAM,UAAAuC,cAAA,iBAAbA,cAAA,CAAerC,OAAO,IAAK,KAAK,EAChC,CAAAZ,KAAK,SAALA,KAAK,kBAAAkD,cAAA,CAALlD,KAAK,CAAEU,MAAM,UAAAwC,cAAA,iBAAbA,cAAA,CAAerC,MAAM,IAAKO,IAAI,CAC1BpB,KAAK,CAACU,MAAM,CAACA,MAAM,CACnB/C,SAAS,CAEfS,GAAG,CAACgD,IAAI,CAAC,CACPG,aAAa,GAAK5D,SAAS,EAAIwF,uBAAuB,GAAKxF,SAAS,CAAA8C,aAAA,CAAAA,aAAA,IAE3Dc,aAAa,EACb4B,uBAAA,EAELxF,SAAS,CAEf,MAAO,CAAAS,GAAG,CACZ,CAAC,CAAE,CAAC,CAAC,CAAC,CAMN,GACE,CAAC6D,YAAY,GAAKtE,SAAS,EAAI,CAACkE,YAAY,CAACI,YAAY,CAAC,GAC1D,CAAAjC,KAAK,SAALA,KAAK,kBAAA8C,cAAA,CAAL9C,KAAK,CAAEU,MAAM,UAAAoC,cAAA,iBAAbA,cAAA,CAAenC,KAAK,GAAI,IAAI,CAC5B,CACA,MAAO,CACLJ,MAAM,CAAC6C,eAAe,CAAC,CACrBnC,UAAU,CACVK,cAAc,CAAEyB,qBAAqB,CACrCvB,cACF,CAAC,CAAC,CACF,IAAI,CACL,CACH,CAAC,IAAM,KAAA6B,cAAA,CACL,MAAO,CACL9C,MAAM,CAAC+C,kBAAkB,CACvB,CAAAtD,KAAK,SAALA,KAAK,kBAAAqD,cAAA,CAALrD,KAAK,CAAEU,MAAM,UAAA2C,cAAA,iBAAbA,cAAA,CAAe1C,KAAK,GAAKsB,YAAoC,CAC7D,CACEhB,UAAU,CACVK,cAAc,CAAEyB,qBAAqB,CACrCvB,cACF,CAAC,CACF,CACD,KAAK,CACN,CACH,CAOF,CAAC,CAAE,CAACS,YAAY,CAAE1B,MAAM,CAAEsB,YAAY,CAAC,CAAC,CAExC,KAAM,CAAA0B,uBAAuB,CAAGvH,KAAK,CAACwE,MAAM,CAACW,YAAY,CAAC,CAE1DnF,KAAK,CAACwH,SAAS,CAAC,IAAM,CACpBD,uBAAuB,CAACjD,OAAO,CAAGa,YAAY,CAChD,CAAC,CAAC,CAEF,KAAM,CAAAsC,oBAAoB,CAAGF,uBAAuB,CAACjD,OAAO,CAE5D,GAAI,CAAAK,KAAK,CAIPoB,kBAAkB,CAACE,YAAY,CAAC,CAC3BA,YAAY,CACZU,gBAA0B,CAEjC,GAAI,CAAAe,SAAgB,CAAG/C,KAAK,CAE5B,GACE,CAACxE,YAAY,CAACwE,KAAK,CAACM,UAAU,CAAEA,UAAU,CAAC,EAC3C,CAAC7E,aAAa,CAAC+E,YAAY,CAAEsC,oBAAoB,CAAC,CAClD,CAEAC,SAAS,CAAGnD,MAAM,CAACoD,2BAA2B,CAAChD,KAAK,CAAE,CACpDM,UAAU,CACVK,cAAc,CACdE,cAAc,CACdoC,eAAe,CAAEnC,MAAM,CAACxC,IAAI,CAACkC,YAAY,CAAC,CAAC0C,MAAM,CAC9C9E,IAAI,EACH0E,oBAAoB,CAACK,cAAc,CAAC/E,IAAI,CAAC,EACzCoC,YAAY,CAACpC,IAAI,CAAC,GAAK0E,oBAAoB,CAAC1E,IAAI,CAAC,CAEvD,CAAC,CAAC,CACJ,CAEA,KAAM,CAAAgF,uBAAuB,CAAG/H,KAAK,CAACwE,MAAM,CAACR,KAAK,SAALA,KAAK,iBAALA,KAAK,CAAEU,MAAM,CAAC,CAE3D1E,KAAK,CAACwH,SAAS,CAAC,IAAM,CACpBO,uBAAuB,CAACzD,OAAO,CAAGN,KAAK,SAALA,KAAK,iBAALA,KAAK,CAAEU,MAAM,CACjD,CAAC,CAAE,CAACV,KAAK,SAALA,KAAK,iBAALA,KAAK,CAAEU,MAAM,CAAC,CAAC,CAEnB,GAAIV,KAAK,SAALA,KAAK,WAALA,KAAK,CAAEU,MAAM,CAAE,CACjB,KAAM,CAAAsD,cAAc,CAAGD,uBAAuB,CAACzD,OAAO,CAEtD,GAAI,CAAA2D,MAAwC,CAE5C,GACE,MAAO,CAAAjE,KAAK,CAACU,MAAM,CAACC,KAAK,GAAK,QAAQ,EACtCX,KAAK,CAACU,MAAM,CAACC,KAAK,EAAI,IAAI,EAC1BX,KAAK,CAACU,MAAM,GAAKsD,cAAc,CAC/B,CAEAC,MAAM,CAAGlI,aAAa,CAACmI,KAAK,CAAClE,KAAK,CAACU,MAAM,CAACC,KAAK,CAAC,CAClD,CAAC,IAAM,IACL,MAAO,CAAAX,KAAK,CAACU,MAAM,CAACG,MAAM,GAAK,QAAQ,GACrCb,KAAK,CAACU,MAAM,CAACE,OAAO,GAAK,KAAK,EAAIgC,0BAA0B,EAC5D5C,KAAK,CAACU,MAAM,GAAKsD,cAAc,CAAC,CAClC,CAEAC,MAAM,CAAGlI,aAAa,CAACoI,QAAQ,CAAC,CAC9BpF,IAAI,CAAEiB,KAAK,CAACU,MAAM,CAACG,MAAM,CACzBH,MAAM,CAAEV,KAAK,CAACU,MAAM,CAACA,MAAM,CAC3B0D,IAAI,CAAEpE,KAAK,CAACU,MAAM,CAAC0D,IACrB,CAAC,CAAC,CACJ,CAGA,KAAM,CAAAC,YAAY,CAAGJ,MAAM,CACvB1D,MAAM,CAAC+D,iBAAiB,CAACZ,SAAS,CAAEO,MAAM,CAAE,CAC1ChD,UAAU,CACVK,cAAc,CACdE,cACF,CAAC,CAAC,CACF,IAAI,CAERkC,SAAS,CACPW,YAAY,GAAK,IAAI,CACjB9D,MAAM,CAAC+C,kBAAkB,CAACe,YAAY,CAAE,CACtCpD,UAAU,CACVK,cAAc,CACdE,cACF,CAAC,CAAC,CACFkC,SAAS,CACjB,CAEA,KAAM,CAAAa,YAAY,CAAG5D,KAAK,GAAK+C,SAAS,CAExClG,iBAAiB,CAAC,IAAM,CACtB,GAAI+G,YAAY,CAAE,CAEhBnC,QAAQ,CAACsB,SAAS,CAAC,CACrB,CACF,CAAC,CAAC,CAKF/C,KAAK,CAAG+C,SAAS,CAEjB1H,KAAK,CAACwH,SAAS,CAAC,IAAM,CACpBlB,MAAM,CAACvC,YAAY,CAAC,CAEpB,GAAI,CAACyC,YAAY,EAAE,CAAE,CAInBJ,QAAQ,CAACsB,SAAS,CAAC,CACrB,CAEA,MAAO,IAAM,CAKXc,UAAU,CAAC,IAAM,CACf,GAAIrC,eAAe,EAAE,GAAKxE,SAAS,EAAI4E,MAAM,EAAE,GAAKxC,YAAY,CAAE,CAChE2C,YAAY,EAAE,CAChB,CACF,CAAC,CAAE,CAAC,CAAC,CACP,CAAC,CAEH,CAAC,CAAE,EAAE,CAAC,CAKN,KAAM,CAAA+B,mBAAmB,CAAGzI,KAAK,CAACwE,MAAM,EAAS,CACjDiE,mBAAmB,CAACnE,OAAO,CAAGqC,gBAAgB,CAE9C,KAAM,CAAAT,QAAQ,CAAGlG,KAAK,CAAC8F,WAAW,CAAC,IAAa,CAC9C,KAAM,CAAAG,YAAY,CAAGE,eAAe,EAAE,CAEtC,MAAO,CAAAJ,kBAAkB,CAACE,YAAY,CAAC,CAClCA,YAAY,CACZwC,mBAAmB,CAACnE,OAAiB,CAC5C,CAAC,CAAE,CAAC6B,eAAe,CAAEJ,kBAAkB,CAAC,CAAC,CAEzC,KAAM,CAAA2C,OAAO,CAAG3H,eAAe,CAAuB4H,CAAC,EAAK,CAC1D,GAAI,CAAA1D,UAAU,CAAG,EAAE,CAEnB,GAAI,CAAAjB,KAAgC,CAEpC,GAAI2E,CAAC,CAACC,MAAM,CAAE,KAAAC,MAAA,CACZ7E,KAAK,CAAGW,KAAK,CAACmE,MAAM,CAACC,IAAI,CAAE/E,KAAK,EAAKA,KAAK,CAACtC,GAAG,GAAKiH,CAAC,CAACC,MAAM,CAAC,CAE5D,IAAAC,MAAA,CAAI7E,KAAK,UAAA6E,MAAA,WAALA,MAAA,CAAO9F,IAAI,CAAE,CACfkC,UAAU,CAACjC,IAAI,CAACgB,KAAK,CAACjB,IAAI,CAAC,CAC7B,CACF,CAAC,IAAM,CACLiB,KAAK,CAAGW,KAAK,CAACmE,MAAM,CAACnE,KAAK,CAACqE,KAAK,CAAC,CACjC/D,UAAU,CAACjC,IAAI,CACb,GAAGyC,MAAM,CAACxC,IAAI,CAAC+B,OAAO,CAAC,CAAC6C,MAAM,CAAE9E,IAAI,OAAAkG,OAAA,OAAK,EAAAA,OAAA,CAAAjF,KAAK,UAAAiF,OAAA,iBAALA,OAAA,CAAOlG,IAAI,IAAKA,IAAI,GAAC,CAC/D,CACH,CAEA,GAAIiB,KAAK,EAAI,IAAI,CAAE,CACjB,OACF,CAEA,KAAM,CAAAkF,UAAU,CAAGC,WAAW,CAACnF,KAAK,CAACtC,GAAG,CAAC,CAACwH,UAAU,CAEpD,KAAM,CAAAE,SAAS,CAAI,EAAE,CAClBC,MAAM,CAEL,GAAG,CACDnF,eAAe,CACf,GAAGe,UAAU,CAACC,GAAG,CAAEnC,IAAI,EAAK,CAC1B,KAAM,CAAEqG,SAAU,CAAC,CAAGpE,OAAO,CAACjC,IAAI,CAAC,CAACL,KAAK,CACzC,MAAO,CAAA0G,SAAS,CAClB,CAAC,CAAC,CACH,CAAClE,GAAG,CAAEkE,SAAS,EAAK,CACnB,KAAM,CAAAlE,GAAG,CACP,MAAO,CAAAkE,SAAS,GAAK,UAAU,CAC3BA,SAAS,CAAC,CAAEpF,KAAK,CAAEA,KAAY,CAAEkF,UAAW,CAAC,CAAC,CAC9CE,SAAS,CAEf,MAAO,CAAAlE,GAAG,CACNO,MAAM,CAACxC,IAAI,CAACiC,GAAG,CAAC,CACb2C,MAAM,CAAEpF,IAAI,EAAKA,IAAI,GAAKkG,CAAC,CAAClG,IAAI,CAAC,CACjCyC,GAAG,CAAEzC,IAAI,EAAKyC,GAAG,SAAHA,GAAG,iBAAHA,GAAG,CAAGzC,IAAI,CAAC,CAAC,CAC7Bd,SAAS,CACf,CAAC,CAAC,EAIHkG,MAAM,CAAC,CAACyB,EAAE,CAAEC,CAAC,CAAEC,IAAI,GAAKF,EAAE,EAAIE,IAAI,CAACC,WAAW,CAACH,EAAE,CAAC,GAAKC,CAAC,CAAC,CAE5DH,SAAS,CAAC9F,OAAO,CAAEoG,QAAQ,EAAKA,QAAQ,SAARA,QAAQ,iBAARA,QAAQ,CAAGf,CAAC,CAAC,CAAC,CAChD,CAAC,CAAC,CAEF1H,cAAc,CAAC,CAAE0D,KAAK,CAAE+D,OAAQ,CAAC,CAAC,CAElC1I,KAAK,CAACwH,SAAS,CAAC,IAAM,CACpBkB,OAAO,CAACiB,IAAI,CAAC,CAAElH,IAAI,CAAE,OAAO,CAAEmH,IAAI,CAAE,CAAEjF,KAAM,CAAE,CAAC,CAAC,CAClD,CAAC,CAAE,CAAC+D,OAAO,CAAE/D,KAAK,CAAC,CAAC,CAEpB,KAAM,CAAEyE,SAAS,CAAES,cAAc,CAAEC,WAAY,CAAC,CAAGnJ,iBAAiB,EAAE,CAEtE,KAAM,CAAEoJ,cAAc,CAAEC,gBAAiB,CAAC,CAAG9I,sBAAsB,EAAE,CAErE,KAAM,CAAA+I,QAAQ,CAAG7I,WAAW,CAAC,CAC3BmD,MAAM,CACN2B,QAAQ,CACRE,QAAQ,CACR1E,GAAG,CAAEsC,KAAK,SAALA,KAAK,iBAALA,KAAK,CAAEtC,GAAG,CACfwI,eAAe,CAAEL,cAAc,CAAC5B,MAAM,CACtCkC,qBAAqB,CAAEJ,cAAc,CAACK,YAAY,CAClDC,mBAAmB,CAAE,CACnBpF,UAAU,CACVK,cAAc,CACdE,cACF,CAAC,CACDkD,OACF,CAAC,CAAC,CAEF,KAAM,CAAA4B,YAAY,CAAGhJ,eAAe,CAAC,CACnCiD,MAAM,CACN7C,GAAG,CAAEsC,KAAK,SAALA,KAAK,iBAALA,KAAK,CAAEtC,GAAG,CACfwE,QAAQ,CACRE,QACF,CAAC,CAAC,CAEF,KAAM,CAAA8C,UAAU,CAAG/H,oBAAoB,CAKrC,CACAoJ,EAAE,CAAErH,OAAO,CAACqH,EAAE,CACdN,QAAQ,CACR/D,QAAQ,CACRwC,OAAO,CACPnE,MACF,CAAC,CAAC,CAEFvD,kCAAkC,CAAC,CACjCkI,UAAU,CACVsB,gBAAgB,CAAEX,cAAc,CAACY,KACnC,CAAC,CAAC,CAEFpJ,aAAa,CAAC,CACZ6E,QAAQ,CACRwE,iBAAiB,CAAEX,cAAc,CAAC7D,QACpC,CAAC,CAAC,CAEF,KAAM,CAAAiD,WAAW,CAAGrI,cAAc,CAKhC,CACA6D,KAAK,CACLK,OAAO,CACPkE,UAAU,CACV9F,aAAa,CAAEF,OAAO,CAACE,aAAa,CACpCuH,oBAAoB,CAAEzH,OAAO,CAACyH,oBAAoB,CAClDV,QAAQ,CACR/D,QAAQ,CACRE,QAAQ,CACRkE,YAAY,CACZR,WAAW,CACXE,gBAAgB,CAChBzF,MAAM,CAENmE,OACF,CAAC,CAAC,CAEF7H,gBAAgB,CAAC,CACf8D,KAAK,CACLuE,UAAU,CACVC,WACF,CAAC,CAAC,CAEF,KAAM,CAAAyB,iBAAiB,CAAGhK,YAAY,CAAEiB,QAAyB,EAC/D7B,KAAA,CAAA6K,aAAA,CAACxK,wBAAwB,CAACyK,QAAQ,EAACC,KAAK,CAAE7B,UAAW,EACnDlJ,KAAA,CAAA6K,aAAA,CAACrK,qBAAqB,MAAEqB,QAAQ,CAAyB,CAE5D,CAAC,CAEF,MAAO,CACL8C,KAAK,CACLuE,UAAU,CACVC,WAAW,CACXyB,iBACF,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}