{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.extractExpoPathFromURL=exports.parsePathFromExpoGoLink=exports.parsePathAndParamsFromExpoGoLink=void 0;function parsePathAndParamsFromExpoGoLink(url){const href=parsePathFromExpoGoLink(url);const results=href.match(/(.*?)(\\?.*)/);return{pathname:results?.[1]??'',queryString:results?.[2]??''};}exports.parsePathAndParamsFromExpoGoLink=parsePathAndParamsFromExpoGoLink;function parsePathFromExpoGoLink(url){return url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/)?.[1]??'';}exports.parsePathFromExpoGoLink=parsePathFromExpoGoLink;function extractExactPathFromURL(url){if(url.match(/^https?:\\/\\//)){const{origin,href,hostname}=new URL(url);if(hostname==='exp.host'||hostname==='u.expo.dev'){return'';}return href.replace(origin,'');}const isExpoGo=typeof expo!=='undefined'&&globalThis.expo?.modules?.ExpoGo;if(isExpoGo&&url.match(/^exp(s)?:\\/\\//)){const pathname=parsePathFromExpoGoLink(url);if(pathname){return fromDeepLink('a://'+pathname);}const queryParams=url.match(/exps?:\\/\\/.*\\?(.*)/)?.[1];if(queryParams){return fromDeepLink('a://?'+queryParams);}return'';}return fromDeepLink(url);}function isExpoDevelopmentClient(url){return url.hostname==='expo-development-client';}function fromDeepLink(url){let res;try{res=new URL(url);}catch{return url;}if(isExpoDevelopmentClient(res)){if(!res.searchParams.get('url')){return'';}const incomingUrl=res.searchParams.get('url');return extractExactPathFromURL(decodeURI(incomingUrl));}let results='';if(res.host){results+=res.host;}if(res.pathname){results+=res.pathname;}const qs=!res.search?'':[...res.searchParams.entries()].map(([k,v])=>`${k}=${decodeURIComponent(v)}`).join('&');if(qs){results+='?'+qs;}return results;}function extractExpoPathFromURL(url=''){return extractExactPathFromURL(url).replace(/^\\//,'');}exports.extractExpoPathFromURL=extractExpoPathFromURL;","map":{"version":3,"names":["parsePathAndParamsFromExpoGoLink","url","href","parsePathFromExpoGoLink","results","match","pathname","queryString","exports","extractExactPathFromURL","origin","hostname","URL","replace","isExpoGo","expo","globalThis","modules","ExpoGo","fromDeepLink","queryParams","isExpoDevelopmentClient","res","searchParams","get","incomingUrl","decodeURI","host","qs","search","entries","map","k","v","decodeURIComponent","join","extractExpoPathFromURL"],"sources":["/Users/apple/FounderFinder/node_modules/expo-router/src/fork/extractPathFromURL.ts"],"sourcesContent":["export function parsePathAndParamsFromExpoGoLink(url: string): {\n  pathname: string;\n  queryString: string;\n} {\n  // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n  // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n\n  const href = parsePathFromExpoGoLink(url);\n  const results = href.match(/(.*?)(\\?.*)/);\n  return {\n    pathname: results?.[1] ?? '',\n    queryString: results?.[2] ?? '',\n  };\n}\n\nexport function parsePathFromExpoGoLink(url: string): string {\n  // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n  // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n  return url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/)?.[1] ?? '';\n}\n\n// This is only run on native.\nfunction extractExactPathFromURL(url: string): string {\n  if (\n    // If a universal link / app link / web URL is used, we should use the path\n    // from the URL, while stripping the origin.\n    url.match(/^https?:\\/\\//)\n  ) {\n    const { origin, href, hostname } = new URL(url);\n\n    if (hostname === 'exp.host' || hostname === 'u.expo.dev') {\n      // These are QR code generate deep-link that always like to the '/' path\n      // TODO: In the future, QR code may link to a specific path and this logic will need to be udpated\n      return '';\n    }\n\n    return href.replace(origin, '');\n  }\n\n  const isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;\n\n  // Handle special URLs used in Expo Go: `/--/pathname` -> `pathname`\n  if (\n    isExpoGo &&\n    // while not exhaustive, `exp` and `exps` are the only two schemes which\n    // are passed through to other apps in Expo Go.\n    url.match(/^exp(s)?:\\/\\//)\n  ) {\n    const pathname = parsePathFromExpoGoLink(url);\n    if (pathname) {\n      return fromDeepLink('a://' + pathname);\n    }\n    // Match the `?.*` segment of the URL.\n    const queryParams = url.match(/exps?:\\/\\/.*\\?(.*)/)?.[1];\n    if (queryParams) {\n      return fromDeepLink('a://?' + queryParams);\n    }\n\n    return '';\n  }\n\n  // TODO: Support dev client URLs\n\n  return fromDeepLink(url);\n}\n\n/** Major hack to support the makeshift expo-development-client system. */\nfunction isExpoDevelopmentClient(url: URL): boolean {\n  return url.hostname === 'expo-development-client';\n}\n\nfunction fromDeepLink(url: string): string {\n  let res: URL;\n  try {\n    // This is for all standard deep links, e.g. `foobar://` where everything\n    // after the `://` is the path.\n    res = new URL(url);\n  } catch {\n    return url;\n  }\n\n  if (isExpoDevelopmentClient(res)) {\n    if (!res.searchParams.get('url')) {\n      return '';\n    }\n    const incomingUrl = res.searchParams.get('url')!;\n    return extractExactPathFromURL(decodeURI(incomingUrl));\n  }\n\n  let results = '';\n\n  if (res.host) {\n    results += res.host;\n  }\n\n  if (res.pathname) {\n    results += res.pathname;\n  }\n\n  const qs = !res.search\n    ? ''\n    : // @ts-ignore: `entries` is not on `URLSearchParams` in some typechecks.\n      [...res.searchParams.entries()].map(([k, v]) => `${k}=${decodeURIComponent(v)}`).join('&');\n\n  if (qs) {\n    results += '?' + qs;\n  }\n\n  return results;\n}\n\nexport function extractExpoPathFromURL(url: string = '') {\n  return (\n    extractExactPathFromURL(url)\n      // TODO: We should get rid of this, dropping specificities is not good\n      .replace(/^\\//, '')\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}