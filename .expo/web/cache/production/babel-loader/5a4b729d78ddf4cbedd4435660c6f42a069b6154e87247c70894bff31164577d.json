{"ast":null,"code":"\"use strict\";var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;var desc=Object.getOwnPropertyDescriptor(m,k);if(!desc||(\"get\"in desc?!m.__esModule:desc.writable||desc.configurable)){desc={enumerable:true,get:function(){return m[k];}};}Object.defineProperty(o,k2,desc);}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k];});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,\"default\",{enumerable:true,value:v});}:function(o,v){o[\"default\"]=v;});var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod)if(k!==\"default\"&&Object.prototype.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);__setModuleDefault(result,mod);return result;};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod};};Object.defineProperty(exports,\"__esModule\",{value:true});exports.getPathFromState=exports.getStateFromPath=exports.addEventListener=exports.getRootURL=exports.getInitialURL=void 0;const Linking=__importStar(require(\"expo-linking\"));const react_native_1=require(\"react-native-web/dist/index\");const extractPathFromURL_1=require(\"../fork/extractPathFromURL\");const getPathFromState_1=__importDefault(require(\"../fork/getPathFromState\"));exports.getPathFromState=getPathFromState_1.default;const getStateFromPath_1=__importDefault(require(\"../fork/getStateFromPath\"));exports.getStateFromPath=getStateFromPath_1.default;const isExpoGo=typeof expo!=='undefined'&&globalThis.expo?.modules?.ExpoGo;function getInitialURLWithTimeout(){return Promise.race([Linking.getInitialURL(),new Promise(resolve=>setTimeout(()=>resolve(null),150))]);}function getInitialURL(){if(react_native_1.Platform.OS==='web'){if(false){return'';}else if(window.location?.href){return window.location.href;}}return getInitialURLWithTimeout().then(url=>parseExpoGoUrlFromListener(url)??getRootURL());}exports.getInitialURL=getInitialURL;let _rootURL;function getRootURL(){if(_rootURL===undefined){_rootURL=Linking.createURL('/');}return _rootURL;}exports.getRootURL=getRootURL;function parseExpoGoUrlFromListener(url){if(!url||!isExpoGo){return url;}const{pathname,queryString}=(0,extractPathFromURL_1.parsePathAndParamsFromExpoGoLink)(url);if(!pathname||pathname==='/'){return getRootURL()+queryString;}return url;}function addEventListener(nativeLinking){return listener=>{let callback;if(isExpoGo){callback=async({url})=>{url=parseExpoGoUrlFromListener(url);if(url&&nativeLinking?.redirectSystemPath){url=await nativeLinking.redirectSystemPath({path:url,initial:false});}listener(url);};}else{callback=async({url})=>{if(url&&nativeLinking?.redirectSystemPath){url=await nativeLinking.redirectSystemPath({path:url,initial:false});}listener(url);};}const subscription=Linking.addEventListener('url',callback);return()=>{subscription?.remove?.();};};}exports.addEventListener=addEventListener;","map":{"version":3,"names":["Linking","__importStar","require","react_native_1","extractPathFromURL_1","getPathFromState_1","__importDefault","exports","getPathFromState","default","getStateFromPath_1","getStateFromPath","isExpoGo","expo","globalThis","modules","ExpoGo","getInitialURLWithTimeout","Promise","race","getInitialURL","resolve","setTimeout","Platform","OS","window","location","href","then","url","parseExpoGoUrlFromListener","getRootURL","_rootURL","undefined","createURL","pathname","queryString","parsePathAndParamsFromExpoGoLink","addEventListener","nativeLinking","listener","callback","redirectSystemPath","path","initial","subscription","remove"],"sources":["/Users/apple/FounderFinder/node_modules/expo-router/src/link/linking.ts"],"sourcesContent":["import { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'react-native';\n\nimport { parsePathAndParamsFromExpoGoLink } from '../fork/extractPathFromURL';\nimport getPathFromState from '../fork/getPathFromState';\nimport getStateFromPath from '../fork/getStateFromPath';\nimport { NativeIntent } from '../types';\n\nconst isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;\n\nfunction getInitialURLWithTimeout(): Promise<string | null> {\n  return Promise.race([\n    Linking.getInitialURL(),\n    new Promise<null>((resolve) =>\n      // Timeout in 150ms if `getInitialState` doesn't resolve\n      // Workaround for https://github.com/facebook/react-native/issues/25675\n      setTimeout(() => resolve(null), 150)\n    ),\n  ]);\n}\n\n// A custom getInitialURL is used on native to ensure the app always starts at\n// the root path if it's launched from something other than a deep link.\n// This helps keep the native functionality working like the web functionality.\n// For example, if you had a root navigator where the first screen was `/settings` and the second was `/index`\n// then `/index` would be used on web and `/settings` would be used on native.\nexport function getInitialURL(): ReturnType<\n  NonNullable<LinkingOptions<Record<string, unknown>>['getInitialURL']>\n> {\n  if (Platform.OS === 'web') {\n    if (typeof window === 'undefined') {\n      return '';\n    } else if (window.location?.href) {\n      return window.location.href;\n    }\n  }\n\n  return getInitialURLWithTimeout().then(\n    (url) =>\n      parseExpoGoUrlFromListener(url) ??\n      // The path will be nullish in bare apps when the app is launched from the home screen.\n      // TODO(EvanBacon): define some policy around notifications.\n      getRootURL()\n  );\n}\n\nlet _rootURL: string | undefined;\n\nexport function getRootURL(): string {\n  if (_rootURL === undefined) {\n    _rootURL = Linking.createURL('/');\n  }\n  return _rootURL;\n}\n\n// Expo Go is weird and requires the root path to be `/--/`\nfunction parseExpoGoUrlFromListener<T extends string | null>(url: T): T {\n  if (!url || !isExpoGo) {\n    return url;\n  }\n  const { pathname, queryString } = parsePathAndParamsFromExpoGoLink(url);\n  // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n  // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n  if (!pathname || pathname === '/') {\n    return (getRootURL() + queryString) as T;\n  }\n  return url;\n}\n\nexport function addEventListener(nativeLinking?: NativeIntent) {\n  return (listener: (url: string) => void) => {\n    let callback: (({ url }: { url: string }) => void) | undefined;\n\n    if (isExpoGo) {\n      // This extra work is only done in the Expo Go app.\n      callback = async ({ url }) => {\n        url = parseExpoGoUrlFromListener(url);\n\n        if (url && nativeLinking?.redirectSystemPath) {\n          url = await nativeLinking.redirectSystemPath({ path: url, initial: false });\n        }\n\n        listener(url);\n      };\n    } else {\n      callback = async ({ url }) => {\n        if (url && nativeLinking?.redirectSystemPath) {\n          url = await nativeLinking.redirectSystemPath({ path: url, initial: false });\n        }\n        listener(url);\n      };\n    }\n\n    const subscription = Linking.addEventListener('url', callback);\n\n    return () => {\n      // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n      subscription?.remove?.();\n    };\n  };\n}\n\nexport { getStateFromPath, getPathFromState };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}