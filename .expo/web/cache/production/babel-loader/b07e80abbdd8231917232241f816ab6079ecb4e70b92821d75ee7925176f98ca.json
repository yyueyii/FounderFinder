{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";const _excluded=[\"state\"];import*as React from'react';export const CHILD_STATE=Symbol('CHILD_STATE');export default function useRouteCache(routes){const cache=React.useMemo(()=>({current:new Map()}),[]);if(true){return routes;}cache.current=routes.reduce((acc,route)=>{const previous=cache.current.get(route);if(previous){acc.set(route,previous);}else{const{state}=route,proxy=_objectWithoutProperties(route,_excluded);Object.defineProperty(proxy,CHILD_STATE,{enumerable:false,value:state});acc.set(route,proxy);}return acc;},new Map());return Array.from(cache.current.values());}","map":{"version":3,"names":["React","CHILD_STATE","Symbol","useRouteCache","routes","cache","useMemo","current","Map","reduce","acc","route","previous","get","set","state","proxy","_objectWithoutProperties","_excluded","Object","defineProperty","enumerable","value","Array","from","values"],"sources":["/Users/apple/FounderFinder/node_modules/@react-navigation/core/src/useRouteCache.tsx"],"sourcesContent":["import type {\n  NavigationState,\n  ParamListBase,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { RouteProp } from './types';\n\ntype RouteCache = Map<Route<string>, RouteProp<ParamListBase>>;\n\n/**\n * Utilites such as `getFocusedRouteNameFromRoute` need to access state.\n * So we need a way to suppress the warning for those use cases.\n * This is fine since they are internal utilities and this is not public API.\n */\nexport const CHILD_STATE = Symbol('CHILD_STATE');\n\n/**\n * Hook to cache route props for each screen in the navigator.\n * This lets add warnings and modifications to the route object but keep references between renders.\n */\nexport default function useRouteCache<State extends NavigationState>(\n  routes: State['routes']\n) {\n  // Cache object which holds route objects for each screen\n  const cache = React.useMemo(() => ({ current: new Map() as RouteCache }), []);\n\n  if (process.env.NODE_ENV === 'production') {\n    // We don't want the overhead of creating extra maps every render in prod\n    return routes;\n  }\n\n  cache.current = routes.reduce((acc, route) => {\n    const previous = cache.current.get(route);\n\n    if (previous) {\n      // If a cached route object already exists, reuse it\n      acc.set(route, previous);\n    } else {\n      const { state, ...proxy } = route;\n\n      Object.defineProperty(proxy, CHILD_STATE, {\n        enumerable: false,\n        value: state,\n      });\n\n      acc.set(route, proxy);\n    }\n\n    return acc;\n  }, new Map() as RouteCache);\n\n  return Array.from(cache.current.values());\n}\n"],"mappings":"+GAKA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAW9B,MAAO,MAAM,CAAAC,WAAW,CAAGC,MAAM,CAAC,aAAa,CAAC,CAMhD,cAAe,SAAS,CAAAC,aAAaA,CACnCC,MAAuB,CACvB,CAEA,KAAM,CAAAC,KAAK,CAAGL,KAAK,CAACM,OAAO,CAAC,KAAO,CAAEC,OAAO,CAAE,GAAI,CAAAC,GAAG,EAAiB,CAAC,CAAC,CAAE,EAAE,CAAC,CAE7E,QAA2C,CAEzC,MAAO,CAAAJ,MAAM,CACf,CAEAC,KAAK,CAACE,OAAO,CAAGH,MAAM,CAACK,MAAM,CAAC,CAACC,GAAG,CAAEC,KAAK,GAAK,CAC5C,KAAM,CAAAC,QAAQ,CAAGP,KAAK,CAACE,OAAO,CAACM,GAAG,CAACF,KAAK,CAAC,CAEzC,GAAIC,QAAQ,CAAE,CAEZF,GAAG,CAACI,GAAG,CAACH,KAAK,CAAEC,QAAQ,CAAC,CAC1B,CAAC,IAAM,CACL,KAAM,CAAEG,KAAgB,CAAC,CAAGJ,KAAK,CAAfK,KAAA,CAAAC,wBAAA,CAAUN,KAAK,CAAAO,SAAA,EAEjCC,MAAM,CAACC,cAAc,CAACJ,KAAK,CAAEf,WAAW,CAAE,CACxCoB,UAAU,CAAE,KAAK,CACjBC,KAAK,CAAEP,KACT,CAAC,CAAC,CAEFL,GAAG,CAACI,GAAG,CAACH,KAAK,CAAEK,KAAK,CAAC,CACvB,CAEA,MAAO,CAAAN,GAAG,CACZ,CAAC,CAAE,GAAI,CAAAF,GAAG,EAAE,CAAe,CAE3B,MAAO,CAAAe,KAAK,CAACC,IAAI,CAACnB,KAAK,CAACE,OAAO,CAACkB,MAAM,EAAE,CAAC,CAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}