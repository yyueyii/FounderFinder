{"ast":null,"code":"import*as React from'react';import useNavigation from'./useNavigation';export default function useNavigationState(selector){const navigation=useNavigation();const[,setResult]=React.useState(()=>selector(navigation.getState()));const selectorRef=React.useRef(selector);React.useEffect(()=>{selectorRef.current=selector;});React.useEffect(()=>{const unsubscribe=navigation.addListener('state',e=>{setResult(selectorRef.current(e.data.state));});return unsubscribe;},[navigation]);return selector(navigation.getState());}","map":{"version":3,"names":["React","useNavigation","useNavigationState","selector","navigation","setResult","useState","getState","selectorRef","useRef","useEffect","current","unsubscribe","addListener","e","data","state"],"sources":["/Users/apple/FounderFinder/node_modules/@react-navigation/core/src/useNavigationState.tsx"],"sourcesContent":["import type { NavigationState, ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { NavigationProp } from './types';\nimport useNavigation from './useNavigation';\n\ntype Selector<ParamList extends ParamListBase, T> = (\n  state: NavigationState<ParamList>\n) => T;\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState<ParamList extends ParamListBase, T>(\n  selector: Selector<ParamList, T>\n): T {\n  const navigation = useNavigation<NavigationProp<ParamList>>();\n\n  // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n  const [, setResult] = React.useState(() => selector(navigation.getState()));\n\n  // We store the selector in a ref to avoid re-subscribing listeners every render\n  const selectorRef = React.useRef(selector);\n\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', (e) => {\n      setResult(selectorRef.current(e.data.state));\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return selector(navigation.getState());\n}\n"],"mappings":"AACA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAG9B,MAAO,CAAAC,aAAa,KAAM,iBAAiB,CAW3C,cAAe,SAAS,CAAAC,kBAAkBA,CACxCC,QAAgC,CAC7B,CACH,KAAM,CAAAC,UAAU,CAAGH,aAAa,EAA6B,CAI7D,KAAM,EAAGI,SAAS,CAAC,CAAGL,KAAK,CAACM,QAAQ,CAAC,IAAMH,QAAQ,CAACC,UAAU,CAACG,QAAQ,EAAE,CAAC,CAAC,CAG3E,KAAM,CAAAC,WAAW,CAAGR,KAAK,CAACS,MAAM,CAACN,QAAQ,CAAC,CAE1CH,KAAK,CAACU,SAAS,CAAC,IAAM,CACpBF,WAAW,CAACG,OAAO,CAAGR,QAAQ,CAChC,CAAC,CAAC,CAEFH,KAAK,CAACU,SAAS,CAAC,IAAM,CACpB,KAAM,CAAAE,WAAW,CAAGR,UAAU,CAACS,WAAW,CAAC,OAAO,CAAGC,CAAC,EAAK,CACzDT,SAAS,CAACG,WAAW,CAACG,OAAO,CAACG,CAAC,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAC9C,CAAC,CAAC,CAEF,MAAO,CAAAJ,WAAW,CACpB,CAAC,CAAE,CAACR,UAAU,CAAC,CAAC,CAEhB,MAAO,CAAAD,QAAQ,CAACC,UAAU,CAACG,QAAQ,EAAE,CAAC,CACxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}